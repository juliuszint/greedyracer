//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float2 EyeToSourceUVScale;         // Offset:    0 Size:     8
//   float2 EyeToSourceUVOffset;        // Offset:    8 Size:     8
//   float4x4 EyeRotationStart;         // Offset:   16 Size:    64
//   float4x4 EyeRotationEnd;           // Offset:   80 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xy          0     NONE   float   xy  
// POSITION                 1   x           1     NONE   float   x   
// POSITION                 2   x           2     NONE   float   x   
// TEXCOORD                 0   xy          3     NONE   float   xy  
// TEXCOORD                 1   xy          4     NONE   float   xy  
// TEXCOORD                 2   xy          5     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xy          2     NONE   float   xy  
// TEXCOORD                 3     z         2     NONE   float     z 
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer cb0[9], immediateIndexed
dcl_input v0.xy
dcl_input v1.x
dcl_input v2.x
dcl_input v3.xy
dcl_input v4.xy
dcl_input v5.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.zw
dcl_output o2.xy
dcl_output o2.z
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- Position.x; v0.y <- Position.y; 
//   v1.x <- timewarpLerpFactor; 
//   v2.x <- Vignette; 
//   v3.x <- TexCoord0.x; v3.y <- TexCoord0.y; 
//   v4.x <- TexCoord1.x; v4.y <- TexCoord1.y; 
//   v5.x <- TexCoord2.x; v5.y <- TexCoord2.y; 
//   o0.x <- oPosition.x; o0.y <- oPosition.y; o0.z <- oPosition.z; o0.w <- oPosition.w; 
//   o1.x <- oTexCoord0.x; o1.y <- oTexCoord0.y; o1.z <- oTexCoord1.x; o1.w <- oTexCoord1.y; 
//   o2.x <- oTexCoord2.x; o2.y <- oTexCoord2.y; o2.z <- oVignette
//
#line 24 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2014-12-26a\Vektoria\trunk\VektoriaApp\shaders\Source\occulus.hlsl"
mov r0.xy, -cb0[1].xyxx
mov r0.zw, -cb0[2].xxxy
mov r1.xy, -cb0[3].xyxx
mov r1.zw, -cb0[4].xxxy
mov r2.x, cb0[1].z
mov r2.y, cb0[2].z
mov r2.z, cb0[3].z
mov r2.w, cb0[4].z
mov r3.xyzw, -r2.xyzw
add r4.x, r0.x, cb0[5].x
add r4.y, r0.z, cb0[6].x
add r4.z, r1.x, cb0[7].x
add r4.w, r1.z, cb0[8].x
add r5.x, r0.y, cb0[5].y
add r5.y, r0.w, cb0[6].y
add r5.z, r1.y, cb0[7].y
add r5.w, r1.w, cb0[8].y
add r0.x, r3.x, cb0[5].z
add r0.y, r3.y, cb0[6].z
add r0.z, r3.z, cb0[7].z
add r0.w, r3.w, cb0[8].z
mul r1.xyzw, r4.xyzw, v1.xxxx
mul r3.xyzw, r5.xyzw, v1.xxxx
mul r0.xyzw, r0.xyzw, v1.xxxx
add r4.x, r1.x, cb0[1].x  // r4.x <- lerpedEyeRot._m00
add r4.y, r1.y, cb0[2].x  // r4.y <- lerpedEyeRot._m01
add r4.z, r1.z, cb0[3].x  // r4.z <- lerpedEyeRot._m02
add r4.w, r1.w, cb0[4].x  // r4.w <- lerpedEyeRot._m03
add r1.x, r3.x, cb0[1].y  // r1.x <- lerpedEyeRot._m10
add r1.y, r3.y, cb0[2].y  // r1.y <- lerpedEyeRot._m11
add r1.z, r3.z, cb0[3].y  // r1.z <- lerpedEyeRot._m12
add r1.w, r3.w, cb0[4].y  // r1.w <- lerpedEyeRot._m13
add r0.xyzw, r0.xyzw, r2.xyzw  // r0.x <- lerpedEyeRot._m20; r0.y <- lerpedEyeRot._m21; r0.z <- lerpedEyeRot._m22; r0.w <- lerpedEyeRot._m23
nop 
mov r2.xy, v3.xyxx
mov r4.xyzw, r4.xyzw
mov r1.xyzw, r1.xyzw
mov r0.xyzw, r0.xyzw

#line 10
itof r2.zw, l(0, 0, 1, 1)
dp4 r3.x, r4.xyzw, r2.xyzw  // r3.x <- transformed.x
dp4 r3.y, r1.xyzw, r2.xyzw  // r3.y <- transformed.y
dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- transformed.z
div r2.xy, r3.xyxx, r2.xxxx  // r2.x <- flattened.x; r2.y <- flattened.y
mul r2.xy, r2.xyxx, cb0[0].xyxx
add r2.xy, r2.xyxx, cb0[0].zwzz  // r2.x <- <TimewarpTexCoord return value>.x; r2.y <- <TimewarpTexCoord return value>.y

#line 25
mov o1.xy, r2.xyxx
nop 
mov r2.xy, v4.xyxx

#line 10
itof r2.zw, l(0, 0, 1, 1)
dp4 r3.z, r4.xyzw, r2.xyzw  // r3.z <- transformed.x
dp4 r3.w, r1.xyzw, r2.xyzw  // r3.w <- transformed.y
dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- transformed.z
div r2.xy, r3.zwzz, r2.xxxx  // r2.x <- flattened.x; r2.y <- flattened.y
mul r2.xy, r2.xyxx, cb0[0].xyxx
add r2.xy, r2.xyxx, cb0[0].zwzz  // r2.x <- <TimewarpTexCoord return value>.x; r2.y <- <TimewarpTexCoord return value>.y

#line 26
mov o1.zw, r2.xxxy
nop 
mov r2.xy, v5.xyxx

#line 10
itof r2.zw, l(0, 0, 1, 1)
dp4 r3.x, r4.xyzw, r2.xyzw  // r3.x <- transformed.x
dp4 r3.y, r1.xyzw, r2.xyzw  // r3.y <- transformed.y
dp4 r0.x, r0.xyzw, r2.xyzw  // r0.x <- transformed.z
div r0.xy, r3.xyxx, r0.xxxx  // r0.x <- flattened.x; r0.y <- flattened.y
mul r0.xy, r0.xyxx, cb0[0].xyxx
add r0.xy, r0.xyxx, cb0[0].zwzz  // r0.x <- <TimewarpTexCoord return value>.x; r0.y <- <TimewarpTexCoord return value>.y

#line 27
mov o2.xy, r0.xyxx
mov o0.xy, v0.xyxx
mov o0.zw, l(0,0,0.500000,1.000000)
mov o2.z, v2.x
ret 
// Approximately 70 instruction slots used
