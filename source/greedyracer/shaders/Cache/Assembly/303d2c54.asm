//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   float4x4 g_mView;                  // Offset:    0 Size:    64 [unused]
//   float4x4 g_mViewInv;               // Offset:   64 Size:    64 [unused]
//   float4x4 g_mProjection;            // Offset:  128 Size:    64 [unused]
//   float4x4 g_mProjectionInv;         // Offset:  192 Size:    64
//   float4x4 g_mProjectionInvViewport; // Offset:  256 Size:    64 [unused]
//   float4 g_f4AmbientColorUp;         // Offset:  320 Size:    16
//   float4 g_f4AmbientColorDown;       // Offset:  336 Size:    16
//   float3 g_f3CameraPos;              // Offset:  352 Size:    12
//   float g_fAlphaTest;                // Offset:  364 Size:     4 [unused]
//   uint g_uNumLights;                 // Offset:  368 Size:     4 [unused]
//   uint g_uNumSpotLights;             // Offset:  372 Size:     4 [unused]
//   uint g_uWindowWidth;               // Offset:  376 Size:     4 [unused]
//   uint g_uWindowHeight;              // Offset:  380 Size:     4 [unused]
//   uint g_uMaxNumLightsPerTile;       // Offset:  384 Size:     4
//   uint g_uMaxNumElementsPerTile;     // Offset:  388 Size:     4
//   uint g_uNumTilesX;                 // Offset:  392 Size:     4
//   uint g_uNumTilesY;                 // Offset:  396 Size:     4 [unused]
//   uint g_uMaxVPLs;                   // Offset:  400 Size:     4 [unused]
//   uint g_uMaxNumVPLsPerTile;         // Offset:  404 Size:     4 [unused]
//   uint g_uMaxNumVPLElementsPerTile;  // Offset:  408 Size:     4 [unused]
//   float g_fVPLSpotStrength;          // Offset:  412 Size:     4 [unused]
//   float g_fVPLSpotRadius;            // Offset:  416 Size:     4 [unused]
//   float g_fVPLPointStrength;         // Offset:  420 Size:     4 [unused]
//   float g_fVPLPointRadius;           // Offset:  424 Size:     4 [unused]
//   float g_fVPLRemoveBackFaceContrib; // Offset:  428 Size:     4 [unused]
//   float g_fVPLColorThreshold;        // Offset:  432 Size:     4 [unused]
//   float g_fVPLBrightnessThreshold;   // Offset:  436 Size:     4 [unused]
//   float g_fPerFramePad1;             // Offset:  440 Size:     4 [unused]
//   float g_fPerFramePad2;             // Offset:  444 Size:     4 [unused]
//
// }
//
// cbuffer cbShadowConstants
// {
//
//   float4x4 g_mPointShadowViewProj[72];// Offset:    0 Size:  4608
//   float4x4 g_mSpotShadowViewProj[12];// Offset: 4608 Size:   768
//   float4 g_f4ShadowBias;             // Offset: 5376 Size:    16
//
// }
//
// cbuffer TexInfo
// {
//
//   float4 f4ColorAmbient;             // Offset:    0 Size:    16 [unused]
//   float fA;                          // Offset:   16 Size:     4 [unused]
//   float fH;                          // Offset:   20 Size:     4
//   float fBumpStrength;               // Offset:   24 Size:     4
//   float frTransparency;              // Offset:   28 Size:     4 [unused]
//   float4 f4ColorSSS;                 // Offset:   32 Size:    16
//   float4 f4SSSBRDFParams;            // Offset:   48 Size:    16
//   uint uImage;                       // Offset:   64 Size:     4 [unused]
//   uint uGlow;                        // Offset:   68 Size:     4
//   uint uSpecular;                    // Offset:   72 Size:     4
//   uint uBump;                        // Offset:   76 Size:     4
//   uint uImageBlack;                  // Offset:   80 Size:     4 [unused]
//   uint uGlowAsImage;                 // Offset:   84 Size:     4
//   uint uSpecularAsImage;             // Offset:   88 Size:     4
//   uint uHeightAsImage;               // Offset:   92 Size:     4 [unused]
//   uint uImageWhite;                  // Offset:   96 Size:     4 [unused]
//   uint uGlowWhite;                   // Offset:  100 Size:     4 [unused]
//   uint uSpecularWhite;               // Offset:  104 Size:     4
//   uint uHeight;                      // Offset:  108 Size:     4 [unused]
//   uint uShadingOn;                   // Offset:  112 Size:     4
//   uint uGlowAsAmbient;               // Offset:  116 Size:     4
//   uint uChromaKeying;                // Offset:  120 Size:     4 [unused]
//   uint uEnvironment;                 // Offset:  124 Size:     4
//   uint uPOM;                         // Offset:  128 Size:     4
//   uint uTexBRDF;                     // Offset:  132 Size:     4 [unused]
//   uint uTexSSS;                      // Offset:  136 Size:     4
//   uint uReflectionMap;               // Offset:  140 Size:     4
//   uint uixPos;                       // Offset:  144 Size:     4
//   uint uiyPos;                       // Offset:  148 Size:     4
//   uint uixPics;                      // Offset:  152 Size:     4
//   uint uiyPics;                      // Offset:  156 Size:     4
//   float fSpecularRoughness;          // Offset:  160 Size:     4
//   float fSpecularIOR;                // Offset:  164 Size:     4
//   uint uPad1;                        // Offset:  168 Size:     4 [unused]
//   uint uPad2;                        // Offset:  172 Size:     4 [unused]
//
// }
//
// cbuffer ViewportArt
// {
//
//   float4 f4ColorViewportOutline;     // Offset:    0 Size:    16
//   float4 f4FogParams;                // Offset:   16 Size:    16
//   float4x4 mColorModification;       // Offset:   32 Size:    64
//   uint uStyleColor;                  // Offset:   96 Size:     4
//   uint uStyleHalfTransparent;        // Offset:  100 Size:     4
//   uint uStylePopart;                 // Offset:  104 Size:     4 [unused]
//   uint uStyleOutlining;              // Offset:  108 Size:     4
//   uint uStyleMonochrome;             // Offset:  112 Size:     4 [unused]
//   uint uStyleOwn;                    // Offset:  116 Size:     4 [unused]
//   uint uStyleFog;                    // Offset:  120 Size:     4
//   uint uPad0;                        // Offset:  124 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_Sampler                         sampler      NA          NA    0        1
// g_ShadowSampler                 sampler_c      NA          NA    1        1
// g_pointLightCenterAndRadiusBuffer    texture  float4         buf    2        1
// g_pointLightColorBuffer           texture  float4         buf    3        1
// g_perTilePointLightIndexBuffer    texture    uint         buf    4        1
// g_spotLightCenterAndRadiusBuffer    texture  float4         buf    5        1
// g_spotLightColorBuffer            texture  float4         buf    6        1
// g_spotLightSpotParamsBuffer       texture  float4         buf    7        1
// g_perTileSpotLightIndexBuffer     texture    uint         buf    8        1
// g_PointShadowAtlas                texture  float4          2d   13        1
// g_SpotShadowAtlas                 texture  float4          2d   14        1
// tex2D[0]                          texture  float4          2d   15        1
// tex2D[1]                          texture  float4          2d   16        1
// tex2D[3]                          texture  float4          2d   18        1
// tex2D[4]                          texture  float4          2d   19        1
// tex2D[5]                          texture  float4          2d   20        1
// tex2D[6]                          texture  float4          2d   21        1
// cbPerFrame                        cbuffer      NA          NA    2        1
// cbShadowConstants                 cbuffer      NA          NA    3        1
// TexInfo                           cbuffer      NA          NA    5        1
// ViewportArt                       cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float   xyz 
// NORMAL                   0   xyz         1     NONE  float   xyz 
// TANGENT                  0   xyz         2     NONE  float   xyz 
// BITANGENT                0   xyz         3     NONE  float   xyz 
// TEXCOORD                 0   xy          4     NONE  float   xy  
// TEXCOORD                 1   xyz         5     NONE  float   xyz 
// TEXCOORD                 2   xyzw        6     NONE  float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TARGET                0   xyzw        0   TARGET  float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[25], immediateIndexed
dcl_constantbuffer cb3[337], dynamicIndexed
dcl_constantbuffer cb5[11], immediateIndexed
dcl_constantbuffer cb6[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_resource_buffer (float,float,float,float) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_resource_buffer (uint,uint,uint,uint) t4
dcl_resource_buffer (float,float,float,float) t5
dcl_resource_buffer (float,float,float,float) t6
dcl_resource_buffer (float,float,float,float) t7
dcl_resource_buffer (uint,uint,uint,uint) t8
dcl_resource_texture2d (float,float,float,float) t13
dcl_resource_texture2d (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t16
dcl_resource_texture2d (float,float,float,float) t18
dcl_resource_texture2d (float,float,float,float) t19
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyzw
dcl_output o0.xyzw
dcl_temps 25

#line 211 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
ult r0.x, l(1), cb5[9].y
ult r0.y, l(1), cb5[9].w
or r0.x, r0.y, r0.x
if_nz r0.x
  utof r0.x, cb5[9].x  // fxPic<0:[0f,4.29497e+009f]>
  utof r0.y, cb5[9].y  // fyPic<0:[0f,4.29497e+009f]>
  utof r0.z, cb5[9].z  // fxPics<0:[0f,4.29497e+009f]>
  utof r0.w, cb5[9].w  // fyPics<0:[0f,4.29497e+009f]>
  div r0.x, r0.x, r0.z
  div r0.z, l(1.000000), r0.z
  mul r0.z, r0.z, v4.x
  add r1.x, r0.z, r0.x  // input<13:NaN:Inf>
  div r0.x, r0.y, r0.w
  div r0.y, l(1.000000), r0.w
  mul r0.y, r0.y, v4.y
  add r1.y, r0.y, r0.x  // input<14:NaN:Inf>

#line 211
else 
  mov r1.xy, v4.xyxx  // input<13,14>
endif 

#line 221
div r0.xyz, v6.xyzx, v6.wwww  // f3VertexPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyz, r0.xyzx  // f3VertexPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r3.xyz, l(0,0,0,0)  // f3AccumDiffuse<0: -0f,1: -0f,2: -0f>

#line 226
mov r1.xy, r1.xyxx  // f2ParallaxTex<0:NaN:Inf,1:NaN:Inf>
dp3 r1.w, v1.xyzx, v1.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, v1.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r5.xyz, r4.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000)
mul r6.xyz, r4.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000)
mov r6.xyz, -r6.xyzx
add r5.xyz, r5.xyzx, r6.xyzx  // f3C1<0:NaN:Inf,1:NaN:Inf,2: 0f>
mul r6.xyz, r4.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
mul r7.xyz, r4.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
mov r7.xyz, -r7.xyzx
add r6.xyz, r6.xyzx, r7.xyzx  // f3C2<0:NaN:Inf,1: 0f,2:NaN:Inf>

#line 234
dp3 r1.w, r5.xyzx, r5.xyzx
sqrt r2.w, r1.w
dp3 r3.w, r6.xyzx, r6.xyzx
sqrt r4.w, r3.w
lt r2.w, r4.w, r2.w
if_nz r2.w
  rsq r1.w, r1.w
  mul r5.xyz, r1.wwww, r5.xyzx  // f3T<0:NaN:Inf,1:NaN:Inf,2: 0f>
else 

#line 240
  rsq r1.w, r3.w
  mul r5.xyz, r1.wwww, r6.xyzx  // f3T<0:NaN:Inf,1: 0f,2:NaN:Inf>

#line 234
endif 

#line 242
mul r6.xyz, r4.yzxy, r5.zxyz
mul r7.xyz, r4.zxyz, r5.yzxy
mov r7.xyz, -r7.xyzx
add r6.xyz, r6.xyzx, r7.xyzx
mov r6.xyz, -r6.xyzx
dp3 r1.w, r6.xyzx, r6.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, r6.xyzx  // f3B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 246
ieq r1.w, cb5[8].x, l(1)
if_nz r1.w
  mov r7.xyz, -v6.xyzx
  add r7.xyz, r7.xyzx, v5.xyzx
  dp3 r1.w, r7.xyzx, r7.xyzx
  rsq r1.w, r1.w
  mul r7.xyz, r1.wwww, r7.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r7.xyz, -r7.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 252
  dp3 r8.x, r7.xyzx, r5.xyzx  // f3ViewDirTS<0:NaN:Inf>
  dp3 r8.y, r7.xyzx, r6.xyzx  // f3ViewDirTS<1:NaN:Inf>
  dp3 r1.w, r7.xyzx, r4.xyzx  // f3ViewDirTS<2:NaN:Inf>
  mov r8.xy, -r8.xyxx
  mul r8.xy, r8.xyxx, l(0.020000, 0.020000, 0.000000, 0.000000)
  div r8.xy, r8.xyxx, r1.wwww  // f2MaxParallaxOffset<0:NaN:Inf,1:NaN:Inf>
  dp3 r1.w, r7.xyzx, r4.xyzx
  mul r1.w, r1.w, l(-15.000000)
  add r1.w, r1.w, l(20.000000)
  ftoi r1.w, r1.w  // iSampleCount<0>
  itof r2.w, r1.w
  div r2.w, l(1.000000), r2.w  // fZStep<0:Inf>
  mul r7.xy, r2.wwww, r8.xyxx  // f2TexStep<0:NaN:Inf,1:NaN:Inf>
  deriv_rtx_coarse r7.zw, r1.xxxy  // f2Dx<0:NaN:Inf,1:NaN:Inf>
  deriv_rty_coarse r8.xy, r1.xyxx  // f2Dy<0:NaN:Inf,1:NaN:Inf>

#line 264
  mov r3.w, l(0)  // iSampleIdx<0: 0>
  mov r8.zw, l(0,0,0,0)  // f2CurTexOffset<0: -0f,1: -0f>

#line 268
  mov r2.w, -r2.w
  add r4.w, r2.w, l(1.000000)  // fCurRayZ<0:Inf>
  mov r5.w, l(1.000000)  // fPrevRayZ<0: 1f>

#line 276
  mov r9.xy, r8.zwzz  // f2CurTexOffset<0:NaN:Inf,1:NaN:Inf>
  mov r9.zw, r8.zzzw  // f2PrevTexOffset<0:NaN:Inf,1:NaN:Inf>
  mov r10.xy, r8.zwzz  // f2FinalTexOffset<0:NaN:Inf,1:NaN:Inf>
  mov r6.w, r3.w  // iSampleIdx<0>
  mov r10.z, r4.w  // fCurRayZ<0:NaN:Inf>
  mov r10.w, r5.w  // fPrevRayZ<0:NaN:Inf>
  mov r11.x, r3.w  // fPrevHeight<0:NaN:Inf>
  loop 
    iadd r11.y, r1.w, l(1)
    ilt r11.z, r6.w, r11.y
    breakc_z r11.z
    add r11.zw, r1.xxxy, r9.xxxy
    sample_d_indexable(texture2d)(float,float,float,float) r11.z, r11.zwzz, t20.yzxw, s0, r7.zwzz, r8.xyxx
    mov r11.z, r11.z  // fCurHeight<0:Inf>
    add r11.z, r11.z, r11.x
    mul r11.z, r11.z, l(0.500000)  // fCurHeight<0:NaN:Inf>
    lt r11.w, r10.z, r11.z
    if_nz r11.w
      mov r11.w, -r10.w
      add r12.x, r11.w, r11.x
      mov r12.y, -r11.z
      add r12.y, r11.x, r12.y
      add r12.y, r10.z, r12.y
      add r11.w, r11.w, r12.y
      div r11.w, r12.x, r11.w  // fT<0:NaN:Inf>
      mul r12.xy, r7.xyxx, r11.wwww
      add r10.xy, r9.zwzz, r12.xyxx  // f2FinalTexOffset<0:NaN:Inf,1:NaN:Inf>
      mov r6.w, r11.y  // iSampleIdx<0>
    else 

#line 289
      iadd r6.w, r6.w, l(1)  // iSampleIdx<0>
      mov r9.zw, r9.xxxy  // f2PrevTexOffset<0:NaN:Inf,1:NaN:Inf>
      mov r10.w, r10.z  // fPrevRayZ<0:NaN:Inf>
      mov r11.x, r11.z  // fPrevHeight<0:NaN:Inf>
      add r9.xy, r7.xyxx, r9.xyxx  // f2CurTexOffset<0:NaN:Inf,1:NaN:Inf>
      add r10.z, r2.w, r10.z  // fCurRayZ<0:NaN:Inf>

#line 280
    endif 

#line 276
  endloop 

#line 298
  add r1.xy, r1.xyxx, r10.xyxx  // f2ParallaxTex<0:NaN:Inf,1:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r1.w, r1.xyxx, t20.xzwy, s0  // fHeightX<0:Inf>

#line 303
  mul r7.xyz, r5.xyzx, r1.wwww
  mul r8.xyz, r6.xyzx, r1.wwww
  add r7.xyz, r7.xyzx, r8.xyzx
  add r7.xyz, r7.xyzx, v1.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
  dp3 r1.w, r7.xyzx, r7.xyzx
  rsq r1.w, r1.w
  mul r7.xyz, r1.wwww, r7.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>

#line 246
else 
  mov r7.xyz, v1.xyzx  // input<4,5,6>
endif 

#line 309
ieq r1.w, cb5[8].x, l(2)
if_nz r1.w

#line 314
  mov r8.xyz, -v6.xyzx
  add r8.xyz, r8.xyzx, v5.xyzx
  dp3 r1.w, r8.xyzx, r8.xyzx
  rsq r1.w, r1.w
  mul r8.xyz, r1.wwww, r8.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 318
  dp3 r9.x, r8.xyzx, r5.xyzx  // f3ViewDirTS<0:NaN:Inf>
  dp3 r9.y, r8.xyzx, v3.xyzx  // f3ViewDirTS<1:NaN:Inf>
  dp3 r9.z, r8.xyzx, r4.xyzx  // f3ViewDirTS<2:NaN:Inf>
  dp3 r1.w, r9.xyzx, r9.xyzx
  rsq r1.w, r1.w
  mul r4.xyz, r1.wwww, r9.xyzx  // f3RayDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  div r4.xyz, r4.xyzx, r4.zzzz  // f3RayDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 324
  mov r8.xy, r1.xyxx  // f3Pos<0:NaN:Inf,1:NaN:Inf>
  mov r8.z, l(0)  // f3Pos<2: 0f>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  add r1.w, r9.y, l(-0.000000)
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r9.xy, r8.xyxx, t20.zwxy, s0
  mov r9.xy, r9.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r9.x, r9.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r9.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r9.x
  add r2.w, r9.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r9.xyz, r1.wwww, r4.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r8.xyxx, t20.zwxy, s0  // f4Tex<2:Inf,3:Inf,0:Inf,1:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r1.w, -r8.z
  add r1.w, r1.w, r8.y
  max r1.w, r1.w, l(0.000000)
  min r1.w, r1.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r1.w, r1.w, r8.x
  add r2.w, r8.x, l(1.000000)
  div r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r1.w, r1.w, r4.z
  add r1.w, r1.w, r8.z  // f3Pos<2:NaN:Inf>

#line 336
  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r1.z, l(0)
  add r8.xyz, r1.xyzx, r4.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 341
  sample_indexable(texture2d)(float,float,float,float) r1.z, r8.xyxx, t20.xywz, s0
  mov r1.z, r1.z  // f4Tex<3:Inf>
  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  lt r1.z, r8.z, r1.z
  if_nz r1.z
    add r9.xyz, r4.xyzx, r8.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 347
    mov r10.xyz, -r4.xyzx
    add r9.xyz, r8.xyzx, r10.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 344
  endif 

#line 341
  sample_indexable(texture2d)(float,float,float,float) r1.z, r9.xyxx, t20.xywz, s0
  mov r1.z, r1.z  // f4Tex<3:Inf>
  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  lt r1.z, r9.z, r1.z
  if_nz r1.z
    add r8.xyz, r4.xyzx, r9.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 347
    mov r10.xyz, -r4.xyzx
    add r8.xyz, r9.xyzx, r10.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 344
  endif 

#line 341
  sample_indexable(texture2d)(float,float,float,float) r1.z, r8.xyxx, t20.xywz, s0
  mov r1.z, r1.z  // f4Tex<3:Inf>
  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  lt r1.z, r8.z, r1.z
  if_nz r1.z
    add r9.xyz, r4.xyzx, r8.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 347
    mov r10.xyz, -r4.xyzx
    add r9.xyz, r8.xyzx, r10.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 344
  endif 

#line 341
  sample_indexable(texture2d)(float,float,float,float) r1.z, r9.xyxx, t20.xywz, s0
  mov r1.z, r1.z  // f4Tex<3:Inf>
  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  lt r1.z, r9.z, r1.z
  if_nz r1.z
    add r8.xyz, r4.xyzx, r9.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 347
    mov r10.xyz, -r4.xyzx
    add r8.xyz, r9.xyzx, r10.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 344
  endif 

#line 341
  sample_indexable(texture2d)(float,float,float,float) r1.z, r8.xyxx, t20.xywz, s0
  mov r1.z, r1.z  // f4Tex<3:Inf>
  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  lt r1.z, r8.z, r1.z
  if_nz r1.z
    add r9.xyz, r4.xyzx, r8.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 347
    mov r10.xyz, -r4.xyzx
    add r9.xyz, r8.xyzx, r10.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 344
  endif 

#line 341
  sample_indexable(texture2d)(float,float,float,float) r1.z, r9.xyxx, t20.xywz, s0  // f4Tex<0:Inf,1:Inf,3:Inf,2:Inf>
  mul r4.xy, r4.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf>
  lt r1.z, r9.z, r1.z
  if_nz r1.z
    add r1.xy, r4.xyxx, r9.xyxx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf>
  else 

#line 347
    mov r1.zw, -r4.xxxy
    add r1.xy, r1.zwzz, r9.xyxx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf>

#line 344
  endif 

#line 350
  mov r1.xy, r1.xyxx  // f2ParallaxTex<0:NaN:Inf,1:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r1.z, r1.xyxx, t20.xywz, s0  // fHeightX<0:Inf>

#line 355
  mul r4.xyz, r5.xyzx, r1.zzzz
  mul r5.xyz, r6.xyzx, r1.zzzz
  add r4.xyz, r4.xyzx, r5.xyzx
  add r4.xyz, r4.xyzx, r7.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
  dp3 r1.z, r4.xyzx, r4.xyzx
  rsq r1.z, r1.z
  mul r7.xyz, r1.zzzz, r4.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>

#line 309
endif 

#line 361
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyxx, t15.wxyz, s0  // f4DiffTex<3:Inf,0:Inf,1:Inf,2:Inf>

#line 367
mov r4.x, r4.x  // fSpecMasc<0:Inf>

#line 372
ine r1.z, l(0, 0, 0, 0), cb5[4].w
if_nz r1.z
  sample_indexable(texture2d)(float,float,float,float) r1.zw, r1.xyxx, t18.zwxy, s0
  mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
  add r1.zw, r1.zzzw, l(0.000000, 0.000000, -1.000000, -1.000000)  // f3BumpNormal<0:Inf,1:Inf>
  mul r1.zw, r1.zzzw, cb5[1].zzzz  // f3BumpNormal<0:NaN:Inf,1:NaN:Inf>
  mul r5.xyz, r1.zzzz, v2.xyzx
  mov r1.z, -r1.w
  mul r6.xyz, r1.zzzz, v3.xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  add r5.xyz, r5.xyzx, r7.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
  dp3 r1.z, r5.xyzx, r5.xyzx
  rsq r1.z, r1.z
  mul r7.xyz, r1.zzzz, r5.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>

#line 372
endif 

#line 379
mov r7.xyz, r7.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.xyz, -r2.xyzx
add r5.xyz, r5.xyzx, cb2[22].xyzx
dp3 r1.z, r5.xyzx, r5.xyzx
rsq r1.z, r1.z
mul r5.xyz, r1.zzzz, r5.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 385
ine r1.z, l(0, 0, 0, 0), cb5[4].z
if_nz r1.z
  mov r6.xyz, r4.yzwy  // f4SpecMapCol<0:Inf,1:Inf,2:Inf>
else 
  mov r6.xyz, l(0,0,0,0)  // f4SpecMapCol<0: 0f,1: 0f,2: 0f>
endif 

#line 391
mul r1.z, r7.y, l(0.500000)
add r1.z, r1.z, l(0.500000)  // fAmbientBlend<0:NaN:Inf>
mul r8.xyz, r1.zzzz, cb2[20].xyzx
mov r1.z, -r1.z
add r1.z, r1.z, l(1.000000)
mul r9.xyz, r1.zzzz, cb2[21].xyzx
add r8.xyz, r8.xyzx, r9.xyzx  // f3Ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 398
nop 
mov r1.z, cb2[24].x  // uMaxNumLightsPerTile<0>
mov r1.w, cb2[24].y  // uMaxNumElementsPerTile<0>
mov r9.xyz, v0.xyzx  // SVPosition<0,1,2>

#line 119 "constant.h"
nop 
mov r9.xy, r9.xyxx  // ScreenPos<0,1>

#line 109
div r2.w, r9.x, l(32.000000)
round_ni r2.w, r2.w
div r3.w, r9.y, l(32.000000)
round_ni r3.w, r3.w
utof r5.w, cb2[24].z
mul r3.w, r3.w, r5.w
add r2.w, r2.w, r3.w
ftou r2.w, r2.w  // nTileIdx<0>
mov r2.w, r2.w  // GetTileIndex<0>

#line 119
mov r2.w, r2.w  // nTileIndex<0>
imul null, r3.w, r1.w, r2.w  // nStartIndex<0>

#line 123
ld_indexable(buffer)(uint,uint,uint,uint) r5.w, r3.wwww, t4.yzwx
mov r5.w, r5.w  // uHalfZBitsHigh<0>
imad r6.w, r1.w, r2.w, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r7.w, r6.wwww, t4.yzwx
mov r7.w, r7.w  // uHalfZBitsLow<0>
ishl r5.w, r5.w, l(16)
or r5.w, r7.w, r5.w  // uHalfZBits<0>
mov r5.w, r5.w  // fHalfZ<0:NaN:Inf>
nop 
mov r9.z, r9.z  // z<0>

#line 102
mul r7.w, r9.z, cb2[15].z
add r7.w, r7.w, cb2[15].w
div r7.w, l(1.000000), r7.w  // z<0:Inf>
mov r7.w, r7.w  // ConvertProjDepthToView<0:Inf>

#line 128
mov r7.w, r7.w  // fViewPosZ<0:Inf>
lt r5.w, r7.w, r5.w
imad r8.w, r1.w, r2.w, l(4)
iadd r1.z, r8.w, r1.z
movc r9.x, r5.w, r8.w, r1.z  // uFirstLightIndex<0>
imad r9.y, r1.w, r2.w, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r9.z, r9.yyyy, t4.yzxw
imad r1.w, r1.w, r2.w, l(3)
ld_indexable(buffer)(uint,uint,uint,uint) r2.w, r1.wwww, t4.yzwx
movc r2.w, r5.w, r9.z, r2.w  // uNumLights<0>

#line 398 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
mov r9.x, r9.x  // uStartIndex<0>
mov r2.w, r2.w  // uLightCount<0>

#line 402
mov r9.x, r9.x  // i<0>

#line 424
sample_indexable(texture2d)(float,float,float,float) r10.xyz, r1.xyxx, t21.xyzw, s0

#line 402
mov r11.xyz, r3.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r12.xyz, r3.xyzx  // f3AccumSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r5.w, r9.x  // i<0>
loop 
  iadd r9.z, r9.x, r2.w
  ult r9.z, r5.w, r9.z
  breakc_z r9.z
  ld_indexable(buffer)(uint,uint,uint,uint) r9.z, r5.wwww, t4.yzxw  // uLightIndex<0>

#line 409
  nop 
  mov r9.w, r9.z  // uLightIndex<0>
  mov r13.xyz, r2.xyzx  // f3Position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r14.xyz, r7.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r15.xyz, r5.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r16.xyz, r4.yzwy  // f4SpecMapCol<0:Inf,1:Inf,2:Inf>

#line 186 "lightingconstants.h"
  ld_indexable(buffer)(float,float,float,float) r17.xyzw, r9.wwww, t2.wxyz  // f4CenterAndRadius<3:Inf,0:Inf,1:Inf,2:Inf>
  mov r13.xyz, -r13.xyzx
  add r13.xyz, r13.xyzx, r17.yzwy  // f3ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r10.w, r13.xyzx, r13.xyzx
  rsq r11.w, r10.w
  mul r17.yzw, r11.wwww, r13.xxyz  // f3LightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sqrt r10.w, r10.w  // fLightDistance<0:NaN:Inf>

#line 195
  mov r17.x, r17.x  // fRad<0:Inf>
  lt r11.w, r10.w, r17.x
  if_nz r11.w
    div r11.w, r10.w, r17.x  // fx<0:NaN:Inf>

#line 204
    mul r12.w, r11.w, r11.w
    mul r12.w, r12.w, r12.w
    mul r12.w, r12.w, l(1.000000)
    mov r12.w, -r12.w
    add r12.w, r12.w, l(1.000000)
    mul r12.w, r12.w, r12.w
    mul r12.w, r12.w, l(1.000000)
    max r12.w, r12.w, l(0.000000)
    min r12.w, r12.w, l(1.000000)
    mul r12.w, r12.w, r17.x
    mul r10.w, r10.w, r10.w
    add r10.w, r10.w, l(1.000000)
    div r10.w, r12.w, r10.w  // fFallOff<0:NaN:Inf>
    ld_indexable(buffer)(float,float,float,float) r18.xyz, r9.wwww, t3.xyzw
    dp3 r12.w, r17.yzwy, r14.xyzx
    max r12.w, r12.w, l(0.000000)
    min r12.w, r12.w, l(1.000000)
    mul r19.xyz, r12.wwww, r18.xyzx
    mul r19.xyz, r10.wwww, r19.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r19.xyz, r19.xyzx, cb5[1].yyyy  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 210
    nop 
    mov r20.xyz, r14.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r15.xyz, r15.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.xyz, r13.xyzx  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r12.w, cb5[10].x  // fRoughness<0>
    mov r13.w, cb5[10].y  // fF0<0>

#line 8 "ggxlighting.h"
    dp3 r14.w, r20.xyzx, r20.xyzx
    rsq r14.w, r14.w
    mul r20.xyz, r14.wwww, r20.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r12.w, r12.w, r12.w  // fAlpha<0:Inf:[0f,1.#INFf]>
    add r21.xyz, r13.xyzx, r15.xyzx
    dp3 r14.w, r21.xyzx, r21.xyzx
    rsq r14.w, r14.w
    mul r21.xyz, r14.wwww, r21.xyzx  // f3H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r14.w, r20.xyzx, r13.xyzx
    max r14.w, r14.w, l(0.000000)
    min r14.w, r14.w, l(1.000000)  // fDotNL<0:[0f,1f]>
    dp3 r15.x, r20.xyzx, r15.xyzx
    max r15.x, r15.x, l(0.000000)
    min r15.x, r15.x, l(1.000000)  // fDotNV<0:[0f,1f]>
    dp3 r15.y, r20.xyzx, r21.xyzx
    max r15.y, r15.y, l(0.000000)
    min r15.y, r15.y, l(1.000000)  // fDotNH<0:[0f,1f]>
    dp3 r13.x, r13.xyzx, r21.xyzx
    max r13.x, r13.x, l(0.000000)
    min r13.x, r13.x, l(1.000000)  // fDotLH<0:[0f,1f]>

#line 21
    mul r13.y, r12.w, r12.w  // fAlphaSqr<0:NaN:Inf>
    mul r13.z, r15.y, r15.y
    add r15.y, r13.y, l(-1.000000)
    mul r13.z, r13.z, r15.y
    add r13.z, r13.z, l(1.000000)  // fDenom<0:NaN:Inf>
    mul r15.y, r13.z, l(3.141590)
    mul r13.z, r13.z, r15.y
    div r13.y, r13.y, r13.z  // fD<0:NaN:Inf>

#line 27
    mov r13.x, -r13.x
    add r13.x, r13.x, l(1.000000)
    mul r13.z, r13.x, l(1.000000)
    mul r13.x, r13.x, r13.x
    mul r13.x, r13.x, r13.x
    mul r13.x, r13.x, r13.z  // fDotLH5<0:[0f,1f]>
    mov r13.z, -r13.w
    add r13.z, r13.z, l(1.000000)
    mul r13.x, r13.x, r13.z
    add r13.x, r13.x, r13.w  // fF<0:Inf>

#line 31
    div r12.w, r12.w, l(2.000000)  // fK<0:Inf:[0f,1.#INFf]>
    nop 
    mov r14.w, r14.w  // fDotNV<0:[0f,1f]>
    mov r12.w, r12.w  // fK<0:Inf:[0f,1.#INFf]>

#line 3
    mov r13.z, -r12.w
    add r13.z, r13.z, l(1.000000)
    mul r13.w, r13.z, r14.w
    add r13.w, r12.w, r13.w
    div r13.w, l(1.000000), r13.w  // G1V<0:NaN:Inf>

#line 32
    nop 
    mov r15.x, r15.x  // fDotNV<0:[0f,1f]>

#line 3
    mul r13.z, r13.z, r15.x
    add r12.w, r12.w, r13.z
    div r12.w, l(1.000000), r12.w  // G1V<0:NaN:Inf>

#line 32
    mul r12.w, r12.w, r13.w  // fVis<0:NaN:Inf>
    mul r13.y, r13.y, r14.w
    mul r13.x, r13.x, r13.y
    mul r12.w, r12.w, r13.x  // fSpecular<0:NaN:Inf>
    mov r12.w, r12.w  // fLightingFuncGGX<0:NaN:Inf>

#line 210 "lightingconstants.h"
    mov r12.w, r12.w  // fSpecMul<0:NaN:Inf>
    mul r13.xyz, r12.wwww, r18.xyzx
    mul r13.xyz, r10.wwww, r13.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 216
    ine r10.w, l(0, 0, 0, 0), cb5[6].z
    if_nz r10.w
      mul r15.xyz, r19.xyzx, r13.xyzx
      mul r15.xyz, r15.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 
      ine r10.w, l(0, 0, 0, 0), cb5[5].z
      if_nz r10.w
        mul r18.xyz, r16.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
        mul r20.xyz, r19.xyzx, r13.xyzx
        mul r15.xyz, r18.xyzx, r20.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      else 

#line 221
        mul r18.xyz, r16.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
        mul r13.xyz, r19.xyzx, r13.xyzx
        mul r15.xyz, r13.xyzx, r18.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 218
      endif 
    endif 

#line 225
    nop 
    mov r10.w, r9.w  // uShadowIndex<0>
    mov r17.yzw, r17.yyzw  // f3LightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 138
    mov r13.xyz, -r17.yzwy  // f3uv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r12.w, -r13.z  // f3uv<2:NaN:Inf>
    nop 
    mov r13.xy, r13.xyxx  // f3Vec<0:NaN:Inf,1:NaN:Inf>
    mov r12.w, r12.w  // f3Vec<2:NaN:Inf>

#line 21
    mov r13.x, r13.x  // fx<0:NaN:Inf>
    mov r13.y, r13.y  // fy<0:NaN:Inf>
    mov r12.w, r12.w  // fz<0:NaN:Inf>
    mov r13.z, -r13.x
    max r13.z, r13.z, r13.x
    mov r13.w, -r13.y
    max r13.w, r13.w, r13.y
    lt r14.w, r13.w, r13.z
    mov r15.w, -r12.w
    max r15.w, r12.w, r15.w
    lt r16.w, r15.w, r13.z
    and r14.w, r14.w, r16.w
    if_nz r14.w
      ge r13.x, r13.x, l(0.000000)
      if_nz r13.x
        mov r13.x, l(0)  // iFace<0: 0>
      else 

#line 32
        mov r13.x, l(1)  // iFace<0: 1>

#line 26
      endif 
    else 

#line 35
      lt r13.z, r13.z, r13.w
      lt r13.w, r15.w, r13.w
      and r13.z, r13.w, r13.z
      if_nz r13.z
        ge r13.y, r13.y, l(0.000000)
        if_nz r13.y
          mov r13.x, l(2)  // iFace<0: 2>
        else 

#line 43
          mov r13.x, l(3)  // iFace<0: 3>

#line 37
        endif 
      else 

#line 48
        ge r12.w, r12.w, l(0.000000)
        if_nz r12.w
          mov r13.x, l(4)  // iFace<0: 4>
        else 

#line 54
          mov r13.x, l(5)  // iFace<0: 5>

#line 48
        endif 

#line 35
      endif 

#line 24
    endif 

#line 57
    mov r13.x, r13.x  // Vector3ToFace<0:[0,5]>

#line 141
    mov r12.w, r13.x  // iFace<0:[0,5]>
    imul null, r13.x, r13.x, l(4)
    imad r9.z, r9.z, l(24), r13.x
    mov r0.w, l(1.000000)
    dp4 r13.x, r0.xyzw, cb3[r9.z + 0].xyzw  // f4ShadowTexCoord<0:NaN:Inf>
    dp4 r13.y, r0.xyzw, cb3[r9.z + 1].xyzw  // f4ShadowTexCoord<1:NaN:Inf>
    dp4 r13.z, r0.xyzw, cb3[r9.z + 2].xyzw  // f4ShadowTexCoord<2:NaN:Inf>
    dp4 r0.w, r0.xyzw, cb3[r9.z + 3].xyzw  // f4ShadowTexCoord<3:NaN:Inf>
    div r13.xyz, r13.xyzx, r0.wwww  // f4ShadowTexCoord<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    div r0.w, r13.x, l(2.000000)
    add r0.w, r0.w, l(0.500000)  // f4ShadowTexCoord<0:NaN:Inf>
    div r9.z, r13.y, l(-2.000000)
    add r9.z, r9.z, l(0.500000)  // f4ShadowTexCoord<1:NaN:Inf>
    itof r12.w, r12.w
    add r0.w, r0.w, r12.w  // f4ShadowTexCoord<0:NaN:Inf>
    mul r13.x, r0.w, l(0.166667)  // f4ShadowTexCoord<0:NaN:Inf>

#line 152
    utof r0.w, r10.w
    add r0.w, r0.w, r9.z  // f4ShadowTexCoord<1:NaN:Inf>
    mul r13.y, r0.w, l(0.083333)  // f4ShadowTexCoord<1:NaN:Inf>
    mul r0.w, r11.w, l(5.000000)
    max r0.w, r0.w, l(0.000000)
    min r0.w, r0.w, l(1.000000)
    mul r0.w, r0.w, l(-9.900000)
    add r0.w, r0.w, l(10.000000)
    mul r0.w, r0.w, cb3[336].w
    mov r0.w, -r0.w
    add r0.w, r0.w, r13.z  // f4ShadowTexCoord<2:NaN:Inf>
    nop 
    mov r13.x, r13.x  // f3uv<0:NaN:Inf>
    mov r13.y, r13.y  // f3uv<1:NaN:Inf>
    mov r0.w, r0.w  // f3uv<2:NaN:Inf>

#line 84
    sample_c_lz_indexable(-3,-3,0)(texture2d)(float,float,float,float) r9.z, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, l(0.000000)  // fShadow<0:[0f,1f]>
    sample_c_lz_indexable(-3,-2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,2f]>
    sample_c_lz_indexable(-3,-1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,3f]>
    sample_c_lz_indexable(-3,0,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,4f]>
    sample_c_lz_indexable(-3,1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,5f]>
    sample_c_lz_indexable(-3,2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,6f]>
    sample_c_lz_indexable(-3,3,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,7f]>
    sample_c_lz_indexable(-2,-3,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,8f]>
    sample_c_lz_indexable(-2,-2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,9f]>
    sample_c_lz_indexable(-2,-1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,10f]>
    sample_c_lz_indexable(-2,0,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,11f]>
    sample_c_lz_indexable(-2,1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,12f]>
    sample_c_lz_indexable(-2,2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,13f]>
    sample_c_lz_indexable(-2,3,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,14f]>
    sample_c_lz_indexable(-1,-3,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,15f]>
    sample_c_lz_indexable(-1,-2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,16f]>
    sample_c_lz_indexable(-1,-1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,17f]>
    sample_c_lz_indexable(-1,0,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,18f]>
    sample_c_lz_indexable(-1,1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,19f]>
    sample_c_lz_indexable(-1,2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,20f]>
    sample_c_lz_indexable(-1,3,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,21f]>
    sample_c_lz_indexable(0,-3,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,22f]>
    sample_c_lz_indexable(0,-2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,23f]>
    sample_c_lz_indexable(0,-1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,24f]>
    sample_c_lz_indexable(0,0,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,25f]>
    sample_c_lz_indexable(0,1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,26f]>
    sample_c_lz_indexable(0,2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,27f]>
    sample_c_lz_indexable(0,3,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,28f]>
    sample_c_lz_indexable(1,-3,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,29f]>
    sample_c_lz_indexable(1,-2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,30f]>
    sample_c_lz_indexable(1,-1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,31f]>
    sample_c_lz_indexable(1,0,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,32f]>
    sample_c_lz_indexable(1,1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,33f]>
    sample_c_lz_indexable(1,2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,34f]>
    sample_c_lz_indexable(1,3,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,35f]>
    sample_c_lz_indexable(2,-3,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,36f]>
    sample_c_lz_indexable(2,-2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,37f]>
    sample_c_lz_indexable(2,-1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,38f]>
    sample_c_lz_indexable(2,0,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,39f]>
    sample_c_lz_indexable(2,1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,40f]>
    sample_c_lz_indexable(2,2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,41f]>
    sample_c_lz_indexable(2,3,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,42f]>
    sample_c_lz_indexable(3,-3,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,43f]>
    sample_c_lz_indexable(3,-2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,44f]>
    sample_c_lz_indexable(3,-1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,45f]>
    sample_c_lz_indexable(3,0,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,46f]>
    sample_c_lz_indexable(3,1,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,47f]>
    sample_c_lz_indexable(3,2,0)(texture2d)(float,float,float,float) r10.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r9.z, r9.z, r10.w  // fShadow<0:[0f,48f]>
    sample_c_lz_indexable(3,3,0)(texture2d)(float,float,float,float) r0.w, r13.xyxx, t13.xxxx, s1, r0.w
    add r0.w, r0.w, r9.z  // fShadow<0:[0f,49f]>

#line 88
    div r0.w, r0.w, l(49.000000)  // fShadow<0:[0f,1f]>
    mov r0.w, r0.w  // FilterShadow<0:[0f,1f]>

#line 157
    mov r0.w, r0.w  // ApplyPointShadow<0:[0f,1f]>

#line 225
    mov r0.w, r0.w  // fShadowRes<0:[0f,1f]>
    mul r13.xyz, r0.wwww, r19.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r15.xyz, r0.wwww, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 230
    mul r13.xyz, r13.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r15.xyz, r15.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 196
  else 
    mov r13.xyz, l(0,0,0,0)  // f3LightColorDiffuseResult<0: 0f,1: 0f,2: 0f>
    mov r15.xyz, l(0,0,0,0)  // f3LightColorSpecularResult<0: 0f,1: 0f,2: 0f>
  endif 

#line 409 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
  mov r13.xyz, r13.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r15.xyz, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 417
  ine r0.w, l(0, 0, 0, 0), cb5[8].z
  if_nz r0.w
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r9.wwww, t2.xyzw  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
    ld_indexable(buffer)(float,float,float,float) r18.xyz, r9.wwww, t3.xyzw  // f3LightCol<0:Inf,1:Inf,2:Inf>

#line 424
    dp3 r0.w, r10.xyzx, r10.xyzx
    sqrt r0.w, r0.w  // fThickValue<0:NaN:Inf>
    nop 
    mov r17.xyz, r17.xyzx  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf>
    mov r18.xyz, r18.xyzx  // f3LightColor<0:Inf,1:Inf,2:Inf>
    mov r16.xyz, r16.xyzx  // float4TexColor<0:Inf,1:Inf,2:Inf>
    mov r0.w, r0.w  // fThickValue<0:NaN:Inf>
    mov r9.zw, cb5[3].xxxz  // f4SSSBRDFParams<0,2>
    mov r19.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r20.xyzw, v6.xyzw  // f4VertexPos<0,1,2,3>
    mov r21.xyz, v5.xyzx  // f3CamPos<0,1,2>
    mov r15.xyz, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.xyz, r13.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 155 "constant.h"
    mov r9.z, r9.z  // fMaterialThickness<0>
    mov r9.w, r9.w  // fRimScalar<0>
    mov r19.x, r19.x  // fExtinctionCoefficientRed<0>
    mov r19.y, r19.y  // fExtinctionCoefficientGreen<0>
    mov r19.z, r19.z  // fExtinctionCoefficientBlue<0>
    mov r15.xyz, r15.xyzx  // f3SpecColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r16.xyz, r16.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 168
    mov r22.xyz, -r20.xyzx
    add r21.xyz, r21.xyzx, r22.xyzx
    dp3 r10.w, r21.xyzx, r21.xyzx
    rsq r10.w, r10.w
    mul r21.xyz, r10.wwww, r21.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r22.xyz, -r21.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r17.xyz, r17.xyzx  // f4LightPos<0:Inf,1:Inf,2:Inf>
    mov r17.w, l(1.000000)  // f4LightPos<3: 1f>
    mov r20.xyzw, -r20.xyzw
    add r17.xyzw, r17.xyzw, r20.xyzw
    dp4 r10.w, r17.xyzw, r17.xyzw
    sqrt r10.w, r10.w
    div r10.w, l(1.000000), r10.w
    mul r10.w, r10.w, l(10.000000)  // fAttenuation<0:NaN:Inf>

#line 176
    nop 
    mov r22.xyz, r22.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r17.xyz, r14.xyzx  // f3Vec2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 138
    dp3 r11.w, r22.xyzx, r17.xyzx  // fProduct<0:NaN:Inf>
    mul r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r11.w, r11.w  // HalfLambert<0:NaN:Inf>

#line 176
    mul r20.xyz, r10.wwww, r11.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r23.xyz, -r14.xyzx
    dp3 r11.w, r23.xyzx, r22.xyzx
    max r11.w, r11.w, l(0.000000)
    mul r23.xyz, r9.zzzz, r11.wwww  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 138
    dp3 r11.w, r22.xyzx, r22.xyzx  // fProduct<0:NaN:Inf>
    mul r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r11.w, r11.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r11.w, r11.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r11.w, r9.z, r11.w
    add r23.xyz, r11.wwww, r23.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r23.xyz, r10.wwww, r23.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r24.x, r19.x, r23.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r24.y, r19.y, r23.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r24.z, r19.z, r23.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r19.xyz, r0.wwww, r24.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r0.w, r14.xyzx, r21.xyzx
    max r0.w, r0.w, l(0.000000)
    mov r11.w, -r0.w
    add r21.xyz, r11.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)  // f3Rim<0:Inf:[-1.#INFf,1f],1:Inf:[-1.#INFf,1f],2:Inf:[-1.#INFf,1f]>
    mul r21.xyz, r21.xyzx, r21.xyzx  // f3Rim<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r11.w, r14.xyzx, r22.xyzx
    max r11.w, r11.w, l(0.000000)
    mul r14.xyz, r15.xyzx, r11.wwww
    mul r14.xyz, r14.xyzx, r21.xyzx  // f3Rim<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 190
    mul r16.xyz, r16.xyzx, r20.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r16.xyz, r19.xyzx, r16.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r14.xyz, r9.wwww, r14.xyzx
    mul r14.xyz, r10.wwww, r14.xyzx
    mul r14.xyz, r14.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r14.xyz, r14.xyzx, r16.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 146
    add r16.xyz, r22.xyzx, r17.xyzx
    dp3 r9.w, r16.xyzx, r16.xyzx
    rsq r9.w, r9.w
    mul r16.xyz, r9.wwww, r16.xyzx  // f3HalfAngle<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r9.w, r17.xyzx, r16.xyzx
    max r9.w, r9.w, l(0.000000)
    min r9.w, r9.w, l(1.000000)
    mul r9.w, r9.w, l(1.000000)  // BlinnPhongSpec<0:[0f,1f]>

#line 195
    mul r9.w, r10.w, r9.w
    mul r16.xyz, r15.xyzx, r9.wwww
    mul r16.xyz, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r16.xyz, r16.xyzx, l(0.050000, 0.050000, 0.050000, 0.000000)
    add r14.xyz, r14.xyzx, r16.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r14.xyz, r18.xyzx, r14.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    lt r0.w, r0.w, l(0.800000)
    lt r9.z, l(2.000000), r9.z
    and r0.w, r0.w, r9.z
    if_nz r0.w
      div r16.xyz, r19.xyzx, l(15.000000, 15.000000, 15.000000, 0.000000)
      mul r13.xyz, r13.xyzx, r16.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      mul r15.xyz, r15.xyzx, r16.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    else 

#line 207
      mul r13.xyz, r13.xyzx, r14.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      mul r15.xyz, r14.xyzx, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    endif 

#line 426 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
    mov r15.xyz, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.xyz, r13.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 417
  endif 

#line 432
  add r11.xyz, r11.xyzx, r13.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  add r12.xyz, r12.xyzx, r15.xyzx  // f3AccumSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 402
  iadd r5.w, r5.w, l(1)  // i<0>
endloop 

#line 441
nop 

#line 119 "constant.h"
nop 

#line 123
ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r3.wwww, t8.xyzw
mov r0.x, r0.x  // uHalfZBitsHigh<0>
ld_indexable(buffer)(uint,uint,uint,uint) r0.y, r6.wwww, t8.yxzw
mov r0.y, r0.y  // uHalfZBitsLow<0>
ishl r0.x, r0.x, l(16)
or r0.x, r0.y, r0.x  // uHalfZBits<0>
mov r0.x, r0.x  // fHalfZ<0:NaN:Inf>
nop 
lt r0.x, r7.w, r0.x
movc r0.y, r0.x, r8.w, r1.z  // uFirstLightIndex<0>
ld_indexable(buffer)(uint,uint,uint,uint) r0.z, r9.yyyy, t8.yzxw
ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r1.wwww, t8.yzwx
movc r0.x, r0.x, r0.z, r0.w  // uNumLights<0>

#line 441 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
mov r0.y, r0.y  // uStartIndex<0>
mov r0.x, r0.x  // uLightCount<0>

#line 444
mov r0.y, r0.y  // i<0>
mov r3.xyz, r11.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r9.xyz, r12.xyzx  // f3AccumSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r0.z, r0.y  // i<0>
loop 
  iadd r0.w, r0.y, r0.x
  ult r0.w, r0.z, r0.w
  breakc_z r0.w
  ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r0.zzzz, t8.yzwx  // uLightIndex<0>

#line 451
  nop 
  mov r1.z, r0.w  // uLightIndex<0>
  mov r13.xyz, r2.xyzx  // f3Position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r14.xyz, r7.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r15.xyz, r5.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r16.xyz, r6.xyzx  // f4SpecMapCol<0:Inf,1:Inf,2:Inf>

#line 267 "lightingconstants.h"
  ld_indexable(buffer)(float,float,float,float) r17.xyzw, r1.zzzz, t5.xyzw  // f4BoundingSphereCenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
  ld_indexable(buffer)(float,float,float,float) r18.xyzw, r1.zzzz, t7.wxyz  // f4SpotParams<3:Inf,0:Inf,1:Inf,2:Inf>

#line 272
  mov r19.xy, r18.yzyy  // f3SpotLightDir<0:Inf,1:Inf>
  mul r1.w, r19.x, r19.x
  mov r1.w, -r1.w
  add r1.w, r1.w, l(1.000000)
  mul r2.w, r19.y, r19.y
  mov r2.w, -r2.w
  add r1.w, r1.w, r2.w
  sqrt r1.w, r1.w  // f3SpotLightDir<2:NaN>

#line 276
  lt r2.w, l(0.000000), r18.w
  mov r3.w, -r1.w
  movc r19.z, r2.w, r1.w, r3.w  // f3SpotLightDir<2:NaN>
  mul r20.xyz, r17.wwww, r19.xyzx
  mov r20.xyz, -r20.xyzx
  add r17.xyz, r17.xyzx, r20.xyzx  // f3LightPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r13.xyz, -r13.xyzx
  add r13.xyz, r13.xyzx, r17.xyzx  // f3ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r1.w, r13.xyzx, r13.xyzx
  rsq r3.w, r1.w
  mul r17.xyz, r3.wwww, r13.xyzx  // f3ToLightNormalized<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sqrt r1.w, r1.w  // fLightDistance<0:NaN:Inf>
  mov r20.xyz, -r17.xyzx
  dp3 r3.w, r20.xyzx, r19.xyzx  // fCosineOfCurrentAngle<0:NaN:Inf>

#line 288
  mov r18.x, r18.x  // fRad<0:Inf>
  mov r5.w, -r18.w
  movc r2.w, r2.w, r18.w, r5.w  // fCosineOfConeAngle<0:Inf>
  lt r5.w, r1.w, r18.x
  lt r6.w, r2.w, r3.w
  and r5.w, r5.w, r6.w
  if_nz r5.w
    mov r2.w, -r2.w
    add r2.w, r2.w, r3.w
    mov r3.w, -r3.w
    add r3.w, r3.w, l(1.000000)
    div r2.w, r2.w, r3.w  // fRadialAttenuation<0:NaN:Inf>
    mul r2.w, r2.w, r2.w
    max r2.w, r2.w, l(0.000000)
    min r2.w, r2.w, l(1.000000)  // fRadialAttenuation<0:[0f,1f]>
    div r3.w, r1.w, r18.x  // fx<0:NaN:Inf>

#line 303
    mul r3.w, r3.w, r3.w
    mul r3.w, r3.w, r3.w
    mul r3.w, r3.w, l(1.000000)
    mov r3.w, -r3.w
    add r3.w, r3.w, l(1.000000)
    mul r3.w, r3.w, r3.w
    mul r3.w, r3.w, l(1.000000)
    max r3.w, r3.w, l(0.000000)
    min r3.w, r3.w, l(1.000000)
    mul r3.w, r3.w, r18.x
    mul r1.w, r1.w, r1.w
    add r1.w, r1.w, l(1.000000)
    div r1.w, r3.w, r1.w  // fFallOff<0:NaN:Inf>
    ld_indexable(buffer)(float,float,float,float) r18.xyz, r1.zzzz, t6.xyzw
    dp3 r3.w, r17.xyzx, r14.xyzx
    max r3.w, r3.w, l(0.000000)
    min r3.w, r3.w, l(1.000000)
    mul r17.xyz, r3.wwww, r18.xyzx
    mul r17.xyz, r1.wwww, r17.xyzx
    mul r17.xyz, r2.wwww, r17.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r17.xyz, r17.xyzx, cb5[1].yyyy  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 310
    nop 
    mov r19.xyz, r14.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r15.xyz, -r15.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.xyz, r13.xyzx  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r3.w, cb5[10].x  // fRoughness<0>
    mov r5.w, cb5[10].y  // fF0<0>

#line 8 "ggxlighting.h"
    dp3 r6.w, r19.xyzx, r19.xyzx
    rsq r6.w, r6.w
    mul r19.xyz, r6.wwww, r19.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r3.w, r3.w, r3.w  // fAlpha<0:Inf:[0f,1.#INFf]>
    add r20.xyz, r13.xyzx, r15.xyzx
    dp3 r6.w, r20.xyzx, r20.xyzx
    rsq r6.w, r6.w
    mul r20.xyz, r6.wwww, r20.xyzx  // f3H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r6.w, r19.xyzx, r13.xyzx
    max r6.w, r6.w, l(0.000000)
    min r6.w, r6.w, l(1.000000)  // fDotNL<0:[0f,1f]>
    dp3 r7.w, r19.xyzx, r15.xyzx
    max r7.w, r7.w, l(0.000000)
    min r7.w, r7.w, l(1.000000)  // fDotNV<0:[0f,1f]>
    dp3 r8.w, r19.xyzx, r20.xyzx
    max r8.w, r8.w, l(0.000000)
    min r8.w, r8.w, l(1.000000)  // fDotNH<0:[0f,1f]>
    dp3 r9.w, r13.xyzx, r20.xyzx
    max r9.w, r9.w, l(0.000000)
    min r9.w, r9.w, l(1.000000)  // fDotLH<0:[0f,1f]>

#line 21
    mul r10.w, r3.w, r3.w  // fAlphaSqr<0:NaN:Inf>
    mul r8.w, r8.w, r8.w
    add r11.w, r10.w, l(-1.000000)
    mul r8.w, r8.w, r11.w
    add r8.w, r8.w, l(1.000000)  // fDenom<0:NaN:Inf>
    mul r11.w, r8.w, l(3.141590)
    mul r8.w, r8.w, r11.w
    div r8.w, r10.w, r8.w  // fD<0:NaN:Inf>

#line 27
    mov r9.w, -r9.w
    add r9.w, r9.w, l(1.000000)
    mul r10.w, r9.w, l(1.000000)
    mul r9.w, r9.w, r9.w
    mul r9.w, r9.w, r9.w
    mul r9.w, r9.w, r10.w  // fDotLH5<0:[0f,1f]>
    mov r10.w, -r5.w
    add r10.w, r10.w, l(1.000000)
    mul r9.w, r9.w, r10.w
    add r5.w, r5.w, r9.w  // fF<0:Inf>

#line 31
    div r3.w, r3.w, l(2.000000)  // fK<0:Inf:[0f,1.#INFf]>
    nop 
    mov r6.w, r6.w  // fDotNV<0:[0f,1f]>
    mov r3.w, r3.w  // fK<0:Inf:[0f,1.#INFf]>

#line 3
    mov r9.w, -r3.w
    add r9.w, r9.w, l(1.000000)
    mul r10.w, r6.w, r9.w
    add r10.w, r3.w, r10.w
    div r10.w, l(1.000000), r10.w  // G1V<0:NaN:Inf>

#line 32
    nop 
    mov r7.w, r7.w  // fDotNV<0:[0f,1f]>

#line 3
    mul r7.w, r9.w, r7.w
    add r3.w, r3.w, r7.w
    div r3.w, l(1.000000), r3.w  // G1V<0:NaN:Inf>

#line 32
    mul r3.w, r3.w, r10.w  // fVis<0:NaN:Inf>
    mul r6.w, r8.w, r6.w
    mul r5.w, r5.w, r6.w
    mul r3.w, r3.w, r5.w  // fSpecular<0:NaN:Inf>
    mov r3.w, r3.w  // fLightingFuncGGX<0:NaN:Inf>

#line 310 "lightingconstants.h"
    mov r3.w, r3.w  // fSpecMul<0:NaN:Inf>
    mul r13.xyz, r3.wwww, r18.xyzx
    mul r13.xyz, r1.wwww, r13.xyzx
    mul r13.xyz, r2.wwww, r13.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 317
    ine r1.w, l(0, 0, 0, 0), cb5[6].z
    if_nz r1.w
      mul r15.xyz, r17.xyzx, r13.xyzx
      mul r15.xyz, r15.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 
      ine r1.w, l(0, 0, 0, 0), cb5[5].z
      if_nz r1.w
        mul r18.xyz, r16.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
        mul r19.xyz, r17.xyzx, r13.xyzx
        mul r15.xyz, r18.xyzx, r19.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      else 

#line 322
        mul r16.xyz, r16.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
        mul r13.xyz, r17.xyzx, r13.xyzx
        mul r15.xyz, r13.xyzx, r16.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 319
      endif 
    endif 

#line 326
    nop 
    mov r1.w, r1.z  // uShadowIndex<0>

#line 162
    imul null, r0.w, r0.w, l(4)
    mov r13.xyz, r2.xyzx
    mov r13.w, l(1.000000)
    dp4 r16.x, r13.xyzw, cb3[r0.w + 288].xyzw  // f4ShadowTexCoord<0:NaN:Inf>
    dp4 r16.y, r13.xyzw, cb3[r0.w + 289].xyzw  // f4ShadowTexCoord<1:NaN:Inf>
    dp4 r16.z, r13.xyzw, cb3[r0.w + 290].xyzw  // f4ShadowTexCoord<2:NaN:Inf>
    dp4 r0.w, r13.xyzw, cb3[r0.w + 291].xyzw  // f4ShadowTexCoord<3:NaN:Inf>
    div r13.xyz, r16.xyzx, r0.wwww  // f4ShadowTexCoord<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    div r0.w, r13.x, l(2.000000)
    add r0.w, r0.w, l(0.500000)  // f4ShadowTexCoord<0:NaN:Inf>
    div r2.w, r13.y, l(-2.000000)
    add r13.y, r2.w, l(0.500000)  // f4ShadowTexCoord<1:NaN:Inf>
    utof r1.w, r1.w
    add r0.w, r0.w, r1.w  // f4ShadowTexCoord<0:NaN:Inf>
    mul r13.x, r0.w, l(0.083333)  // f4ShadowTexCoord<0:NaN:Inf>
    mul r0.w, cb3[336].w, l(6.000000)
    mov r0.w, -r0.w
    add r0.w, r0.w, r13.z  // f4ShadowTexCoord<2:NaN:Inf>

#line 173
    nop 
    mov r13.x, r13.x  // f3uv<0:NaN:Inf>
    mov r13.y, r13.y  // f3uv<1:NaN:Inf>
    mov r0.w, r0.w  // f3uv<2:NaN:Inf>

#line 84
    sample_c_lz_indexable(-3,-3,0)(texture2d)(float,float,float,float) r1.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, l(0.000000)  // fShadow<0:[0f,1f]>
    sample_c_lz_indexable(-3,-2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,2f]>
    sample_c_lz_indexable(-3,-1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,3f]>
    sample_c_lz_indexable(-3,0,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,4f]>
    sample_c_lz_indexable(-3,1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,5f]>
    sample_c_lz_indexable(-3,2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,6f]>
    sample_c_lz_indexable(-3,3,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,7f]>
    sample_c_lz_indexable(-2,-3,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,8f]>
    sample_c_lz_indexable(-2,-2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,9f]>
    sample_c_lz_indexable(-2,-1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,10f]>
    sample_c_lz_indexable(-2,0,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,11f]>
    sample_c_lz_indexable(-2,1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,12f]>
    sample_c_lz_indexable(-2,2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,13f]>
    sample_c_lz_indexable(-2,3,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,14f]>
    sample_c_lz_indexable(-1,-3,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,15f]>
    sample_c_lz_indexable(-1,-2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,16f]>
    sample_c_lz_indexable(-1,-1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,17f]>
    sample_c_lz_indexable(-1,0,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,18f]>
    sample_c_lz_indexable(-1,1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,19f]>
    sample_c_lz_indexable(-1,2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,20f]>
    sample_c_lz_indexable(-1,3,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,21f]>
    sample_c_lz_indexable(0,-3,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,22f]>
    sample_c_lz_indexable(0,-2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,23f]>
    sample_c_lz_indexable(0,-1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,24f]>
    sample_c_lz_indexable(0,0,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,25f]>
    sample_c_lz_indexable(0,1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,26f]>
    sample_c_lz_indexable(0,2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,27f]>
    sample_c_lz_indexable(0,3,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,28f]>
    sample_c_lz_indexable(1,-3,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,29f]>
    sample_c_lz_indexable(1,-2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,30f]>
    sample_c_lz_indexable(1,-1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,31f]>
    sample_c_lz_indexable(1,0,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,32f]>
    sample_c_lz_indexable(1,1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,33f]>
    sample_c_lz_indexable(1,2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,34f]>
    sample_c_lz_indexable(1,3,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,35f]>
    sample_c_lz_indexable(2,-3,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,36f]>
    sample_c_lz_indexable(2,-2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,37f]>
    sample_c_lz_indexable(2,-1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,38f]>
    sample_c_lz_indexable(2,0,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,39f]>
    sample_c_lz_indexable(2,1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,40f]>
    sample_c_lz_indexable(2,2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,41f]>
    sample_c_lz_indexable(2,3,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,42f]>
    sample_c_lz_indexable(3,-3,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,43f]>
    sample_c_lz_indexable(3,-2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,44f]>
    sample_c_lz_indexable(3,-1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,45f]>
    sample_c_lz_indexable(3,0,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,46f]>
    sample_c_lz_indexable(3,1,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,47f]>
    sample_c_lz_indexable(3,2,0)(texture2d)(float,float,float,float) r2.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r1.w, r1.w, r2.w  // fShadow<0:[0f,48f]>
    sample_c_lz_indexable(3,3,0)(texture2d)(float,float,float,float) r0.w, r13.xyxx, t14.xxxx, s1, r0.w
    add r0.w, r0.w, r1.w  // fShadow<0:[0f,49f]>

#line 88
    div r0.w, r0.w, l(49.000000)  // fShadow<0:[0f,1f]>
    mov r0.w, r0.w  // FilterShadow<0:[0f,1f]>

#line 173
    mov r0.w, r0.w  // ApplySpotShadow<0:[0f,1f]>

#line 326
    mov r0.w, r0.w  // fShadowRes<0:[0f,1f]>
    mul r13.xyz, r0.wwww, r17.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r15.xyz, r0.wwww, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 331
    mul r13.xyz, r13.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r15.xyz, r15.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 291
  else 
    mov r13.xyz, l(0,0,0,0)  // f3LightColorDiffuseResult<0: 0f,1: 0f,2: 0f>
    mov r15.xyz, l(0,0,0,0)  // f3LightColorSpecularResult<0: 0f,1: 0f,2: 0f>
  endif 

#line 451 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
  mov r13.xyz, r13.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r15.xyz, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 461
  ine r0.w, l(0, 0, 0, 0), cb5[8].z
  if_nz r0.w
    ld_indexable(buffer)(float,float,float,float) r16.xyz, r1.zzzz, t5.xyzw  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r1.zzzz, t6.xyzw  // f3LightCol<0:Inf,1:Inf,2:Inf>
    mov r18.xyz, r4.yzwy  // f4TexColor<0:Inf,1:Inf,2:Inf>
    dp3 r0.w, r10.xyzx, r10.xyzx
    sqrt r0.w, r0.w  // fThickValue<0:NaN:Inf>
    nop 
    mov r16.xyz, r16.xyzx  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf>
    mov r17.xyz, r17.xyzx  // f3LightColor<0:Inf,1:Inf,2:Inf>
    mov r18.xyz, r18.xyzx  // float4TexColor<0:Inf,1:Inf,2:Inf>
    mov r0.w, r0.w  // fThickValue<0:NaN:Inf>
    mov r1.zw, cb5[3].xxxz  // f4SSSBRDFParams<0,2>
    mov r19.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r20.xyzw, v6.xyzw  // f4VertexPos<0,1,2,3>
    mov r21.xyz, v5.xyzx  // f3CamPos<0,1,2>
    mov r15.xyz, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.xyz, r13.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 155 "constant.h"
    mov r1.z, r1.z  // fMaterialThickness<0>
    mov r1.w, r1.w  // fRimScalar<0>
    mov r19.x, r19.x  // fExtinctionCoefficientRed<0>
    mov r19.y, r19.y  // fExtinctionCoefficientGreen<0>
    mov r19.z, r19.z  // fExtinctionCoefficientBlue<0>
    mov r15.xyz, r15.xyzx  // f3SpecColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r18.xyz, r18.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 168
    mov r22.xyz, -r20.xyzx
    add r21.xyz, r21.xyzx, r22.xyzx
    dp3 r2.w, r21.xyzx, r21.xyzx
    rsq r2.w, r2.w
    mul r21.xyz, r2.wwww, r21.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r22.xyz, -r21.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r16.xyz, r16.xyzx  // f4LightPos<0:Inf,1:Inf,2:Inf>
    mov r16.w, l(1.000000)  // f4LightPos<3: 1f>
    mov r20.xyzw, -r20.xyzw
    add r16.xyzw, r16.xyzw, r20.xyzw
    dp4 r2.w, r16.xyzw, r16.xyzw
    sqrt r2.w, r2.w
    div r2.w, l(1.000000), r2.w
    mul r2.w, r2.w, l(10.000000)  // fAttenuation<0:NaN:Inf>

#line 176
    nop 
    mov r22.xyz, r22.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r16.xyz, r14.xyzx  // f3Vec2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 138
    dp3 r3.w, r22.xyzx, r16.xyzx  // fProduct<0:NaN:Inf>
    mul r3.w, r3.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r3.w, r3.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r3.w, r3.w  // HalfLambert<0:NaN:Inf>

#line 176
    mul r20.xyz, r2.wwww, r3.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r23.xyz, -r14.xyzx
    dp3 r3.w, r23.xyzx, r22.xyzx
    max r3.w, r3.w, l(0.000000)
    mul r23.xyz, r1.zzzz, r3.wwww  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 138
    dp3 r3.w, r22.xyzx, r22.xyzx  // fProduct<0:NaN:Inf>
    mul r3.w, r3.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r3.w, r3.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r3.w, r3.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r3.w, r1.z, r3.w
    add r23.xyz, r3.wwww, r23.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r23.xyz, r2.wwww, r23.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r24.x, r19.x, r23.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r24.y, r19.y, r23.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r24.z, r19.z, r23.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r19.xyz, r0.wwww, r24.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r0.w, r14.xyzx, r21.xyzx
    max r0.w, r0.w, l(0.000000)
    mov r3.w, -r0.w
    add r21.xyz, r3.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)  // f3Rim<0:Inf:[-1.#INFf,1f],1:Inf:[-1.#INFf,1f],2:Inf:[-1.#INFf,1f]>
    mul r21.xyz, r21.xyzx, r21.xyzx  // f3Rim<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r3.w, r14.xyzx, r22.xyzx
    max r3.w, r3.w, l(0.000000)
    mul r14.xyz, r15.xyzx, r3.wwww
    mul r14.xyz, r14.xyzx, r21.xyzx  // f3Rim<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 190
    mul r18.xyz, r18.xyzx, r20.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r18.xyz, r19.xyzx, r18.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r14.xyz, r1.wwww, r14.xyzx
    mul r14.xyz, r2.wwww, r14.xyzx
    mul r14.xyz, r14.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r14.xyz, r14.xyzx, r18.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 146
    add r18.xyz, r22.xyzx, r16.xyzx
    dp3 r1.w, r18.xyzx, r18.xyzx
    rsq r1.w, r1.w
    mul r18.xyz, r1.wwww, r18.xyzx  // f3HalfAngle<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r1.w, r16.xyzx, r18.xyzx
    max r1.w, r1.w, l(0.000000)
    min r1.w, r1.w, l(1.000000)
    mul r1.w, r1.w, l(1.000000)  // BlinnPhongSpec<0:[0f,1f]>

#line 195
    mul r1.w, r2.w, r1.w
    mul r16.xyz, r15.xyzx, r1.wwww
    mul r16.xyz, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r16.xyz, r16.xyzx, l(0.050000, 0.050000, 0.050000, 0.000000)
    add r14.xyz, r14.xyzx, r16.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r14.xyz, r17.xyzx, r14.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    lt r0.w, r0.w, l(0.800000)
    lt r1.z, l(2.000000), r1.z
    and r0.w, r0.w, r1.z
    if_nz r0.w
      div r16.xyz, r19.xyzx, l(15.000000, 15.000000, 15.000000, 0.000000)
      mul r13.xyz, r13.xyzx, r16.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      mul r15.xyz, r15.xyzx, r16.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    else 

#line 207
      mul r13.xyz, r13.xyzx, r14.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      mul r15.xyz, r14.xyzx, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    endif 

#line 470 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
    mov r15.xyz, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r13.xyz, r13.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 461
  endif 

#line 475
  add r3.xyz, r3.xyzx, r13.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  add r9.xyz, r9.xyzx, r15.xyzx  // f3AccumSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 444
  iadd r0.z, r0.z, l(1)  // i<0>
endloop 

#line 520
mul r0.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r2.xyz, r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)  // f3AccumSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 526
ine r0.w, l(0, 0, 0, 0), cb5[4].y
if_nz r0.w

#line 529
  ine r0.w, l(0, 0, 0, 0), cb5[7].y
  if_nz r0.w
    mov r3.xyz, r8.xyzx  // f4Glow<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 533
    ine r0.w, l(0, 0, 0, 0), cb5[5].y
    if_nz r0.w
      mov r5.xyz, -r8.xyzx
      add r5.xyz, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      max r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r5.xyz, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r3.xyz, r4.yzwy, r5.xyzx  // f4Glow<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 

#line 536
      sample_indexable(texture2d)(float,float,float,float) r5.xyz, r1.xyxx, t16.xyzw, s0
      mov r6.xyz, -r8.xyzx
      add r6.xyz, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      max r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r6.xyz, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r3.xyz, r5.xyzx, r6.xyzx  // f4Glow<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 533
    endif 

#line 529
  endif 

#line 526
else 

#line 540
  mov r3.xyz, l(0,0,0,0)  // f4Glow<0: 0f,1: 0f,2: 0f>

#line 526
endif 

#line 544
mul r3.xyz, r3.xyzx, l(0.750000, 0.750000, 0.750000, 0.000000)
add r0.xyz, r0.xyzx, r3.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
add r0.xyz, r8.xyzx, r0.xyzx  // f3DiffuseAndAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
ine r0.w, l(0, 0, 0, 0), cb5[7].x
if_nz r0.w
  mul r2.xyz, r4.xxxx, r2.xyzx
  add r0.xyz, r0.xyzx, r2.xyzx
  mul r4.yzw, r0.xxyz, r4.yyzw  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r4.x, l(1.000000)  // f4ColorOut<3: 1f>
else 

#line 553
  mov r4.x, l(1.000000)  // f4ColorOut<3: 1f>
  mov r4.yzw, r4.yyzw  // f4ColorOut<0:Inf,1:Inf,2:Inf>

#line 547
endif 

#line 561
ine r0.x, l(0, 0, 0, 0), cb5[7].w
if_nz r0.x
  mov r0.xyz, -v6.xyzx
  add r0.xyz, r0.xyzx, v5.xyzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r0.xyz, r0.wwww, r0.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r0.z, r0.xyzx, r7.xyzx
  add r0.w, r0.z, r0.z
  mov r0.w, -r0.w
  mul r1.zw, r0.wwww, r7.xxxy
  add r1.zw, r0.xxxy, r1.zzzw  // f3Reflection<0:NaN:Inf,1:NaN:Inf>
  mul r0.w, r0.z, r0.z
  mov r0.w, -r0.w
  add r0.w, r0.w, l(1.000000)
  mul r0.w, r0.w, l(0.980100)
  mov r0.w, -r0.w
  add r0.w, r0.w, l(1.000000)
  sqrt r2.x, r0.w
  mul r0.z, r0.z, l(0.990000)
  add r0.z, r2.x, r0.z
  ge r0.w, r0.w, l(0.000000)
  mul r0.xy, r0.xyxx, l(0.990000, 0.990000, 0.000000, 0.000000)
  mul r2.xy, r7.xyxx, r0.zzzz
  mov r2.xy, -r2.xyxx
  add r0.xy, r0.xyxx, r2.xyxx
  movc r0.xy, r0.wwww, r0.xyxx, l(0,0,0,0)  // f3Refraction<0:NaN:Inf,1:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t19.xyzw, s0  // f4RefrColor<0:Inf,1:Inf,2:Inf,3:Inf>
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.zwzz, t19.xyzw, s0  // f4ReflColor<0:Inf,1:Inf,2:Inf,3:Inf>
  ine r1.z, l(0, 0, 0, 0), cb5[8].w
  if_nz r1.z
    sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t19.wxyz, s0  // fReflectionFactor<0:Inf>

#line 572
    mov r3.xyzw, -r0.xyzw
    add r3.xyzw, r2.xyzw, r3.xyzw
    mul r3.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
    add r3.xyzw, r0.xyzw, r3.xyzw
    div r3.xyzw, r3.xyzw, cb5[2].wwww
    mul r1.xyzw, r1.xxxx, r3.xyzw
    dp3 r3.x, r4.yzwy, r4.yzwy
    sqrt r3.x, r3.x
    mul r3.x, r3.x, r3.x
    mul r1.xyzw, r1.xyzw, r3.xxxx
    add r4.xyzw, r1.wxyz, r4.xyzw  // f4ColorOut<3:NaN:Inf,0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 569
  else 

#line 576
    mov r1.xyzw, -r0.xyzw
    add r1.xyzw, r1.xyzw, r2.xyzw
    mul r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
    add r0.xyzw, r0.xyzw, r1.xyzw
    div r0.xyzw, r0.xyzw, cb5[2].wwww
    dp3 r1.x, r4.yzwy, r4.yzwy
    sqrt r1.x, r1.x
    mul r1.x, r1.x, r1.x
    mul r0.xyzw, r0.xyzw, r1.xxxx
    add r4.xyzw, r0.wxyz, r4.xyzw  // f4ColorOut<3:NaN:Inf,0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 569
  endif 

#line 561
endif 

#line 582
ine r0.x, l(0, 0, 0, 0), cb6[6].y
if_nz r0.x
  mul r4.xyzw, r4.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)  // f4ColorOut<3:NaN:Inf,0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
endif 

#line 587
ine r0.x, l(0, 0, 0, 0), cb6[6].w
if_nz r0.x
  mov r0.xyz, -v6.xyzx
  add r0.xyz, r0.xyzx, v5.xyzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r0.xyz, r0.wwww, r0.xyzx
  dp3 r0.x, r0.xyzx, r7.xyzx
  max r0.x, r0.x, l(0.000000)  // fEdge<0:Inf:[-0f,1.#INFf]>
  lt r0.x, r0.x, cb6[0].w
  if_nz r0.x
    mov r4.yzw, cb6[0].xxyz  // f4ColorOut<0,1,2>
  endif 

#line 587
endif 

#line 597
ine r0.x, l(0, 0, 0, 0), cb6[7].z
if_nz r0.x
  mov r0.xyz, -v6.xyzx
  add r0.xyz, r0.xyzx, v5.xyzx
  dp3 r0.x, r0.xyzx, r0.xyzx
  sqrt r0.x, r0.x
  div r0.x, r0.x, cb6[1].w
  add r4.yzw, r0.xxxx, r4.yyzw  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
endif 

#line 604
ine r0.x, l(0, 0, 0, 0), cb6[6].x
if_nz r0.x
  dp4 r0.x, r4.yzwx, cb6[2].xyzw  // f4ColorOut<0:NaN:Inf>
  dp4 r0.y, r4.yzwx, cb6[3].xyzw  // f4ColorOut<1:NaN:Inf>
  dp4 r0.z, r4.yzwx, cb6[4].xyzw  // f4ColorOut<2:NaN:Inf>
  dp4 r0.w, r4.yzwx, cb6[5].xyzw  // f4ColorOut<3:NaN:Inf>
  mov r4.xyzw, r0.wxyz  // f4ColorOut<3:NaN:Inf,0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
endif 

#line 616
mov o0.xyzw, r4.yzwx  // RenderScenePS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
ret 
// Approximately 1478 instruction slots used
