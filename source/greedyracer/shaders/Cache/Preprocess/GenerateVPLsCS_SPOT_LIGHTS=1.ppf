#line 1 "\\\\?\\C:\\Users\\admin\\Documents\\Visual Studio 2010\\Projects\\Vektoria_2015-02-12a\\Vektoria\\trunk\\VektoriaApp\\shaders\\source\\generatevpls.hlsl"


#line 1 "constant.h"


#line 10




#line 16


#line 20
cbuffer cbPerObject : register ( b0 ) 
{ 
    matrix g_mWorld : packoffset ( c0 ) ; 
} ; 

cbuffer cbPerCamera : register ( b1 ) 
{ 
    matrix g_mViewProj : packoffset ( c0 ) ; 
} ; 

cbuffer cbPerFrame : register ( b2 ) 
{ 
    matrix g_mView : packoffset ( c0 ) ; 
    matrix g_mViewInv : packoffset ( c4 ) ; 
    matrix g_mProjection : packoffset ( c8 ) ; 
    matrix g_mProjectionInv : packoffset ( c12 ) ; 
    matrix g_mProjectionInvViewport : packoffset ( c16 ) ; 
    float4 g_f4AmbientColorUp : packoffset ( c20 ) ; 
    float4 g_f4AmbientColorDown : packoffset ( c21 ) ; 
    float3 g_f3CameraPos : packoffset ( c22 ) ; 
    float g_fAlphaTest : packoffset ( c22 . w ) ; 
    uint g_uNumLights : packoffset ( c23 ) ; 
    uint g_uNumSpotLights : packoffset ( c23 . y ) ; 
    uint g_uWindowWidth : packoffset ( c23 . z ) ; 
    uint g_uWindowHeight : packoffset ( c23 . w ) ; 
    uint g_uMaxNumLightsPerTile : packoffset ( c24 ) ; 
    uint g_uMaxNumElementsPerTile : packoffset ( c24 . y ) ; 
    uint g_uNumTilesX : packoffset ( c24 . z ) ; 
    uint g_uNumTilesY : packoffset ( c24 . w ) ; 
    uint g_uMaxVPLs : packoffset ( c25 ) ; 
    uint g_uMaxNumVPLsPerTile : packoffset ( c25 . y ) ; 
    uint g_uMaxNumVPLElementsPerTile : packoffset ( c25 . z ) ; 
    float g_fVPLSpotStrength : packoffset ( c25 . w ) ; 
    float g_fVPLSpotRadius : packoffset ( c26 ) ; 
    float g_fVPLPointStrength : packoffset ( c26 . y ) ; 
    float g_fVPLPointRadius : packoffset ( c26 . z ) ; 
    float g_fVPLRemoveBackFaceContrib : packoffset ( c26 . w ) ; 
    float g_fVPLColorThreshold : packoffset ( c27 ) ; 
    float g_fVPLBrightnessThreshold : packoffset ( c27 . y ) ; 
    float g_fPerFramePad1 : packoffset ( c27 . z ) ; 
    float g_fPerFramePad2 : packoffset ( c27 . w ) ; 
} ; 

cbuffer cbShadowConstants : register ( b3 ) 
{ 
    matrix g_mPointShadowViewProj [ 12 ] [ 6 ] ; 
    matrix g_mSpotShadowViewProj [ 12 ] ; 
    float4 g_f4ShadowBias ; 
} 

cbuffer cbVPLConstants : register ( b4 ) 
{ 
    uint g_uNumVPLs ; 
    uint g_uVPLPad [ 3 ] ; 
} 

struct SVPLData 
{ 
    float4 f4Direction ; 
    float4 f4Color ; 
    float4 f4SourceLightDirection ; 
} ; 

#line 85
SamplerState g_Sampler : register ( s0 ) ; 
SamplerComparisonState g_ShadowSampler : register ( s1 ) ; 

#line 92
float4 ConvertProjToView ( float4 p ) 
{ 
    p = mul ( p , g_mProjectionInv ) ; 
    p /= p . w ; 
    return p ; 
} 

#line 100
float ConvertProjDepthToView ( float z ) 
{ 
    z = 1.f / ( z * g_mProjectionInv . _34 + g_mProjectionInv . _44 ) ; 
    return z ; 
} 

uint GetTileIndex ( float2 ScreenPos ) 
{ 
    float fTileRes = ( float ) 32 ; 
    uint nTileIdx = floor ( ScreenPos . x / fTileRes ) + floor ( ScreenPos . y / fTileRes ) * g_uNumTilesX ; 
    return nTileIdx ; 
} 

#line 116
void GetLightListInfo ( in Buffer < uint > PerTileLightIndexBuffer , in uint uMaxNumLightsPerTile , in uint uMaxNumElementsPerTile , 
in float4 SVPosition , out uint uFirstLightIndex , out uint uNumLights ) 
{ 
    uint nTileIndex = GetTileIndex ( SVPosition . xy ) ; 
    uint nStartIndex = uMaxNumElementsPerTile * nTileIndex ; 
    
#line 123
    uint uHalfZBitsHigh = PerTileLightIndexBuffer [ nStartIndex ] ; 
    uint uHalfZBitsLow = PerTileLightIndexBuffer [ nStartIndex + 1 ] ; 
    uint uHalfZBits = ( uHalfZBitsHigh << 16 ) | uHalfZBitsLow ; 
    float fHalfZ = asfloat ( uHalfZBits ) ; 
    
    float fViewPosZ = ConvertProjDepthToView ( SVPosition . z ) ; 
    
    uFirstLightIndex = ( fViewPosZ < fHalfZ ) ? ( nStartIndex + 4 ) : ( nStartIndex + 4 + uMaxNumLightsPerTile ) ; 
    uNumLights = ( fViewPosZ < fHalfZ ) ? PerTileLightIndexBuffer [ nStartIndex + 2 ] : PerTileLightIndexBuffer [ nStartIndex + 3 ] ; 
} 

#line 136
float HalfLambert ( float3 f3Vec1 , float3 f3Vec2 ) 
{ 
    float fProduct = dot ( f3Vec1 , f3Vec2 ) ; 
    fProduct *= 0.5f ; 
    fProduct += 0.5f ; 
    return fProduct ; 
} 

float BlinnPhongSpec ( float3 f3Normal , float3 f3LightDir , float fSpecpower ) 
{ 
    float3 f3HalfAngle = normalize ( f3Normal + f3LightDir ) ; 
    return pow ( saturate ( dot ( f3Normal , f3HalfAngle ) ) , fSpecpower ) ; 
} 

void SubsurfaceScattering ( in float4 f4CenterAndRadius , in float3 f3ToLight , in float3 f3LightColor , in float4 float4TexColor , 
in float fThickValue , in float4 f4SSSBRDFParams , in float4 f4ColorSSS , in float4 f4VertexPos , 
in float3 f3CamPos , in float3 f3Normal , in bool bPointLight , 
inout float3 f3LightColorSpecularResult , inout float3 f3LightDiffuseResult ) 
{ 
    const float fMaterialThickness = f4SSSBRDFParams . r ; 
    const float fRimScalar = f4SSSBRDFParams . b ; 
    const float fExtinctionCoefficientRed = f4ColorSSS . r ; 
    const float fExtinctionCoefficientGreen = f4ColorSSS . g ; 
    const float fExtinctionCoefficientBlue = f4ColorSSS . b ; 
    const float fSpecPower = 1.f ; 
    const float3 f3SpecColor = f3LightColorSpecularResult ; 
    const float4 f4TexColor = float4TexColor ; 
    float3 f3LightDir = normalize ( f3ToLight ) ; 
    float4 f4LightPos ; 
    float3 f3LightDirSSS ; 
    float4 f4FinColor ; 
    
    float3 f3EyeVector = normalize ( f3CamPos - f4VertexPos . xyz ) ; 
    f3LightDirSSS = - f3EyeVector ; 
    f4LightPos = f4CenterAndRadius ; 
    f4LightPos . w = 1.f ; 
    
    float fAttenuation = 10.f * ( 1.f / distance ( f4LightPos , f4VertexPos ) ) ; 
    
    const float3 f3Eye = normalize ( f3CamPos . xyz - f4VertexPos . xyz ) ; 
    float4 f4DotLN = HalfLambert ( f3LightDirSSS , f3Normal ) * fAttenuation ; 
    
    float3 f3IndirectLightComponent = ( float3 ) ( fMaterialThickness * max ( 0 , dot ( - f3Normal , f3LightDirSSS ) ) ) ; 
    f3IndirectLightComponent += HalfLambert ( - f3Eye , f3LightDirSSS ) * fMaterialThickness ; 
    f3IndirectLightComponent *= fAttenuation ; 
    f3IndirectLightComponent . r *= fExtinctionCoefficientRed ; 
    f3IndirectLightComponent . g *= fExtinctionCoefficientGreen ; 
    f3IndirectLightComponent . b *= fExtinctionCoefficientBlue ; 
    f3IndirectLightComponent . rgb *= fThickValue ; 
    
    float3 f3Rim = ( float3 ) ( 1.f - max ( 0.f , dot ( f3Normal , f3Eye ) ) ) ; 
    f3Rim *= f3Rim ; 
    f3Rim *= max ( 0.f , dot ( f3Normal , f3LightDirSSS ) ) * f3SpecColor ; 
    
    f4DotLN *= f4TexColor ; 
    
    f4FinColor = f4DotLN + float4 ( f3IndirectLightComponent , 1.f ) ; 
    f4FinColor . a = 1.f ; 
    f4FinColor . rgb += ( f3Rim * fRimScalar * fAttenuation * f4FinColor . a ) ; 
    f4FinColor . rgb += ( BlinnPhongSpec ( f3Normal , f3LightDirSSS , fSpecPower ) * fAttenuation * f3SpecColor * f4FinColor . a * .05f ) ; 
    f4FinColor . rgb *= f3LightColor ; 
    
    float fEdge = max ( dot ( normalize ( f3CamPos - f4VertexPos . xyz ) , f3Normal ) , 0 ) ; 
    [ branch ] 
    if ( ( fEdge < 0.8f ) && ( fMaterialThickness > 2.f ) ) 
    { 
        f3LightDiffuseResult . rgb *= f3IndirectLightComponent / 15.f ; 
        f3LightColorSpecularResult . rgb *= f3IndirectLightComponent / 15.f ; 
    } 
    else 
    { 
        f3LightDiffuseResult *= f4FinColor . xyz ; 
        f3LightColorSpecularResult *= f4FinColor . xyz ; 
    } 
} 

#line 213


#line 5 "\\\\?\\C:\\Users\\admin\\Documents\\Visual Studio 2010\\Projects\\Vektoria_2015-02-12a\\Vektoria\\trunk\\VektoriaApp\\shaders\\source\\generatevpls.hlsl"
RWStructuredBuffer < float4 > g_vplPositionBuffer : register ( u0 ) ; 
RWStructuredBuffer < SVPLData > g_VPLData : register ( u1 ) ; 

Texture2D g_RSMDepthAtlas : register ( t0 ) ; 
Texture2D g_RSMNormalAtlas : register ( t1 ) ; 
Texture2D g_RSMDiffuseAtlas : register ( t2 ) ; 

StructuredBuffer < float4x4 > g_invViewProjMatrices : register ( t3 ) ; 


Buffer < float4 > g_spotLightCenterAndRadiusBuffer : register ( t4 ) ; 
Buffer < float4 > g_spotLightColorBuffer : register ( t5 ) ; 
Buffer < float4 > g_spotLightSpotParamsBuffer : register ( t6 ) ; 

#line 21





#line 27





[ numthreads ( 16 , 16 , 1 ) ] 
void GenerateVPLsCS ( uint3 globalIdx : SV_DispatchThreadID ) 
{ 
    uint2 uv00 = ( 32 / 16 ) * globalIdx . xy ; 
    
    
    uint uiLightIndex = ( 32 / 16 ) * globalIdx . x / 32 ; 
    
#line 42
    
    float3 f3Color = 0.f ; 
    float3 f3Normal = 0.f ; 
    float4 f4Position = 1.f ; 
    uint2 uv = uv00 ; 
    
    f3Color = g_RSMDiffuseAtlas [ uv ] . rgb ; 
    f3Normal = ( ( 2 * g_RSMNormalAtlas [ uv ] . rgb ) - 1 ) ; 
    
    float2 f2ViewportUV = uv . xy ; 
    f2ViewportUV . xy %= 32 ; 
    
    float fDepth = g_RSMDepthAtlas [ uv ] . r ; 
    
    float fx = ( 2.f * ( ( ( float ) f2ViewportUV . x + 0.5f ) / 32 ) ) - 1.f ; 
    float fy = ( 2.f * - ( ( ( float ) f2ViewportUV . y + 0.5f ) / 32 ) ) + 1.f ; 
    
    float4 f4ScreenSpacePos = float4 ( fx , fy , fDepth , 1.f ) ; 
    
    
    uint uiMatrixIndex = uiLightIndex ; 
    
#line 65
    
    
    f4Position = mul ( f4ScreenSpacePos , g_invViewProjMatrices [ uiMatrixIndex ] ) ; 
    f4Position . xyz /= f4Position . w ; 
    
    
    float4 f4SpotParams = g_spotLightSpotParamsBuffer [ uiLightIndex ] ; 
    float3 f3SpotLightDir ; 
    f3SpotLightDir . xy = f4SpotParams . xy ; 
    f3SpotLightDir . z = sqrt ( 1.f - f3SpotLightDir . x * f3SpotLightDir . x - f3SpotLightDir . y * f3SpotLightDir . y ) ; 
    f3SpotLightDir . z = ( f4SpotParams . z > 0 ) ? f3SpotLightDir . z : - f3SpotLightDir . z ; 
    
    float4 f4SourceLightCenterAndRadius = g_spotLightCenterAndRadiusBuffer [ uiLightIndex ] ; 
    float3 f3LightPos = f4SourceLightCenterAndRadius . xyz - f4SourceLightCenterAndRadius . w * f3SpotLightDir ; 
    
#line 82
    
    
    float3 f3SourceLightDir = f4Position . xyz - f3LightPos ; 
    float fLightDistance = length ( f3SourceLightDir ) ; 
    
    { 
        float fFallOff = 1.f - fLightDistance / ( f4SourceLightCenterAndRadius . w ) ; 
        f3Color *= fFallOff ; 
        
#line 92
        float3 f3NormalizeColor = normalize ( f3Color ) ; 
        float fDotR = dot ( f3NormalizeColor , float3 ( 1.f , 0.f , 0.f ) ) ; 
        float fDotG = dot ( f3NormalizeColor , float3 ( 0.f , 1.f , 0.f ) ) ; 
        float fDotB = dot ( f3NormalizeColor , float3 ( 0.f , 0.f , 1.f ) ) ; 
        
        float fThreashold = g_fVPLColorThreshold ; 
        bool bIsInterestingColor = fDotR > fThreashold || fDotG > fThreashold || fDotB > fThreashold ; 
        
        if ( bIsInterestingColor ) 
        { 
            float4 f4PosAndRadius ; 
            float fLightStrength = 1.f ; 
            
            f4PosAndRadius . w = g_fVPLSpotRadius ; 
            fLightStrength *= g_fVPLSpotStrength ; 
            
#line 110
            
            f4PosAndRadius . xyz = f4Position . xyz ; 
            
            
            f3Color = f3Color * g_spotLightColorBuffer [ uiLightIndex ] . rgb * fLightStrength ; 
            
#line 117
            
            float fColorStrength = length ( f3Color ) ; 
            if ( fColorStrength > g_fVPLBrightnessThreshold ) 
            { 
                SVPLData data ; 
                data . f4Color = float4 ( f3Color , 1.f ) ; 
                data . f4Direction = float4 ( f3Normal , 0 ) ; 
                
                
                data . f4SourceLightDirection = float4 ( - f3SpotLightDir , 0.f ) ; 
                
#line 130
                
                uint uiIndex = g_vplPositionBuffer . IncrementCounter ( ) ; 
                
                g_vplPositionBuffer [ uiIndex ] = f4PosAndRadius ; 
                g_VPLData [ uiIndex ] = data ; 
            } 
        } 
    } 
}  