//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   float4x4 g_mView;                  // Offset:    0 Size:    64 [unused]
//   float4x4 g_mViewInv;               // Offset:   64 Size:    64 [unused]
//   float4x4 g_mProjection;            // Offset:  128 Size:    64 [unused]
//   float4x4 g_mProjectionInv;         // Offset:  192 Size:    64
//   float4x4 g_mProjectionInvViewport; // Offset:  256 Size:    64 [unused]
//   float4 g_f4AmbientColorUp;         // Offset:  320 Size:    16
//   float4 g_f4AmbientColorDown;       // Offset:  336 Size:    16
//   float3 g_f3CameraPos;              // Offset:  352 Size:    12
//   float g_fAlphaTest;                // Offset:  364 Size:     4 [unused]
//   uint g_uNumLights;                 // Offset:  368 Size:     4 [unused]
//   uint g_uNumSpotLights;             // Offset:  372 Size:     4 [unused]
//   uint g_uWindowWidth;               // Offset:  376 Size:     4 [unused]
//   uint g_uWindowHeight;              // Offset:  380 Size:     4 [unused]
//   uint g_uMaxNumLightsPerTile;       // Offset:  384 Size:     4
//   uint g_uMaxNumElementsPerTile;     // Offset:  388 Size:     4
//   uint g_uNumTilesX;                 // Offset:  392 Size:     4
//   uint g_uNumTilesY;                 // Offset:  396 Size:     4 [unused]
//   uint g_uMaxVPLs;                   // Offset:  400 Size:     4 [unused]
//   uint g_uMaxNumVPLsPerTile;         // Offset:  404 Size:     4
//   uint g_uMaxNumVPLElementsPerTile;  // Offset:  408 Size:     4
//   float g_fVPLSpotStrength;          // Offset:  412 Size:     4 [unused]
//   float g_fVPLSpotRadius;            // Offset:  416 Size:     4 [unused]
//   float g_fVPLPointStrength;         // Offset:  420 Size:     4 [unused]
//   float g_fVPLPointRadius;           // Offset:  424 Size:     4 [unused]
//   float g_fVPLRemoveBackFaceContrib; // Offset:  428 Size:     4
//   float g_fVPLColorThreshold;        // Offset:  432 Size:     4 [unused]
//   float g_fVPLBrightnessThreshold;   // Offset:  436 Size:     4 [unused]
//   float g_fPerFramePad1;             // Offset:  440 Size:     4 [unused]
//   float g_fPerFramePad2;             // Offset:  444 Size:     4 [unused]
//
// }
//
// cbuffer TexInfo
// {
//
//   float4 f4ColorAmbient;             // Offset:    0 Size:    16 [unused]
//   float fA;                          // Offset:   16 Size:     4 [unused]
//   float fH;                          // Offset:   20 Size:     4
//   float fBumpStrength;               // Offset:   24 Size:     4
//   float frTransparency;              // Offset:   28 Size:     4 [unused]
//   float4 f4ColorSSS;                 // Offset:   32 Size:    16
//   float4 f4SSSBRDFParams;            // Offset:   48 Size:    16
//   uint uImage;                       // Offset:   64 Size:     4 [unused]
//   uint uGlow;                        // Offset:   68 Size:     4
//   uint uSpecular;                    // Offset:   72 Size:     4
//   uint uBump;                        // Offset:   76 Size:     4
//   uint uImageBlack;                  // Offset:   80 Size:     4 [unused]
//   uint uGlowAsImage;                 // Offset:   84 Size:     4
//   uint uSpecularAsImage;             // Offset:   88 Size:     4
//   uint uHeightAsImage;               // Offset:   92 Size:     4 [unused]
//   uint uImageWhite;                  // Offset:   96 Size:     4 [unused]
//   uint uGlowWhite;                   // Offset:  100 Size:     4 [unused]
//   uint uSpecularWhite;               // Offset:  104 Size:     4
//   uint uHeight;                      // Offset:  108 Size:     4 [unused]
//   uint uShadingOn;                   // Offset:  112 Size:     4
//   uint uGlowAsAmbient;               // Offset:  116 Size:     4
//   uint uChromaKeying;                // Offset:  120 Size:     4 [unused]
//   uint uEnvironment;                 // Offset:  124 Size:     4
//   uint uPOM;                         // Offset:  128 Size:     4
//   uint uTexBRDF;                     // Offset:  132 Size:     4 [unused]
//   uint uTexSSS;                      // Offset:  136 Size:     4
//   uint uReflectionMap;               // Offset:  140 Size:     4
//   uint uixPos;                       // Offset:  144 Size:     4
//   uint uiyPos;                       // Offset:  148 Size:     4
//   uint uixPics;                      // Offset:  152 Size:     4
//   uint uiyPics;                      // Offset:  156 Size:     4
//   float fSpecularRoughness;          // Offset:  160 Size:     4
//   float fSpecularIOR;                // Offset:  164 Size:     4
//   uint uPad1;                        // Offset:  168 Size:     4 [unused]
//   uint uPad2;                        // Offset:  172 Size:     4 [unused]
//
// }
//
// cbuffer ViewportArt
// {
//
//   float4 f4ColorViewportOutline;     // Offset:    0 Size:    16
//   float4 f4FogParams;                // Offset:   16 Size:    16
//   float4x4 mColorModification;       // Offset:   32 Size:    64
//   uint uStyleColor;                  // Offset:   96 Size:     4
//   uint uStyleHalfTransparent;        // Offset:  100 Size:     4
//   uint uStylePopart;                 // Offset:  104 Size:     4 [unused]
//   uint uStyleOutlining;              // Offset:  108 Size:     4
//   uint uStyleMonochrome;             // Offset:  112 Size:     4 [unused]
//   uint uStyleOwn;                    // Offset:  116 Size:     4 [unused]
//   uint uStyleFog;                    // Offset:  120 Size:     4
//   uint uPad0;                        // Offset:  124 Size:     4 [unused]
//
// }
//
// Resource bind info for g_VPLCenterAndRadiusBuffer
// {
//
//   float4 $Element;                   // Offset:    0 Size:    16
//
// }
//
// Resource bind info for g_VPLDataBuffer
// {
//
//   struct SVPLData
//   {
//       
//       float4 f4Direction;            // Offset:    0
//       float4 f4Color;                // Offset:   16
//       float4 f4SourceLightDirection; // Offset:   32
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_Sampler                         sampler      NA          NA    0        1
// g_pointLightCenterAndRadiusBuffer    texture  float4         buf    2        1
// g_pointLightColorBuffer           texture  float4         buf    3        1
// g_perTilePointLightIndexBuffer    texture    uint         buf    4        1
// g_spotLightCenterAndRadiusBuffer    texture  float4         buf    5        1
// g_spotLightColorBuffer            texture  float4         buf    6        1
// g_spotLightSpotParamsBuffer       texture  float4         buf    7        1
// g_perTileSpotLightIndexBuffer     texture    uint         buf    8        1
// g_VPLCenterAndRadiusBuffer        texture  struct         r/o    9        1
// g_VPLDataBuffer                   texture  struct         r/o   10        1
// g_perTileVPLIndexBuffer           texture    uint         buf   11        1
// tex2D[0]                          texture  float4          2d   15        1
// tex2D[1]                          texture  float4          2d   16        1
// tex2D[3]                          texture  float4          2d   18        1
// tex2D[4]                          texture  float4          2d   19        1
// tex2D[5]                          texture  float4          2d   20        1
// tex2D[6]                          texture  float4          2d   21        1
// cbPerFrame                        cbuffer      NA          NA    2        1
// TexInfo                           cbuffer      NA          NA    5        1
// ViewportArt                       cbuffer      NA          NA    6        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float   xyz 
// NORMAL                   0   xyz         1     NONE  float   xyz 
// TANGENT                  0   xyz         2     NONE  float   xyz 
// BITANGENT                0   xyz         3     NONE  float   xyz 
// TEXCOORD                 0   xy          4     NONE  float   xy  
// TEXCOORD                 1   xyz         5     NONE  float   xyz 
// TEXCOORD                 2   xyzw        6     NONE  float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TARGET                0   xyzw        0   TARGET  float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[27], immediateIndexed
dcl_constantbuffer cb5[11], immediateIndexed
dcl_constantbuffer cb6[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_buffer (float,float,float,float) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_resource_buffer (uint,uint,uint,uint) t4
dcl_resource_buffer (float,float,float,float) t5
dcl_resource_buffer (float,float,float,float) t6
dcl_resource_buffer (float,float,float,float) t7
dcl_resource_buffer (uint,uint,uint,uint) t8
dcl_resource_structured t9, 16 
dcl_resource_structured t10, 48 
dcl_resource_buffer (uint,uint,uint,uint) t11
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t16
dcl_resource_texture2d (float,float,float,float) t18
dcl_resource_texture2d (float,float,float,float) t19
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyzw
dcl_output o0.xyzw
dcl_temps 25

#line 211 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
ult r0.x, l(1), cb5[9].y
ult r0.y, l(1), cb5[9].w
or r0.x, r0.y, r0.x
if_nz r0.x
  utof r0.x, cb5[9].x  // fxPic<0:[0f,4.29497e+009f]>
  utof r0.y, cb5[9].y  // fyPic<0:[0f,4.29497e+009f]>
  utof r0.z, cb5[9].z  // fxPics<0:[0f,4.29497e+009f]>
  utof r0.w, cb5[9].w  // fyPics<0:[0f,4.29497e+009f]>
  div r0.x, r0.x, r0.z
  div r0.z, l(1.000000), r0.z
  mul r0.z, r0.z, v4.x
  add r1.x, r0.z, r0.x  // input<13:NaN:Inf>
  div r0.x, r0.y, r0.w
  div r0.y, l(1.000000), r0.w
  mul r0.y, r0.y, v4.y
  add r1.y, r0.y, r0.x  // input<14:NaN:Inf>

#line 211
else 
  mov r1.xy, v4.xyxx  // input<13,14>
endif 

#line 221
div r0.xyz, v6.xyzx, v6.wwww  // f3VertexPos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.xyz, l(0,0,0,0)  // f3AccumDiffuse<0: -0f,1: -0f,2: -0f>

#line 226
mov r1.xy, r1.xyxx  // f2ParallaxTex<0:NaN:Inf,1:NaN:Inf>
dp3 r0.w, v1.xyzx, v1.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, v1.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r4.xyz, r3.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000)
mul r5.xyz, r3.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000)
mov r5.xyz, -r5.xyzx
add r4.xyz, r4.xyzx, r5.xyzx  // f3C1<0:NaN:Inf,1:NaN:Inf,2: 0f>
mul r5.xyz, r3.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000)
mul r6.xyz, r3.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
mov r6.xyz, -r6.xyzx
add r5.xyz, r5.xyzx, r6.xyzx  // f3C2<0:NaN:Inf,1: 0f,2:NaN:Inf>

#line 234
dp3 r0.w, r4.xyzx, r4.xyzx
sqrt r1.w, r0.w
dp3 r2.w, r5.xyzx, r5.xyzx
sqrt r3.w, r2.w
lt r1.w, r3.w, r1.w
if_nz r1.w
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r4.xyzx  // f3T<0:NaN:Inf,1:NaN:Inf,2: 0f>
else 

#line 240
  rsq r0.w, r2.w
  mul r4.xyz, r0.wwww, r5.xyzx  // f3T<0:NaN:Inf,1: 0f,2:NaN:Inf>

#line 234
endif 

#line 242
mul r5.xyz, r3.yzxy, r4.zxyz
mul r6.xyz, r3.zxyz, r4.yzxy
mov r6.xyz, -r6.xyzx
add r5.xyz, r5.xyzx, r6.xyzx
mov r5.xyz, -r5.xyzx
dp3 r0.w, r5.xyzx, r5.xyzx
rsq r0.w, r0.w
mul r5.xyz, r0.wwww, r5.xyzx  // f3B<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 246
ieq r0.w, cb5[8].x, l(1)
if_nz r0.w
  mov r6.xyz, -v6.xyzx
  add r6.xyz, r6.xyzx, v5.xyzx
  dp3 r0.w, r6.xyzx, r6.xyzx
  rsq r0.w, r0.w
  mul r6.xyz, r0.wwww, r6.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r6.xyz, -r6.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 252
  dp3 r7.x, r6.xyzx, r4.xyzx  // f3ViewDirTS<0:NaN:Inf>
  dp3 r7.y, r6.xyzx, r5.xyzx  // f3ViewDirTS<1:NaN:Inf>
  dp3 r0.w, r6.xyzx, r3.xyzx  // f3ViewDirTS<2:NaN:Inf>
  mov r7.xy, -r7.xyxx
  mul r7.xy, r7.xyxx, l(0.020000, 0.020000, 0.000000, 0.000000)
  div r7.xy, r7.xyxx, r0.wwww  // f2MaxParallaxOffset<0:NaN:Inf,1:NaN:Inf>
  dp3 r0.w, r6.xyzx, r3.xyzx
  mul r0.w, r0.w, l(-15.000000)
  add r0.w, r0.w, l(20.000000)
  ftoi r0.w, r0.w  // iSampleCount<0>
  itof r1.w, r0.w
  div r1.w, l(1.000000), r1.w  // fZStep<0:Inf>
  mul r6.xy, r1.wwww, r7.xyxx  // f2TexStep<0:NaN:Inf,1:NaN:Inf>
  deriv_rtx_coarse r6.zw, r1.xxxy  // f2Dx<0:NaN:Inf,1:NaN:Inf>
  deriv_rty_coarse r7.xy, r1.xyxx  // f2Dy<0:NaN:Inf,1:NaN:Inf>

#line 264
  mov r2.w, l(0)  // iSampleIdx<0: 0>
  mov r7.zw, l(0,0,0,0)  // f2CurTexOffset<0: -0f,1: -0f>

#line 268
  mov r1.w, -r1.w
  add r3.w, r1.w, l(1.000000)  // fCurRayZ<0:Inf>
  mov r4.w, l(1.000000)  // fPrevRayZ<0: 1f>

#line 276
  mov r8.xy, r7.zwzz  // f2CurTexOffset<0:NaN:Inf,1:NaN:Inf>
  mov r8.zw, r7.zzzw  // f2PrevTexOffset<0:NaN:Inf,1:NaN:Inf>
  mov r9.xy, r7.zwzz  // f2FinalTexOffset<0:NaN:Inf,1:NaN:Inf>
  mov r5.w, r2.w  // iSampleIdx<0>
  mov r9.z, r3.w  // fCurRayZ<0:NaN:Inf>
  mov r9.w, r4.w  // fPrevRayZ<0:NaN:Inf>
  mov r10.x, r2.w  // fPrevHeight<0:NaN:Inf>
  loop 
    iadd r10.y, r0.w, l(1)
    ilt r10.z, r5.w, r10.y
    breakc_z r10.z
    add r10.zw, r1.xxxy, r8.xxxy
    sample_d_indexable(texture2d)(float,float,float,float) r10.z, r10.zwzz, t20.yzxw, s0, r6.zwzz, r7.xyxx
    mov r10.z, r10.z  // fCurHeight<0:Inf>
    add r10.z, r10.z, r10.x
    mul r10.z, r10.z, l(0.500000)  // fCurHeight<0:NaN:Inf>
    lt r10.w, r9.z, r10.z
    if_nz r10.w
      mov r10.w, -r9.w
      add r11.x, r10.w, r10.x
      mov r11.y, -r10.z
      add r11.y, r10.x, r11.y
      add r11.y, r9.z, r11.y
      add r10.w, r10.w, r11.y
      div r10.w, r11.x, r10.w  // fT<0:NaN:Inf>
      mul r11.xy, r6.xyxx, r10.wwww
      add r9.xy, r8.zwzz, r11.xyxx  // f2FinalTexOffset<0:NaN:Inf,1:NaN:Inf>
      mov r5.w, r10.y  // iSampleIdx<0>
    else 

#line 289
      iadd r5.w, r5.w, l(1)  // iSampleIdx<0>
      mov r8.zw, r8.xxxy  // f2PrevTexOffset<0:NaN:Inf,1:NaN:Inf>
      mov r9.w, r9.z  // fPrevRayZ<0:NaN:Inf>
      mov r10.x, r10.z  // fPrevHeight<0:NaN:Inf>
      add r8.xy, r6.xyxx, r8.xyxx  // f2CurTexOffset<0:NaN:Inf,1:NaN:Inf>
      add r9.z, r1.w, r9.z  // fCurRayZ<0:NaN:Inf>

#line 280
    endif 

#line 276
  endloop 

#line 298
  add r1.xy, r1.xyxx, r9.xyxx  // f2ParallaxTex<0:NaN:Inf,1:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t20.xzwy, s0  // fHeightX<0:Inf>

#line 303
  mul r6.xyz, r4.xyzx, r0.wwww
  mul r7.xyz, r5.xyzx, r0.wwww
  add r6.xyz, r6.xyzx, r7.xyzx
  add r6.xyz, r6.xyzx, v1.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
  dp3 r0.w, r6.xyzx, r6.xyzx
  rsq r0.w, r0.w
  mul r6.xyz, r0.wwww, r6.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>

#line 246
else 
  mov r6.xyz, v1.xyzx  // input<4,5,6>
endif 

#line 309
ieq r0.w, cb5[8].x, l(2)
if_nz r0.w

#line 314
  mov r7.xyz, -v6.xyzx
  add r7.xyz, r7.xyzx, v5.xyzx
  dp3 r0.w, r7.xyzx, r7.xyzx
  rsq r0.w, r0.w
  mul r7.xyz, r0.wwww, r7.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 318
  dp3 r8.x, r7.xyzx, r4.xyzx  // f3ViewDirTS<0:NaN:Inf>
  dp3 r8.y, r7.xyzx, v3.xyzx  // f3ViewDirTS<1:NaN:Inf>
  dp3 r8.z, r7.xyzx, r3.xyzx  // f3ViewDirTS<2:NaN:Inf>
  dp3 r0.w, r8.xyzx, r8.xyzx
  rsq r0.w, r0.w
  mul r3.xyz, r0.wwww, r8.xyzx  // f3RayDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  div r3.xyz, r3.xyzx, r3.zzzz  // f3RayDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 324
  mov r7.xy, r1.xyxx  // f3Pos<0:NaN:Inf,1:NaN:Inf>
  mov r7.z, l(0)  // f3Pos<2: 0f>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  add r0.w, r8.y, l(-0.000000)
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r8.xy, r7.xyxx, t20.zwxy, s0
  mov r8.xy, r8.xyxx  // f4Tex<2:Inf,3:Inf>
  mov r8.x, r8.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r8.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r8.x
  add r1.w, r8.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r8.xyz, r0.wwww, r3.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx  // f3Pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 329
  sample_indexable(texture2d)(float,float,float,float) r7.xy, r7.xyxx, t20.zwxy, s0  // f4Tex<2:Inf,3:Inf,0:Inf,1:Inf>
  mov r7.x, r7.x  // fConeRatio<0:Inf>
  mov r0.w, -r7.z
  add r0.w, r0.w, r7.y
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)  // fHeight<0:[0f,1f]>
  mul r0.w, r0.w, r7.x
  add r1.w, r7.x, l(1.000000)
  div r0.w, r0.w, r1.w
  mul r0.w, r0.w, l(0.010000)  // fD<0:NaN:Inf>
  mul r0.w, r0.w, r3.z
  add r0.w, r0.w, r7.z  // f3Pos<2:NaN:Inf>

#line 336
  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r3.xyz, r0.wwww, r3.xyzx  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r1.z, l(0)
  add r7.xyz, r1.xyzx, r3.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 341
  sample_indexable(texture2d)(float,float,float,float) r0.w, r7.xyxx, t20.xyzw, s0
  mov r0.w, r0.w  // f4Tex<3:Inf>
  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  lt r0.w, r7.z, r0.w
  if_nz r0.w
    add r8.xyz, r3.xyzx, r7.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 347
    mov r9.xyz, -r3.xyzx
    add r8.xyz, r7.xyzx, r9.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 344
  endif 

#line 341
  sample_indexable(texture2d)(float,float,float,float) r0.w, r8.xyxx, t20.xyzw, s0
  mov r0.w, r0.w  // f4Tex<3:Inf>
  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  lt r0.w, r8.z, r0.w
  if_nz r0.w
    add r7.xyz, r3.xyzx, r8.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 347
    mov r9.xyz, -r3.xyzx
    add r7.xyz, r8.xyzx, r9.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 344
  endif 

#line 341
  sample_indexable(texture2d)(float,float,float,float) r0.w, r7.xyxx, t20.xyzw, s0
  mov r0.w, r0.w  // f4Tex<3:Inf>
  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  lt r0.w, r7.z, r0.w
  if_nz r0.w
    add r8.xyz, r3.xyzx, r7.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 347
    mov r9.xyz, -r3.xyzx
    add r8.xyz, r7.xyzx, r9.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 344
  endif 

#line 341
  sample_indexable(texture2d)(float,float,float,float) r0.w, r8.xyxx, t20.xyzw, s0
  mov r0.w, r0.w  // f4Tex<3:Inf>
  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  lt r0.w, r8.z, r0.w
  if_nz r0.w
    add r7.xyz, r3.xyzx, r8.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 347
    mov r9.xyz, -r3.xyzx
    add r7.xyz, r8.xyzx, r9.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 344
  endif 

#line 341
  sample_indexable(texture2d)(float,float,float,float) r0.w, r7.xyxx, t20.xyzw, s0
  mov r0.w, r0.w  // f4Tex<3:Inf>
  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  lt r0.w, r7.z, r0.w
  if_nz r0.w
    add r8.xyz, r3.xyzx, r7.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 347
    mov r9.xyz, -r3.xyzx
    add r8.xyz, r7.xyzx, r9.xyzx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 344
  endif 

#line 341
  sample_indexable(texture2d)(float,float,float,float) r0.w, r8.xyxx, t20.xyzw, s0  // f4Tex<0:Inf,1:Inf,2:Inf,3:Inf>
  mul r1.zw, r3.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)  // f3BinSearchRange<0:NaN:Inf,1:NaN:Inf>
  lt r0.w, r8.z, r0.w
  if_nz r0.w
    add r1.xy, r1.zwzz, r8.xyxx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf>
  else 

#line 347
    mov r1.zw, -r1.zzzw
    add r1.xy, r1.zwzz, r8.xyxx  // f3BinSearchPosition<0:NaN:Inf,1:NaN:Inf>

#line 344
  endif 

#line 350
  mov r1.xy, r1.xyxx  // f2ParallaxTex<0:NaN:Inf,1:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t20.xyzw, s0  // fHeightX<0:Inf>

#line 355
  mul r3.xyz, r4.xyzx, r0.wwww
  mul r4.xyz, r5.xyzx, r0.wwww
  add r3.xyz, r3.xyzx, r4.xyzx
  add r3.xyz, r3.xyzx, r6.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
  dp3 r0.w, r3.xyzx, r3.xyzx
  rsq r0.w, r0.w
  mul r6.xyz, r0.wwww, r3.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>

#line 309
endif 

#line 361
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyxx, t15.wxyz, s0  // f4DiffTex<3:Inf,0:Inf,1:Inf,2:Inf>

#line 367
mov r3.x, r3.x  // fSpecMasc<0:Inf>

#line 372
ine r0.w, l(0, 0, 0, 0), cb5[4].w
if_nz r0.w
  sample_indexable(texture2d)(float,float,float,float) r1.zw, r1.xyxx, t18.zwxy, s0
  mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
  add r1.zw, r1.zzzw, l(0.000000, 0.000000, -1.000000, -1.000000)  // f3BumpNormal<0:Inf,1:Inf>
  mul r1.zw, r1.zzzw, cb5[1].zzzz  // f3BumpNormal<0:NaN:Inf,1:NaN:Inf>
  mul r4.xyz, r1.zzzz, v2.xyzx
  mov r0.w, -r1.w
  mul r5.xyz, r0.wwww, v3.xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  add r4.xyz, r4.xyzx, r6.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
  dp3 r0.w, r4.xyzx, r4.xyzx
  rsq r0.w, r0.w
  mul r6.xyz, r0.wwww, r4.xyzx  // input<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>

#line 372
endif 

#line 379
mov r6.xyz, r6.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r4.xyz, -r0.xyzx
add r4.xyz, r4.xyzx, cb2[22].xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 385
ine r0.w, l(0, 0, 0, 0), cb5[4].z
if_nz r0.w
  mov r5.xyz, r3.yzwy  // f4SpecMapCol<0:Inf,1:Inf,2:Inf>
else 
  mov r5.xyz, l(0,0,0,0)  // f4SpecMapCol<0: 0f,1: 0f,2: 0f>
endif 

#line 391
mul r0.w, r6.y, l(0.500000)
add r0.w, r0.w, l(0.500000)  // fAmbientBlend<0:NaN:Inf>
mul r7.xyz, r0.wwww, cb2[20].xyzx
mov r0.w, -r0.w
add r0.w, r0.w, l(1.000000)
mul r8.xyz, r0.wwww, cb2[21].xyzx
add r7.xyz, r7.xyzx, r8.xyzx  // f3Ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 398
nop 
mov r0.w, cb2[24].x  // uMaxNumLightsPerTile<0>
mov r1.z, cb2[24].y  // uMaxNumElementsPerTile<0>
mov r8.xyz, v0.xyzx  // SVPosition<0,1,2>

#line 119 "constant.h"
nop 
mov r8.xy, r8.xyxx  // ScreenPos<0,1>

#line 109
div r1.w, r8.x, l(32.000000)
round_ni r1.w, r1.w
div r2.w, r8.y, l(32.000000)
round_ni r2.w, r2.w
utof r4.w, cb2[24].z
mul r2.w, r2.w, r4.w
add r1.w, r1.w, r2.w
ftou r1.w, r1.w  // nTileIdx<0>
mov r1.w, r1.w  // GetTileIndex<0>

#line 119
mov r1.w, r1.w  // nTileIndex<0>
imul null, r2.w, r1.z, r1.w  // nStartIndex<0>

#line 123
ld_indexable(buffer)(uint,uint,uint,uint) r4.w, r2.wwww, t4.yzwx
mov r4.w, r4.w  // uHalfZBitsHigh<0>
imad r5.w, r1.z, r1.w, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r6.w, r5.wwww, t4.yzwx
mov r6.w, r6.w  // uHalfZBitsLow<0>
ishl r4.w, r4.w, l(16)
or r4.w, r6.w, r4.w  // uHalfZBits<0>
mov r4.w, r4.w  // fHalfZ<0:NaN:Inf>
nop 
mov r8.z, r8.z  // z<0>

#line 102
mul r6.w, r8.z, cb2[15].z
add r6.w, r6.w, cb2[15].w
div r6.w, l(1.000000), r6.w  // z<0:Inf>
mov r6.w, r6.w  // ConvertProjDepthToView<0:Inf>

#line 128
mov r6.w, r6.w  // fViewPosZ<0:Inf>
lt r4.w, r6.w, r4.w
imad r7.w, r1.z, r1.w, l(4)
iadd r0.w, r7.w, r0.w
movc r8.x, r4.w, r7.w, r0.w  // uFirstLightIndex<0>
imad r8.y, r1.z, r1.w, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r8.z, r8.yyyy, t4.yzxw
imad r1.z, r1.z, r1.w, l(3)
ld_indexable(buffer)(uint,uint,uint,uint) r8.w, r1.zzzz, t4.yzwx
movc r4.w, r4.w, r8.z, r8.w  // uNumLights<0>

#line 398 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
mov r8.x, r8.x  // uStartIndex<0>
mov r4.w, r4.w  // uLightCount<0>

#line 402
mov r8.x, r8.x  // i<0>

#line 424
sample_indexable(texture2d)(float,float,float,float) r9.xyz, r1.xyxx, t21.xyzw, s0

#line 402
mov r10.xyz, r2.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r11.xyz, r2.xyzx  // f3AccumSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r8.z, r8.x  // i<0>
loop 
  iadd r8.w, r8.x, r4.w
  ult r8.w, r8.z, r8.w
  breakc_z r8.w
  ld_indexable(buffer)(uint,uint,uint,uint) r8.w, r8.zzzz, t4.yzwx
  mov r8.w, r8.w  // uLightIndex<0>

#line 412
  nop 
  mov r8.w, r8.w  // uLightIndex<0>
  mov r12.xyz, r0.xyzx  // f3Position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r13.xyz, r6.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r14.xyz, r4.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r15.xyz, r3.yzwy  // f4SpecMapCol<0:Inf,1:Inf,2:Inf>

#line 186 "lightingconstants.h"
  ld_indexable(buffer)(float,float,float,float) r16.xyzw, r8.wwww, t2.wxyz  // f4CenterAndRadius<3:Inf,0:Inf,1:Inf,2:Inf>
  mov r12.xyz, -r12.xyzx
  add r12.xyz, r12.xyzx, r16.yzwy  // f3ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r9.w, r12.xyzx, r12.xyzx
  rsq r10.w, r9.w
  mul r16.yzw, r10.wwww, r12.xxyz  // f3LightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sqrt r9.w, r9.w  // fLightDistance<0:NaN:Inf>

#line 195
  mov r16.x, r16.x  // fRad<0:Inf>
  lt r10.w, r9.w, r16.x
  if_nz r10.w
    div r10.w, r9.w, r16.x  // fx<0:NaN:Inf>

#line 204
    mul r10.w, r10.w, r10.w
    mul r10.w, r10.w, r10.w
    mul r10.w, r10.w, l(1.000000)
    mov r10.w, -r10.w
    add r10.w, r10.w, l(1.000000)
    mul r10.w, r10.w, r10.w
    mul r10.w, r10.w, l(1.000000)
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(1.000000)
    mul r10.w, r10.w, r16.x
    mul r9.w, r9.w, r9.w
    add r9.w, r9.w, l(1.000000)
    div r9.w, r10.w, r9.w  // fFallOff<0:NaN:Inf>
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r8.wwww, t3.xyzw
    dp3 r10.w, r16.yzwy, r13.xyzx
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(1.000000)
    mul r16.xyz, r10.wwww, r17.xyzx
    mul r16.xyz, r9.wwww, r16.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r16.xyz, r16.xyzx, cb5[1].yyyy  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 210
    nop 
    mov r18.xyz, r13.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r14.xyz, r14.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r12.xyz, r12.xyzx  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r10.w, cb5[10].x  // fRoughness<0>
    mov r11.w, cb5[10].y  // fF0<0>

#line 8 "ggxlighting.h"
    dp3 r12.w, r18.xyzx, r18.xyzx
    rsq r12.w, r12.w
    mul r18.xyz, r12.wwww, r18.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r10.w, r10.w, r10.w  // fAlpha<0:Inf:[0f,1.#INFf]>
    add r19.xyz, r12.xyzx, r14.xyzx
    dp3 r12.w, r19.xyzx, r19.xyzx
    rsq r12.w, r12.w
    mul r19.xyz, r12.wwww, r19.xyzx  // f3H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r12.w, r18.xyzx, r12.xyzx
    max r12.w, r12.w, l(0.000000)
    min r12.w, r12.w, l(1.000000)  // fDotNL<0:[0f,1f]>
    dp3 r13.w, r18.xyzx, r14.xyzx
    max r13.w, r13.w, l(0.000000)
    min r13.w, r13.w, l(1.000000)  // fDotNV<0:[0f,1f]>
    dp3 r14.x, r18.xyzx, r19.xyzx
    max r14.x, r14.x, l(0.000000)
    min r14.x, r14.x, l(1.000000)  // fDotNH<0:[0f,1f]>
    dp3 r12.x, r12.xyzx, r19.xyzx
    max r12.x, r12.x, l(0.000000)
    min r12.x, r12.x, l(1.000000)  // fDotLH<0:[0f,1f]>

#line 21
    mul r12.y, r10.w, r10.w  // fAlphaSqr<0:NaN:Inf>
    mul r12.z, r14.x, r14.x
    add r14.x, r12.y, l(-1.000000)
    mul r12.z, r12.z, r14.x
    add r12.z, r12.z, l(1.000000)  // fDenom<0:NaN:Inf>
    mul r14.x, r12.z, l(3.141590)
    mul r12.z, r12.z, r14.x
    div r12.y, r12.y, r12.z  // fD<0:NaN:Inf>

#line 27
    mov r12.x, -r12.x
    add r12.x, r12.x, l(1.000000)
    mul r12.z, r12.x, l(1.000000)
    mul r12.x, r12.x, r12.x
    mul r12.x, r12.x, r12.x
    mul r12.x, r12.x, r12.z  // fDotLH5<0:[0f,1f]>
    mov r12.z, -r11.w
    add r12.z, r12.z, l(1.000000)
    mul r12.x, r12.x, r12.z
    add r11.w, r11.w, r12.x  // fF<0:Inf>

#line 31
    div r10.w, r10.w, l(2.000000)  // fK<0:Inf:[0f,1.#INFf]>
    nop 
    mov r12.w, r12.w  // fDotNV<0:[0f,1f]>
    mov r10.w, r10.w  // fK<0:Inf:[0f,1.#INFf]>

#line 3
    mov r12.x, -r10.w
    add r12.x, r12.x, l(1.000000)
    mul r12.z, r12.x, r12.w
    add r12.z, r10.w, r12.z
    div r12.z, l(1.000000), r12.z  // G1V<0:NaN:Inf>

#line 32
    nop 
    mov r13.w, r13.w  // fDotNV<0:[0f,1f]>

#line 3
    mul r12.x, r12.x, r13.w
    add r10.w, r10.w, r12.x
    div r10.w, l(1.000000), r10.w  // G1V<0:NaN:Inf>

#line 32
    mul r10.w, r10.w, r12.z  // fVis<0:NaN:Inf>
    mul r12.x, r12.y, r12.w
    mul r11.w, r11.w, r12.x
    mul r10.w, r10.w, r11.w  // fSpecular<0:NaN:Inf>
    mov r10.w, r10.w  // fLightingFuncGGX<0:NaN:Inf>

#line 210 "lightingconstants.h"
    mov r10.w, r10.w  // fSpecMul<0:NaN:Inf>
    mul r12.xyz, r10.wwww, r17.xyzx
    mul r12.xyz, r9.wwww, r12.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 216
    ine r9.w, l(0, 0, 0, 0), cb5[6].z
    if_nz r9.w
      mul r14.xyz, r16.xyzx, r12.xyzx
      mul r14.xyz, r14.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 
      ine r9.w, l(0, 0, 0, 0), cb5[5].z
      if_nz r9.w
        mul r17.xyz, r15.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
        mul r18.xyz, r16.xyzx, r12.xyzx
        mul r14.xyz, r17.xyzx, r18.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      else 

#line 221
        mul r17.xyz, r15.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
        mul r12.xyz, r16.xyzx, r12.xyzx
        mul r14.xyz, r12.xyzx, r17.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 218
      endif 
    endif 

#line 230
    mul r12.xyz, r16.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r14.xyz, r14.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 196
  else 
    mov r12.xyz, l(0,0,0,0)  // f3LightColorDiffuseResult<0: 0f,1: 0f,2: 0f>
    mov r14.xyz, l(0,0,0,0)  // f3LightColorSpecularResult<0: 0f,1: 0f,2: 0f>
  endif 

#line 412 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
  mov r12.xyz, r12.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r14.xyz, r14.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 417
  ine r9.w, l(0, 0, 0, 0), cb5[8].z
  if_nz r9.w
    ld_indexable(buffer)(float,float,float,float) r16.xyz, r8.wwww, t2.xyzw  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r8.wwww, t3.xyzw  // f3LightCol<0:Inf,1:Inf,2:Inf>

#line 424
    dp3 r8.w, r9.xyzx, r9.xyzx
    sqrt r8.w, r8.w  // fThickValue<0:NaN:Inf>
    nop 
    mov r16.xyz, r16.xyzx  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf>
    mov r17.xyz, r17.xyzx  // f3LightColor<0:Inf,1:Inf,2:Inf>
    mov r15.xyz, r15.xyzx  // float4TexColor<0:Inf,1:Inf,2:Inf>
    mov r8.w, r8.w  // fThickValue<0:NaN:Inf>
    mov r18.xy, cb5[3].xzxx  // f4SSSBRDFParams<0,2>
    mov r19.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r20.xyzw, v6.xyzw  // f4VertexPos<0,1,2,3>
    mov r21.xyz, v5.xyzx  // f3CamPos<0,1,2>
    mov r14.xyz, r14.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r12.xyz, r12.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 155 "constant.h"
    mov r18.x, r18.x  // fMaterialThickness<0>
    mov r18.y, r18.y  // fRimScalar<0>
    mov r19.x, r19.x  // fExtinctionCoefficientRed<0>
    mov r19.y, r19.y  // fExtinctionCoefficientGreen<0>
    mov r19.z, r19.z  // fExtinctionCoefficientBlue<0>
    mov r14.xyz, r14.xyzx  // f3SpecColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r15.xyz, r15.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 168
    mov r22.xyz, -r20.xyzx
    add r21.xyz, r21.xyzx, r22.xyzx
    dp3 r9.w, r21.xyzx, r21.xyzx
    rsq r9.w, r9.w
    mul r21.xyz, r9.wwww, r21.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r22.xyz, -r21.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r16.xyz, r16.xyzx  // f4LightPos<0:Inf,1:Inf,2:Inf>
    mov r16.w, l(1.000000)  // f4LightPos<3: 1f>
    mov r20.xyzw, -r20.xyzw
    add r16.xyzw, r16.xyzw, r20.xyzw
    dp4 r9.w, r16.xyzw, r16.xyzw
    sqrt r9.w, r9.w
    div r9.w, l(1.000000), r9.w
    mul r9.w, r9.w, l(10.000000)  // fAttenuation<0:NaN:Inf>

#line 176
    nop 
    mov r22.xyz, r22.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r16.xyz, r13.xyzx  // f3Vec2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 138
    dp3 r10.w, r22.xyzx, r16.xyzx  // fProduct<0:NaN:Inf>
    mul r10.w, r10.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r10.w, r10.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r10.w, r10.w  // HalfLambert<0:NaN:Inf>

#line 176
    mul r20.xyz, r9.wwww, r10.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r23.xyz, -r13.xyzx
    dp3 r10.w, r23.xyzx, r22.xyzx
    max r10.w, r10.w, l(0.000000)
    mul r23.xyz, r10.wwww, r18.xxxx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 138
    dp3 r10.w, r22.xyzx, r22.xyzx  // fProduct<0:NaN:Inf>
    mul r10.w, r10.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r10.w, r10.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r10.w, r10.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r10.w, r18.x, r10.w
    add r23.xyz, r10.wwww, r23.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r23.xyz, r9.wwww, r23.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r24.x, r19.x, r23.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r24.y, r19.y, r23.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r24.z, r19.z, r23.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r19.xyz, r8.wwww, r24.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r8.w, r13.xyzx, r21.xyzx
    max r8.w, r8.w, l(0.000000)
    mov r10.w, -r8.w
    add r21.xyz, r10.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)  // f3Rim<0:Inf:[-1.#INFf,1f],1:Inf:[-1.#INFf,1f],2:Inf:[-1.#INFf,1f]>
    mul r21.xyz, r21.xyzx, r21.xyzx  // f3Rim<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r10.w, r13.xyzx, r22.xyzx
    max r10.w, r10.w, l(0.000000)
    mul r13.xyz, r14.xyzx, r10.wwww
    mul r13.xyz, r13.xyzx, r21.xyzx  // f3Rim<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 190
    mul r15.xyz, r15.xyzx, r20.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r15.xyz, r19.xyzx, r15.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r13.xyz, r18.yyyy, r13.xyzx
    mul r13.xyz, r9.wwww, r13.xyzx
    mul r13.xyz, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r13.xyz, r13.xyzx, r15.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 146
    add r15.xyz, r22.xyzx, r16.xyzx
    dp3 r10.w, r15.xyzx, r15.xyzx
    rsq r10.w, r10.w
    mul r15.xyz, r10.wwww, r15.xyzx  // f3HalfAngle<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r10.w, r16.xyzx, r15.xyzx
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(1.000000)
    mul r10.w, r10.w, l(1.000000)  // BlinnPhongSpec<0:[0f,1f]>

#line 195
    mul r9.w, r9.w, r10.w
    mul r15.xyz, r14.xyzx, r9.wwww
    mul r15.xyz, r15.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r15.xyz, r15.xyzx, l(0.050000, 0.050000, 0.050000, 0.000000)
    add r13.xyz, r13.xyzx, r15.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r13.xyz, r17.xyzx, r13.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    lt r8.w, r8.w, l(0.800000)
    lt r9.w, l(2.000000), r18.x
    and r8.w, r8.w, r9.w
    if_nz r8.w
      div r15.xyz, r19.xyzx, l(15.000000, 15.000000, 15.000000, 0.000000)
      mul r12.xyz, r12.xyzx, r15.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      mul r14.xyz, r14.xyzx, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    else 

#line 207
      mul r12.xyz, r12.xyzx, r13.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      mul r14.xyz, r13.xyzx, r14.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    endif 

#line 426 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
    mov r14.xyz, r14.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r12.xyz, r12.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 417
  endif 

#line 432
  add r10.xyz, r10.xyzx, r12.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  add r11.xyz, r11.xyzx, r14.xyzx  // f3AccumSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 402
  iadd r8.z, r8.z, l(1)  // i<0>
endloop 

#line 441
nop 

#line 119 "constant.h"
nop 

#line 123
ld_indexable(buffer)(uint,uint,uint,uint) r2.x, r2.wwww, t8.xyzw
mov r2.x, r2.x  // uHalfZBitsHigh<0>
ld_indexable(buffer)(uint,uint,uint,uint) r2.y, r5.wwww, t8.yxzw
mov r2.y, r2.y  // uHalfZBitsLow<0>
ishl r2.x, r2.x, l(16)
or r2.x, r2.y, r2.x  // uHalfZBits<0>
mov r2.x, r2.x  // fHalfZ<0:NaN:Inf>
nop 
lt r2.x, r6.w, r2.x
movc r0.w, r2.x, r7.w, r0.w  // uFirstLightIndex<0>
ld_indexable(buffer)(uint,uint,uint,uint) r2.y, r8.yyyy, t8.yxzw
ld_indexable(buffer)(uint,uint,uint,uint) r1.z, r1.zzzz, t8.yzxw
movc r1.z, r2.x, r2.y, r1.z  // uNumLights<0>

#line 441 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
mov r0.w, r0.w  // uStartIndex<0>
mov r1.z, r1.z  // uLightCount<0>

#line 444
mov r0.w, r0.w  // i<0>
mov r2.xyz, r10.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r8.xyz, r11.xyzx  // f3AccumSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r2.w, r0.w  // i<0>
loop 
  iadd r4.w, r0.w, r1.z
  ult r4.w, r2.w, r4.w
  breakc_z r4.w
  ld_indexable(buffer)(uint,uint,uint,uint) r4.w, r2.wwww, t8.yzwx
  mov r4.w, r4.w  // uLightIndex<0>

#line 455
  nop 
  mov r4.w, r4.w  // uLightIndex<0>
  mov r12.xyz, r0.xyzx  // f3Position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r13.xyz, r6.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r14.xyz, r4.xyzx  // f3ViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r15.xyz, r5.xyzx  // f4SpecMapCol<0:Inf,1:Inf,2:Inf>

#line 267 "lightingconstants.h"
  ld_indexable(buffer)(float,float,float,float) r16.xyzw, r4.wwww, t5.xyzw  // f4BoundingSphereCenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
  ld_indexable(buffer)(float,float,float,float) r17.xyzw, r4.wwww, t7.wxyz  // f4SpotParams<3:Inf,0:Inf,1:Inf,2:Inf>

#line 272
  mov r18.xy, r17.yzyy  // f3SpotLightDir<0:Inf,1:Inf>
  mul r5.w, r18.x, r18.x
  mov r5.w, -r5.w
  add r5.w, r5.w, l(1.000000)
  mul r7.w, r18.y, r18.y
  mov r7.w, -r7.w
  add r5.w, r5.w, r7.w
  sqrt r5.w, r5.w  // f3SpotLightDir<2:NaN>

#line 276
  lt r7.w, l(0.000000), r17.w
  mov r8.w, -r5.w
  movc r18.z, r7.w, r5.w, r8.w  // f3SpotLightDir<2:NaN>
  mul r19.xyz, r16.wwww, r18.xyzx
  mov r19.xyz, -r19.xyzx
  add r16.xyz, r16.xyzx, r19.xyzx  // f3LightPosition<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r12.xyz, -r12.xyzx
  add r12.xyz, r12.xyzx, r16.xyzx  // f3ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r5.w, r12.xyzx, r12.xyzx
  rsq r8.w, r5.w
  mul r16.xyz, r8.wwww, r12.xyzx  // f3ToLightNormalized<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sqrt r5.w, r5.w  // fLightDistance<0:NaN:Inf>
  mov r19.xyz, -r16.xyzx
  dp3 r8.w, r19.xyzx, r18.xyzx  // fCosineOfCurrentAngle<0:NaN:Inf>

#line 288
  mov r17.x, r17.x  // fRad<0:Inf>
  mov r9.w, -r17.w
  movc r7.w, r7.w, r17.w, r9.w  // fCosineOfConeAngle<0:Inf>
  lt r9.w, r5.w, r17.x
  lt r10.w, r7.w, r8.w
  and r9.w, r9.w, r10.w
  if_nz r9.w
    mov r7.w, -r7.w
    add r7.w, r7.w, r8.w
    mov r8.w, -r8.w
    add r8.w, r8.w, l(1.000000)
    div r7.w, r7.w, r8.w  // fRadialAttenuation<0:NaN:Inf>
    mul r7.w, r7.w, r7.w
    max r7.w, r7.w, l(0.000000)
    min r7.w, r7.w, l(1.000000)  // fRadialAttenuation<0:[0f,1f]>
    div r8.w, r5.w, r17.x  // fx<0:NaN:Inf>

#line 303
    mul r8.w, r8.w, r8.w
    mul r8.w, r8.w, r8.w
    mul r8.w, r8.w, l(1.000000)
    mov r8.w, -r8.w
    add r8.w, r8.w, l(1.000000)
    mul r8.w, r8.w, r8.w
    mul r8.w, r8.w, l(1.000000)
    max r8.w, r8.w, l(0.000000)
    min r8.w, r8.w, l(1.000000)
    mul r8.w, r8.w, r17.x
    mul r5.w, r5.w, r5.w
    add r5.w, r5.w, l(1.000000)
    div r5.w, r8.w, r5.w  // fFallOff<0:NaN:Inf>
    ld_indexable(buffer)(float,float,float,float) r17.xyz, r4.wwww, t6.xyzw
    dp3 r8.w, r16.xyzx, r13.xyzx
    max r8.w, r8.w, l(0.000000)
    min r8.w, r8.w, l(1.000000)
    mul r16.xyz, r8.wwww, r17.xyzx
    mul r16.xyz, r5.wwww, r16.xyzx
    mul r16.xyz, r7.wwww, r16.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r16.xyz, r16.xyzx, cb5[1].yyyy  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 310
    nop 
    mov r18.xyz, r13.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r14.xyz, -r14.xyzx  // f3V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r12.xyz, r12.xyzx  // f3L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r8.w, cb5[10].x  // fRoughness<0>
    mov r9.w, cb5[10].y  // fF0<0>

#line 8 "ggxlighting.h"
    dp3 r10.w, r18.xyzx, r18.xyzx
    rsq r10.w, r10.w
    mul r18.xyz, r10.wwww, r18.xyzx  // f3N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r8.w, r8.w, r8.w  // fAlpha<0:Inf:[0f,1.#INFf]>
    add r19.xyz, r12.xyzx, r14.xyzx
    dp3 r10.w, r19.xyzx, r19.xyzx
    rsq r10.w, r10.w
    mul r19.xyz, r10.wwww, r19.xyzx  // f3H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r10.w, r18.xyzx, r12.xyzx
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(1.000000)  // fDotNL<0:[0f,1f]>
    dp3 r11.w, r18.xyzx, r14.xyzx
    max r11.w, r11.w, l(0.000000)
    min r11.w, r11.w, l(1.000000)  // fDotNV<0:[0f,1f]>
    dp3 r12.w, r18.xyzx, r19.xyzx
    max r12.w, r12.w, l(0.000000)
    min r12.w, r12.w, l(1.000000)  // fDotNH<0:[0f,1f]>
    dp3 r12.x, r12.xyzx, r19.xyzx
    max r12.x, r12.x, l(0.000000)
    min r12.x, r12.x, l(1.000000)  // fDotLH<0:[0f,1f]>

#line 21
    mul r12.y, r8.w, r8.w  // fAlphaSqr<0:NaN:Inf>
    mul r12.z, r12.w, r12.w
    add r12.w, r12.y, l(-1.000000)
    mul r12.z, r12.w, r12.z
    add r12.z, r12.z, l(1.000000)  // fDenom<0:NaN:Inf>
    mul r12.w, r12.z, l(3.141590)
    mul r12.z, r12.z, r12.w
    div r12.y, r12.y, r12.z  // fD<0:NaN:Inf>

#line 27
    mov r12.x, -r12.x
    add r12.x, r12.x, l(1.000000)
    mul r12.z, r12.x, l(1.000000)
    mul r12.x, r12.x, r12.x
    mul r12.x, r12.x, r12.x
    mul r12.x, r12.x, r12.z  // fDotLH5<0:[0f,1f]>
    mov r12.z, -r9.w
    add r12.z, r12.z, l(1.000000)
    mul r12.x, r12.x, r12.z
    add r9.w, r9.w, r12.x  // fF<0:Inf>

#line 31
    div r8.w, r8.w, l(2.000000)  // fK<0:Inf:[0f,1.#INFf]>
    nop 
    mov r10.w, r10.w  // fDotNV<0:[0f,1f]>
    mov r8.w, r8.w  // fK<0:Inf:[0f,1.#INFf]>

#line 3
    mov r12.x, -r8.w
    add r12.x, r12.x, l(1.000000)
    mul r12.z, r10.w, r12.x
    add r12.z, r8.w, r12.z
    div r12.z, l(1.000000), r12.z  // G1V<0:NaN:Inf>

#line 32
    nop 
    mov r11.w, r11.w  // fDotNV<0:[0f,1f]>

#line 3
    mul r11.w, r12.x, r11.w
    add r8.w, r8.w, r11.w
    div r8.w, l(1.000000), r8.w  // G1V<0:NaN:Inf>

#line 32
    mul r8.w, r8.w, r12.z  // fVis<0:NaN:Inf>
    mul r10.w, r12.y, r10.w
    mul r9.w, r9.w, r10.w
    mul r8.w, r8.w, r9.w  // fSpecular<0:NaN:Inf>
    mov r8.w, r8.w  // fLightingFuncGGX<0:NaN:Inf>

#line 310 "lightingconstants.h"
    mov r8.w, r8.w  // fSpecMul<0:NaN:Inf>
    mul r12.xyz, r8.wwww, r17.xyzx
    mul r12.xyz, r5.wwww, r12.xyzx
    mul r12.xyz, r7.wwww, r12.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 317
    ine r5.w, l(0, 0, 0, 0), cb5[6].z
    if_nz r5.w
      mul r14.xyz, r16.xyzx, r12.xyzx
      mul r14.xyz, r14.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 
      ine r5.w, l(0, 0, 0, 0), cb5[5].z
      if_nz r5.w
        mul r17.xyz, r15.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
        mul r18.xyz, r16.xyzx, r12.xyzx
        mul r14.xyz, r17.xyzx, r18.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      else 

#line 322
        mul r15.xyz, r15.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
        mul r12.xyz, r16.xyzx, r12.xyzx
        mul r14.xyz, r12.xyzx, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 319
      endif 
    endif 

#line 331
    mul r12.xyz, r16.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r14.xyz, r14.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 291
  else 
    mov r12.xyz, l(0,0,0,0)  // f3LightColorDiffuseResult<0: 0f,1: 0f,2: 0f>
    mov r14.xyz, l(0,0,0,0)  // f3LightColorSpecularResult<0: 0f,1: 0f,2: 0f>
  endif 

#line 455 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
  mov r12.xyz, r12.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r14.xyz, r14.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 461
  ine r5.w, l(0, 0, 0, 0), cb5[8].z
  if_nz r5.w
    ld_indexable(buffer)(float,float,float,float) r15.xyz, r4.wwww, t5.xyzw  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf,3:Inf>
    ld_indexable(buffer)(float,float,float,float) r16.xyz, r4.wwww, t6.xyzw  // f3LightCol<0:Inf,1:Inf,2:Inf>
    mov r17.xyz, r3.yzwy  // f4TexColor<0:Inf,1:Inf,2:Inf>
    dp3 r4.w, r9.xyzx, r9.xyzx
    sqrt r4.w, r4.w  // fThickValue<0:NaN:Inf>
    nop 
    mov r15.xyz, r15.xyzx  // f4CenterAndRadius<0:Inf,1:Inf,2:Inf>
    mov r16.xyz, r16.xyzx  // f3LightColor<0:Inf,1:Inf,2:Inf>
    mov r17.xyz, r17.xyzx  // float4TexColor<0:Inf,1:Inf,2:Inf>
    mov r4.w, r4.w  // fThickValue<0:NaN:Inf>
    mov r18.xy, cb5[3].xzxx  // f4SSSBRDFParams<0,2>
    mov r19.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r20.xyzw, v6.xyzw  // f4VertexPos<0,1,2,3>
    mov r21.xyz, v5.xyzx  // f3CamPos<0,1,2>
    mov r14.xyz, r14.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r12.xyz, r12.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 155 "constant.h"
    mov r18.x, r18.x  // fMaterialThickness<0>
    mov r18.y, r18.y  // fRimScalar<0>
    mov r19.x, r19.x  // fExtinctionCoefficientRed<0>
    mov r19.y, r19.y  // fExtinctionCoefficientGreen<0>
    mov r19.z, r19.z  // fExtinctionCoefficientBlue<0>
    mov r14.xyz, r14.xyzx  // f3SpecColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r17.xyz, r17.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 168
    mov r22.xyz, -r20.xyzx
    add r21.xyz, r21.xyzx, r22.xyzx
    dp3 r5.w, r21.xyzx, r21.xyzx
    rsq r5.w, r5.w
    mul r21.xyz, r5.wwww, r21.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r22.xyz, -r21.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r15.xyz, r15.xyzx  // f4LightPos<0:Inf,1:Inf,2:Inf>
    mov r15.w, l(1.000000)  // f4LightPos<3: 1f>
    mov r20.xyzw, -r20.xyzw
    add r15.xyzw, r15.xyzw, r20.xyzw
    dp4 r5.w, r15.xyzw, r15.xyzw
    sqrt r5.w, r5.w
    div r5.w, l(1.000000), r5.w
    mul r5.w, r5.w, l(10.000000)  // fAttenuation<0:NaN:Inf>

#line 176
    nop 
    mov r22.xyz, r22.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r15.xyz, r13.xyzx  // f3Vec2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 138
    dp3 r7.w, r22.xyzx, r15.xyzx  // fProduct<0:NaN:Inf>
    mul r7.w, r7.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r7.w, r7.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r7.w, r7.w  // HalfLambert<0:NaN:Inf>

#line 176
    mul r20.xyz, r5.wwww, r7.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r23.xyz, -r13.xyzx
    dp3 r7.w, r23.xyzx, r22.xyzx
    max r7.w, r7.w, l(0.000000)
    mul r23.xyz, r7.wwww, r18.xxxx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 138
    dp3 r7.w, r22.xyzx, r22.xyzx  // fProduct<0:NaN:Inf>
    mul r7.w, r7.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r7.w, r7.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r7.w, r7.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r7.w, r18.x, r7.w
    add r23.xyz, r7.wwww, r23.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r23.xyz, r5.wwww, r23.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r24.x, r19.x, r23.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r24.y, r19.y, r23.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r24.z, r19.z, r23.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r19.xyz, r4.wwww, r24.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r4.w, r13.xyzx, r21.xyzx
    max r4.w, r4.w, l(0.000000)
    mov r7.w, -r4.w
    add r21.xyz, r7.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)  // f3Rim<0:Inf:[-1.#INFf,1f],1:Inf:[-1.#INFf,1f],2:Inf:[-1.#INFf,1f]>
    mul r21.xyz, r21.xyzx, r21.xyzx  // f3Rim<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r7.w, r13.xyzx, r22.xyzx
    max r7.w, r7.w, l(0.000000)
    mul r13.xyz, r14.xyzx, r7.wwww
    mul r13.xyz, r13.xyzx, r21.xyzx  // f3Rim<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 190
    mul r17.xyz, r17.xyzx, r20.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r17.xyz, r19.xyzx, r17.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r13.xyz, r18.yyyy, r13.xyzx
    mul r13.xyz, r5.wwww, r13.xyzx
    mul r13.xyz, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r13.xyz, r13.xyzx, r17.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 146
    add r17.xyz, r22.xyzx, r15.xyzx
    dp3 r7.w, r17.xyzx, r17.xyzx
    rsq r7.w, r7.w
    mul r17.xyz, r7.wwww, r17.xyzx  // f3HalfAngle<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r7.w, r15.xyzx, r17.xyzx
    max r7.w, r7.w, l(0.000000)
    min r7.w, r7.w, l(1.000000)
    mul r7.w, r7.w, l(1.000000)  // BlinnPhongSpec<0:[0f,1f]>

#line 195
    mul r5.w, r5.w, r7.w
    mul r15.xyz, r14.xyzx, r5.wwww
    mul r15.xyz, r15.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r15.xyz, r15.xyzx, l(0.050000, 0.050000, 0.050000, 0.000000)
    add r13.xyz, r13.xyzx, r15.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r13.xyz, r16.xyzx, r13.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    lt r4.w, r4.w, l(0.800000)
    lt r5.w, l(2.000000), r18.x
    and r4.w, r4.w, r5.w
    if_nz r4.w
      div r15.xyz, r19.xyzx, l(15.000000, 15.000000, 15.000000, 0.000000)
      mul r12.xyz, r12.xyzx, r15.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      mul r14.xyz, r14.xyzx, r15.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    else 

#line 207
      mul r12.xyz, r12.xyzx, r13.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
      mul r14.xyz, r13.xyzx, r14.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    endif 

#line 470 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
    mov r14.xyz, r14.xyzx  // f3LightColorSpecularResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r12.xyz, r12.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 461
  endif 

#line 475
  add r2.xyz, r2.xyzx, r12.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  add r8.xyz, r8.xyzx, r14.xyzx  // f3AccumSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 444
  iadd r2.w, r2.w, l(1)  // i<0>
endloop 

#line 485
nop 
mov r0.w, cb2[25].y  // uMaxNumLightsPerTile<0>
mov r1.z, cb2[25].z  // uMaxNumElementsPerTile<0>

#line 119 "constant.h"
nop 
imul null, r2.w, r1.z, r1.w  // nStartIndex<0>

#line 123
ld_indexable(buffer)(uint,uint,uint,uint) r2.w, r2.wwww, t11.yzwx
mov r2.w, r2.w  // uHalfZBitsHigh<0>
imad r4.x, r1.z, r1.w, l(1)
ld_indexable(buffer)(uint,uint,uint,uint) r4.x, r4.xxxx, t11.xyzw
mov r4.x, r4.x  // uHalfZBitsLow<0>
ishl r2.w, r2.w, l(16)
or r2.w, r4.x, r2.w  // uHalfZBits<0>
mov r2.w, r2.w  // fHalfZ<0:NaN:Inf>
nop 
lt r2.w, r6.w, r2.w
imad r4.x, r1.z, r1.w, l(4)
iadd r0.w, r4.x, r0.w
movc r0.w, r2.w, r4.x, r0.w  // uFirstLightIndex<0>
imad r4.x, r1.z, r1.w, l(2)
ld_indexable(buffer)(uint,uint,uint,uint) r4.x, r4.xxxx, t11.xyzw
imad r1.z, r1.z, r1.w, l(3)
ld_indexable(buffer)(uint,uint,uint,uint) r1.z, r1.zzzz, t11.yzxw
movc r1.z, r2.w, r4.x, r1.z  // uNumLights<0>

#line 485 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
mov r0.w, r0.w  // uStartIndex<0>
mov r1.z, r1.z  // uLightCount<0>

#line 489
mov r0.w, r0.w  // i<0>
mov r4.xyz, r2.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov r1.w, r0.w  // i<0>
loop 
  iadd r2.w, r0.w, r1.z
  ult r2.w, r1.w, r2.w
  breakc_z r2.w
  ld_indexable(buffer)(uint,uint,uint,uint) r2.w, r1.wwww, t11.yzwx
  mov r2.w, r2.w  // uLightIndex<0>

#line 495
  nop 
  mov r2.w, r2.w  // uLightIndex<0>
  mov r5.xyz, r0.xyzx  // f3Position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r10.xyz, r6.xyzx  // f3Norm<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 340 "lightingconstants.h"
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r11.x, r2.w, l(0), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r11.y, r2.w, l(4), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r11.z, r2.w, l(8), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r4.w, r2.w, l(12), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
  mov r11.x, r11.x  // f4CenterAndRadius<0>
  mov r11.y, r11.y  // f4CenterAndRadius<1>
  mov r11.z, r11.z  // f4CenterAndRadius<2>
  mov r4.w, r4.w  // f4CenterAndRadius<3>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r12.x, r2.w, l(0), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r12.y, r2.w, l(4), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r12.z, r2.w, l(8), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.x, r2.w, l(16), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.y, r2.w, l(20), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r13.z, r2.w, l(24), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r14.x, r2.w, l(32), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r14.y, r2.w, l(36), t10.xxxx  // g_VPLDataBuffer<0>
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r14.z, r2.w, l(40), t10.xxxx  // g_VPLDataBuffer<0>
  mov r12.x, r12.x  // data<0>
  mov r12.y, r12.y  // data<1>
  mov r12.z, r12.z  // data<2>
  mov r13.x, r13.x  // data<4>
  mov r13.y, r13.y  // data<5>
  mov r13.z, r13.z  // data<6>
  mov r14.x, r14.x  // data<8>
  mov r14.y, r14.y  // data<9>
  mov r14.z, r14.z  // data<10>
  mov r5.xyz, -r5.xyzx
  add r5.xyz, r5.xyzx, r11.xyzx  // f3ToLight<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r5.w, r5.xyzx, r5.xyzx
  rsq r6.w, r5.w
  mul r5.xyz, r5.xyzx, r6.wwww  // f3LightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sqrt r5.w, r5.w  // fLightDistance<0:NaN:Inf>

#line 349
  mov r4.w, r4.w  // fRad<0>
  mov r11.xyz, -r5.xyzx
  dp3 r6.w, r12.xyzx, r11.xyzx
  max r6.w, r6.w, l(0.000000)  // fVPLNormalDotDir<0:Inf:[-0f,1.#INFf]>
  lt r7.w, r5.w, r4.w
  lt r8.w, l(0.000000), r6.w
  and r7.w, r7.w, r8.w
  if_nz r7.w
    mov r13.xyz, r13.xyzx  // f3LightColor<0,1,2>
    div r4.w, r5.w, r4.w  // fx<0:NaN:Inf>
    add r4.w, r4.w, l(-1.000000)
    mul r4.w, r4.w, l(-1.000000)
    max r4.w, r4.w, l(0.000000)
    min r4.w, r4.w, l(1.000000)
    mul r5.w, r4.w, l(-2.000000)
    add r5.w, r5.w, l(3.000000)
    mul r4.w, r4.w, r4.w
    mul r4.w, r4.w, r5.w  // fFallOff<0:[0f,3f]>
    dp3 r5.w, r14.xyzx, r10.xyzx  // fSourceLightDotL<0:NaN:Inf>

#line 360
    lt r7.w, r5.w, l(0.000000)
    if_nz r7.w
      div r5.w, r5.w, cb2[26].w
      add r5.w, r5.w, l(1.000000)  // fSourceLightDotL<0:NaN:Inf>
    else 

#line 366
      mov r5.w, l(1.000000)  // fSourceLightDotL<0: 1f>

#line 360
    endif 

#line 369
    dp3 r5.x, r5.xyzx, r10.xyzx
    max r5.x, r5.x, l(0.000000)
    min r5.x, r5.x, l(1.000000)
    mul r5.xyz, r5.xxxx, r13.xyzx
    mul r5.xyz, r4.wwww, r5.xyzx
    mul r5.xyz, r6.wwww, r5.xyzx
    mul r5.xyz, r5.wwww, r5.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 352
  else 
    mov r5.xyz, l(0,0,0,0)  // f3LightColorDiffuseResult<0: 0f,1: 0f,2: 0f>
  endif 

#line 495 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
  mov r5.xyz, r5.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 500
  ine r4.w, l(0, 0, 0, 0), cb5[8].z
  if_nz r4.w
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r11.x, r2.w, l(0), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r11.y, r2.w, l(4), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r11.z, r2.w, l(8), t9.xxxx  // g_VPLCenterAndRadiusBuffer<0>
    mov r11.x, r11.x  // f4CenterAndRadius<0>
    mov r11.y, r11.y  // f4CenterAndRadius<1>
    mov r11.z, r11.z  // f4CenterAndRadius<2>
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r12.x, r2.w, l(16), t10.xxxx  // g_VPLDataBuffer<0>
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r12.y, r2.w, l(20), t10.xxxx  // g_VPLDataBuffer<0>
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r12.z, r2.w, l(24), t10.xxxx  // g_VPLDataBuffer<0>
    mov r12.x, r12.x  // f3LightCol<0>
    mov r12.y, r12.y  // f3LightCol<1>
    mov r12.z, r12.z  // f3LightCol<2>
    mov r13.xyz, r3.yzwy  // f4TexColor<0:Inf,1:Inf,2:Inf>
    dp3 r2.w, r9.xyzx, r9.xyzx
    sqrt r2.w, r2.w  // fThickValue<0:NaN:Inf>
    nop 
    mov r11.xyz, r11.xyzx  // f4CenterAndRadius<0,1,2>
    mov r12.xyz, r12.xyzx  // f3LightColor<0,1,2>
    mov r13.xyz, r13.xyzx  // float4TexColor<0:Inf,1:Inf,2:Inf>
    mov r2.w, r2.w  // fThickValue<0:NaN:Inf>
    mov r4.w, cb5[3].x  // f4SSSBRDFParams<0>
    mov r14.xyz, cb5[2].xyzx  // f4ColorSSS<0,1,2>
    mov r15.xyzw, v6.xyzw  // f4VertexPos<0,1,2,3>
    mov r16.xyz, v5.xyzx  // f3CamPos<0,1,2>
    mov r5.xyz, r5.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 155 "constant.h"
    mov r4.w, r4.w  // fMaterialThickness<0>
    mov r14.x, r14.x  // fExtinctionCoefficientRed<0>
    mov r14.y, r14.y  // fExtinctionCoefficientGreen<0>
    mov r14.z, r14.z  // fExtinctionCoefficientBlue<0>

#line 162
    mov r13.xyz, r13.xyzx  // f4TexColor<0:Inf,1:Inf,2:Inf>

#line 168
    mov r17.xyz, -r15.xyzx
    add r16.xyz, r16.xyzx, r17.xyzx
    dp3 r5.w, r16.xyzx, r16.xyzx
    rsq r5.w, r5.w
    mul r16.xyz, r5.wwww, r16.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r17.xyz, -r16.xyzx  // f3LightDirSSS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r11.xyz, r11.xyzx  // f4LightPos<0,1,2>
    mov r11.w, l(1.000000)  // f4LightPos<3: 1f>
    mov r15.xyzw, -r15.xyzw
    add r11.xyzw, r11.xyzw, r15.xyzw
    dp4 r5.w, r11.xyzw, r11.xyzw
    sqrt r5.w, r5.w
    div r5.w, l(1.000000), r5.w
    mul r5.w, r5.w, l(10.000000)  // fAttenuation<0:NaN:Inf>

#line 176
    nop 
    mov r17.xyz, r17.xyzx  // f3Vec1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r11.xyz, r10.xyzx  // f3Vec2<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 138
    dp3 r6.w, r17.xyzx, r11.xyzx  // fProduct<0:NaN:Inf>
    mul r6.w, r6.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r6.w, r6.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r6.w, r6.w  // HalfLambert<0:NaN:Inf>

#line 176
    mul r11.xyz, r5.wwww, r6.wwww  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r15.xyz, -r10.xyzx
    dp3 r6.w, r15.xyzx, r17.xyzx
    max r6.w, r6.w, l(0.000000)
    mul r15.xyz, r4.wwww, r6.wwww  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 

#line 138
    dp3 r6.w, r17.xyzx, r17.xyzx  // fProduct<0:NaN:Inf>
    mul r6.w, r6.w, l(0.500000)  // fProduct<0:NaN:Inf>
    add r6.w, r6.w, l(0.500000)  // fProduct<0:NaN:Inf>
    mov r6.w, r6.w  // HalfLambert<0:NaN:Inf>

#line 179
    mul r6.w, r4.w, r6.w
    add r15.xyz, r6.wwww, r15.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r15.xyz, r5.wwww, r15.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r17.x, r14.x, r15.x  // f3IndirectLightComponent<0:NaN:Inf>
    mul r17.y, r14.y, r15.y  // f3IndirectLightComponent<1:NaN:Inf>
    mul r17.z, r14.z, r15.z  // f3IndirectLightComponent<2:NaN:Inf>
    mul r14.xyz, r2.wwww, r17.xyzx  // f3IndirectLightComponent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 190
    mul r11.xyz, r13.xyzx, r11.xyzx  // f4DotLN<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r11.xyz, r14.xyzx, r11.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    add r11.xyz, r11.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    nop 
    add r11.xyz, r11.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mul r11.xyz, r12.xyzx, r11.xyzx  // f4FinColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    dp3 r2.w, r16.xyzx, r10.xyzx
    max r2.w, r2.w, l(0.000000)  // fEdge<0:Inf:[-0f,1.#INFf]>
    lt r2.w, r2.w, l(0.800000)
    lt r4.w, l(2.000000), r4.w
    and r2.w, r2.w, r4.w
    if_nz r2.w

#line 202
      div r10.xyz, r14.xyzx, l(15.000000, 15.000000, 15.000000, 0.000000)
      mul r5.xyz, r5.xyzx, r10.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 

#line 207
      mul r5.xyz, r5.xyzx, r11.xyzx  // f3LightDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
    endif 

#line 509 "\\?\C:\Users\admin\Documents\Visual Studio 2010\Projects\Vektoria_2015-02-12a\Vektoria\trunk\VektoriaApp\shaders\Source\forwardShading.hlsl"
    mov r5.xyz, r5.xyzx  // f3LightColorDiffuseResult<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 500
  endif 

#line 515
  add r4.xyz, r4.xyzx, r5.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 489
  iadd r1.w, r1.w, l(1)  // i<0>
endloop 

#line 520
mul r0.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mul r2.xyz, r8.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)  // f3AccumSpecular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 526
ine r0.w, l(0, 0, 0, 0), cb5[4].y
if_nz r0.w

#line 529
  ine r0.w, l(0, 0, 0, 0), cb5[7].y
  if_nz r0.w
    mov r4.xyz, r7.xyzx  // f4Glow<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  else 

#line 533
    ine r0.w, l(0, 0, 0, 0), cb5[5].y
    if_nz r0.w
      mov r5.xyz, -r7.xyzx
      add r5.xyz, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      max r5.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r5.xyz, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r4.xyz, r3.yzwy, r5.xyzx  // f4Glow<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    else 

#line 536
      sample_indexable(texture2d)(float,float,float,float) r5.xyz, r1.xyxx, t16.xyzw, s0
      mov r8.xyz, -r7.xyzx
      add r8.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      max r8.xyz, r8.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
      min r8.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r4.xyz, r5.xyzx, r8.xyzx  // f4Glow<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 533
    endif 

#line 529
  endif 

#line 526
else 

#line 540
  mov r4.xyz, l(0,0,0,0)  // f4Glow<0: 0f,1: 0f,2: 0f>

#line 526
endif 

#line 544
mul r4.xyz, r4.xyzx, l(0.750000, 0.750000, 0.750000, 0.000000)
add r0.xyz, r0.xyzx, r4.xyzx  // f3AccumDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
add r0.xyz, r7.xyzx, r0.xyzx  // f3DiffuseAndAmbient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
ine r0.w, l(0, 0, 0, 0), cb5[7].x
if_nz r0.w
  mul r2.xyz, r3.xxxx, r2.xyzx
  add r0.xyz, r0.xyzx, r2.xyzx
  mul r3.yzw, r0.xxyz, r3.yyzw  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r3.x, l(1.000000)  // f4ColorOut<3: 1f>
else 

#line 553
  mov r3.x, l(1.000000)  // f4ColorOut<3: 1f>
  mov r3.yzw, r3.yyzw  // f4ColorOut<0:Inf,1:Inf,2:Inf>

#line 547
endif 

#line 561
ine r0.x, l(0, 0, 0, 0), cb5[7].w
if_nz r0.x
  mov r0.xyz, -v6.xyzx
  add r0.xyz, r0.xyzx, v5.xyzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r0.xyz, r0.wwww, r0.xyzx  // f3EyeVector<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  dp3 r0.z, r0.xyzx, r6.xyzx
  add r0.w, r0.z, r0.z
  mov r0.w, -r0.w
  mul r1.zw, r0.wwww, r6.xxxy
  add r1.zw, r0.xxxy, r1.zzzw  // f3Reflection<0:NaN:Inf,1:NaN:Inf>
  mul r0.w, r0.z, r0.z
  mov r0.w, -r0.w
  add r0.w, r0.w, l(1.000000)
  mul r0.w, r0.w, l(0.980100)
  mov r0.w, -r0.w
  add r0.w, r0.w, l(1.000000)
  sqrt r2.x, r0.w
  mul r0.z, r0.z, l(0.990000)
  add r0.z, r2.x, r0.z
  ge r0.w, r0.w, l(0.000000)
  mul r0.xy, r0.xyxx, l(0.990000, 0.990000, 0.000000, 0.000000)
  mul r2.xy, r6.xyxx, r0.zzzz
  mov r2.xy, -r2.xyxx
  add r0.xy, r0.xyxx, r2.xyxx
  movc r0.xy, r0.wwww, r0.xyxx, l(0,0,0,0)  // f3Refraction<0:NaN:Inf,1:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t19.xyzw, s0  // f4RefrColor<0:Inf,1:Inf,2:Inf,3:Inf>
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.zwzz, t19.xyzw, s0  // f4ReflColor<0:Inf,1:Inf,2:Inf,3:Inf>
  ine r1.z, l(0, 0, 0, 0), cb5[8].w
  if_nz r1.z
    sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t19.wxyz, s0  // fReflectionFactor<0:Inf>

#line 572
    mov r4.xyzw, -r0.xyzw
    add r4.xyzw, r2.xyzw, r4.xyzw
    mul r4.xyzw, r4.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
    add r4.xyzw, r0.xyzw, r4.xyzw
    div r4.xyzw, r4.xyzw, cb5[2].wwww
    mul r1.xyzw, r1.xxxx, r4.xyzw
    dp3 r4.x, r3.yzwy, r3.yzwy
    sqrt r4.x, r4.x
    mul r4.x, r4.x, r4.x
    mul r1.xyzw, r1.xyzw, r4.xxxx
    add r3.xyzw, r1.wxyz, r3.xyzw  // f4ColorOut<3:NaN:Inf,0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 569
  else 

#line 576
    mov r1.xyzw, -r0.xyzw
    add r1.xyzw, r1.xyzw, r2.xyzw
    mul r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
    add r0.xyzw, r0.xyzw, r1.xyzw
    div r0.xyzw, r0.xyzw, cb5[2].wwww
    dp3 r1.x, r3.yzwy, r3.yzwy
    sqrt r1.x, r1.x
    mul r1.x, r1.x, r1.x
    mul r0.xyzw, r0.xyzw, r1.xxxx
    add r3.xyzw, r0.wxyz, r3.xyzw  // f4ColorOut<3:NaN:Inf,0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 569
  endif 

#line 561
endif 

#line 582
ine r0.x, l(0, 0, 0, 0), cb6[6].y
if_nz r0.x
  mul r3.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)  // f4ColorOut<3:NaN:Inf,0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
endif 

#line 587
ine r0.x, l(0, 0, 0, 0), cb6[6].w
if_nz r0.x
  mov r0.xyz, -v6.xyzx
  add r0.xyz, r0.xyzx, v5.xyzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r0.xyz, r0.wwww, r0.xyzx
  dp3 r0.x, r0.xyzx, r6.xyzx
  max r0.x, r0.x, l(0.000000)  // fEdge<0:Inf:[-0f,1.#INFf]>
  lt r0.x, r0.x, cb6[0].w
  if_nz r0.x
    mov r3.yzw, cb6[0].xxyz  // f4ColorOut<0,1,2>
  endif 

#line 587
endif 

#line 597
ine r0.x, l(0, 0, 0, 0), cb6[7].z
if_nz r0.x
  mov r0.xyz, -v6.xyzx
  add r0.xyz, r0.xyzx, v5.xyzx
  dp3 r0.x, r0.xyzx, r0.xyzx
  sqrt r0.x, r0.x
  div r0.x, r0.x, cb6[1].w
  add r3.yzw, r0.xxxx, r3.yyzw  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
endif 

#line 604
ine r0.x, l(0, 0, 0, 0), cb6[6].x
if_nz r0.x
  dp4 r0.x, r3.yzwx, cb6[2].xyzw  // f4ColorOut<0:NaN:Inf>
  dp4 r0.y, r3.yzwx, cb6[3].xyzw  // f4ColorOut<1:NaN:Inf>
  dp4 r0.z, r3.yzwx, cb6[4].xyzw  // f4ColorOut<2:NaN:Inf>
  dp4 r0.w, r3.yzwx, cb6[5].xyzw  // f4ColorOut<3:NaN:Inf>
  mov r3.xyzw, r0.wxyz  // f4ColorOut<3:NaN:Inf,0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
endif 

#line 616
mov o0.xyzw, r3.yzwx  // RenderScenePS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
ret 
// Approximately 1367 instruction slots used
