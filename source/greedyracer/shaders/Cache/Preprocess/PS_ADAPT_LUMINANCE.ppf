#line 1 "\\\\?\\C:\\Users\\admin\\Documents\\Visual Studio 2010\\Projects\\Vektoria_2015-02-12a\\Vektoria\\trunk\\VektoriaApp\\shaders\\source\\BloomPost.hlsl"


#line 1 "postconstants.h"

SamplerState linearSampler : register ( s1 ) ; 
SamplerState pointSampler : register ( s2 ) ; 

cbuffer ObjectInfo : register ( b0 ) 
{ 
    matrix World ; 
} 

cbuffer TexInfo : register ( b7 ) 
{ 
    float4 f4ColorEffect : packoffset ( c0 ) ; 
    float fBlurStrength : packoffset ( c1 . x ) ; 
    uint uBlur : packoffset ( c1 . y ) ; 
    uint uEnhancedEdges : packoffset ( c1 . z ) ; 
    uint uMeanFilter : packoffset ( c1 . w ) ; 
    float fBloomOriginalIntensity : packoffset ( c2 . x ) ; 
    float fBloomIntensity : packoffset ( c2 . y ) ; 
    float fBloomOriginalSaturation : packoffset ( c2 . z ) ; 
    float fBloomSaturation : packoffset ( c2 . w ) ; 
    float fRayExposure : packoffset ( c3 . x ) ; 
    float fRayDecay : packoffset ( c3 . y ) ; 
    float fRayDensity : packoffset ( c3 . z ) ; 
    float fRayWeight : packoffset ( c3 . w ) ; 
    float fTimeDelta : packoffset ( c4 . x ) ; 
    float fBloomBlurDistance : packoffset ( c4 . y ) ; 
    float fDoFFar : packoffset ( c4 . z ) ; 
    float fDoFNear : packoffset ( c4 . w ) ; 
    float2 f2RayLightPos : packoffset ( c5 . x ) ; 
    float2 f2rcpFrame : packoffset ( c5 . z ) ; 
    float4 f4rcpFrameOpt : packoffset ( c6 ) ; 
    float4 f4DoFParams : packoffset ( c7 ) ; 
} 

#line 37
float CalcLuminance ( float3 f3Color ) 
{ 
    return max ( dot ( f3Color , float3 ( 0.299f , 0.587f , 0.114f ) ) , 0.0001f ) ; 
} 

float GetAvgLuminance ( Texture2D lumTex , float2 f2TexCoord ) 
{ 
    return exp ( lumTex . SampleLevel ( linearSampler , f2TexCoord , 10 ) . x ) ; 
} 

#line 48
float3 ToneMapFilmicALU ( float3 f3Color ) 
{ 
    f3Color = max ( 0.f , f3Color - 0.004f ) ; 
    f3Color = ( f3Color * ( 6.2f * f3Color + .5f ) ) / ( f3Color * ( 6.2f * f3Color + 1.7f ) + 0.06f ) ; 
    
#line 54
    return pow ( f3Color , 2.2f ) ; 
} 

#line 58
float3 ToneMapReinhard ( float3 f3Color , float fSaturation ) 
{ 
    float fPixelLuminance = CalcLuminance ( f3Color ) ; 
    float fToneMappedLuminance = fPixelLuminance / ( fPixelLuminance + 1.f ) ; 
    return fToneMappedLuminance * pow ( f3Color / fPixelLuminance , fSaturation ) ; 
} 

float3 CalcExposedColor ( float3 f3Color , float fAvgLuminance , float fThreshold , out float fExposure ) 
{ 
    fAvgLuminance = max ( fAvgLuminance , 0.0001f ) ; 
    float fKeyVal = 1.f ; 
    float fLinearExposure = ( fKeyVal / fAvgLuminance ) ; 
    fExposure = log2 ( max ( fLinearExposure , 0.0001f ) ) ; 
    fExposure -= fThreshold ; 
    
    return exp2 ( fExposure ) * f3Color ; 
} 

float3 ToneMap ( float3 f3Color , float fAvgLuminance , float fThreshold , float fSaturation , out float fExposure ) 
{ 
    float fPixelLuminance = CalcLuminance ( f3Color ) ; 
    fExposure = 0.f ; 
    f3Color = CalcExposedColor ( f3Color , fAvgLuminance , fThreshold , fExposure ) ; 
    f3Color = ToneMapFilmicALU ( f3Color ) ; 
    
    return f3Color ; 
} 

#line 3 "\\\\?\\C:\\Users\\admin\\Documents\\Visual Studio 2010\\Projects\\Vektoria_2015-02-12a\\Vektoria\\trunk\\VektoriaApp\\shaders\\source\\BloomPost.hlsl"
Texture2D tex2D [ 9 ] : register ( t15 ) ; 


Texture2D < float > depthTex : register ( t24 ) ; 

#line 9


Texture2D lumTex : register ( t25 ) ; 
Texture2D lumTex1 : register ( t26 ) ; 

struct VS_INPUT_BLOOM_POST 
{ 
    float4 f4Pos : POSITION ; 
    float3 f3Normal : NORMAL ; 
    float2 f2TexCoord : TEXCOORD ; 
    float3 f3Tangent : TANGENT ; 
    float3 f3Bitangent : BITANGENT ; 
} ; 

struct PS_INPUT_BLOOM_POST 
{ 
    float4 f4Pos : SV_POSITION0 ; 
    float2 f2TexCoord : TEXCOORD0 ; 
    float4 f4VertexPos : TEXCOORD2 ; 
} ; 

PS_INPUT_BLOOM_POST VS_BLOOMTEXTURE ( VS_INPUT_BLOOM_POST input ) 
{ 
    PS_INPUT_BLOOM_POST output = ( PS_INPUT_BLOOM_POST ) 0 ; 
    output . f2TexCoord = input . f2TexCoord ; 
    
    output . f4Pos = mul ( input . f4Pos , World ) ; 
    
    return output ; 
} 

PS_INPUT_BLOOM_POST VS_BLOOMBLUR ( VS_INPUT_BLOOM_POST input ) 
{ 
    PS_INPUT_BLOOM_POST output = ( PS_INPUT_BLOOM_POST ) 0 ; 
    output . f2TexCoord = input . f2TexCoord ; 
    
    output . f4Pos = mul ( input . f4Pos , World ) ; 
    
    return output ; 
} 

PS_INPUT_BLOOM_POST VS_BLOOMACCUM ( VS_INPUT_BLOOM_POST input ) 
{ 
    PS_INPUT_BLOOM_POST output = ( PS_INPUT_BLOOM_POST ) 0 ; 
    output . f2TexCoord = input . f2TexCoord ; 
    
    output . f4Pos = mul ( input . f4Pos , World ) ; 
    
    return output ; 
} 

float4 PS_BLOOMTEXTURE ( PS_INPUT_BLOOM_POST input ) : SV_TARGET 
{ 
    float4 f4ColorOut = tex2D [ 7 ] . Sample ( linearSampler , input . f2TexCoord ) ; 
    float fThreshold = 0.6f ; 
    
    return saturate ( ( f4ColorOut - fThreshold ) / ( 1.f - fThreshold ) ) ; 
} 

float4 PS_BLOOMBLUR ( PS_INPUT_BLOOM_POST input ) : SV_TARGET 
{ 
    float fBlurDistance = 0.0015f ; 
    float4 f4ColorOut = tex2D [ 8 ] . Sample ( linearSampler , float2 ( input . f2TexCoord . x + fBlurDistance , 
    input . f2TexCoord . y + fBlurDistance ) ) ; 
    f4ColorOut += tex2D [ 8 ] . Sample ( linearSampler , float2 ( input . f2TexCoord . x - fBlurDistance , 
    input . f2TexCoord . y - fBlurDistance ) ) ; 
    f4ColorOut += tex2D [ 8 ] . Sample ( linearSampler , float2 ( input . f2TexCoord . x + fBlurDistance , 
    input . f2TexCoord . y - fBlurDistance ) ) ; 
    f4ColorOut += tex2D [ 8 ] . Sample ( linearSampler , float2 ( input . f2TexCoord . x - fBlurDistance , 
    input . f2TexCoord . y + fBlurDistance ) ) ; 
    
    f4ColorOut *= 0.25 ; 
    return f4ColorOut ; 
} 

float4 AdjustSaturationO ( float4 f4Color , float fSaturation , float2 f2TexCoord ) 
{ 
    float fGrey = max ( dot ( f4Color . xyz , float3 ( 0.299f , 0.587f , 0.114f ) ) , 0.0001f ) ; 
    
    return lerp ( fGrey , f4Color , fSaturation ) ; 
} 

float4 AdjustSaturationB ( float4 f4Color , float fSaturation ) 
{ 
    float fGrey = max ( dot ( f4Color . xyz , float3 ( 0.299f , 0.587f , 0.114f ) ) , 0.0001f ) ; 
    
    return lerp ( fGrey , f4Color , fSaturation ) ; 
} 

float4 PS_LUMINANCE ( PS_INPUT_BLOOM_POST input ) : SV_TARGET 
{ 
    float3 f3Color = tex2D [ 7 ] . Sample ( linearSampler , input . f2TexCoord ) ; 
    
    float fLuminance = CalcLuminance ( f3Color ) ; 
    
    return float4 ( fLuminance , 1.f , 1.f , 1.f ) ; 
} 

float4 PS_ADAPT_LUMINANCE ( PS_INPUT_BLOOM_POST input ) : SV_TARGET 
{ 
    float fTau = 0.25f ; 
    float fLastLum = exp ( lumTex1 . Sample ( pointSampler , input . f2TexCoord ) . x ) ; 
    float fCurrentLum = lumTex . Sample ( pointSampler , input . f2TexCoord ) . x ; 
    
    float fAdaptedLum = fLastLum + ( fCurrentLum - fLastLum ) * ( 1.f - exp ( - fTimeDelta * fTau ) ) ; 
    
    return float4 ( log ( fAdaptedLum ) , 1.f , 1.f , 1.f ) ; 
} 

float4 PS_BLOOMACCUM ( PS_INPUT_BLOOM_POST input ) : SV_TARGET 
{ 
    float fOriginalIntesity = 1.f ; 
    float fBloomIntesity = 1.3f ; 
    float fOriginalSaturation = 1.f ; 
    float fBloomSaturation = 1.3f ; 
    
    float fDepth = depthTex . Load ( int3 ( ( int2 ) input . f4Pos . xy , 0 ) ) . x ; 
    
#line 128
    
    fBloomIntesity *= ( 3 * fDepth ) ; 
    float3 f3BloomColor = tex2D [ 8 ] . Sample ( linearSampler , input . f2TexCoord ) . xyz ; 
    float3 f3OriginalColor = tex2D [ 7 ] . Sample ( linearSampler , input . f2TexCoord ) . xyz ; 
    
    float fAvgLuminance = GetAvgLuminance ( lumTex , input . f2TexCoord ) ; 
    float fExposure = 0.f ; 
    f3OriginalColor = ToneMap ( f3OriginalColor , fAvgLuminance , 0 , fOriginalSaturation , fExposure ) ; 
    
    f3BloomColor *= fBloomIntesity ; 
    
    float3 f3ColorOut = f3OriginalColor + f3BloomColor ; 
    
    return float4 ( f3ColorOut , 1.f ) ; 
    
#line 150
}  