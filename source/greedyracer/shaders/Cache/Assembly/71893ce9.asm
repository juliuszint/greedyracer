//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc /T ps_5_0 /Zi /Od /Gfp /E PS_POST /Fo
//    \\?\G:\greedyracer\source\greedyracer\Shaders\Cache\Object\Debug\PS_POST.obj
//    /Fe
//    \\?\G:\greedyracer\source\greedyracer\Shaders\Cache\Error\PS_POST.txt
//    /Fc
//    \\?\G:\greedyracer\source\greedyracer\Shaders\Cache\Assembly\71893ce9.asm
//    \\?\G:\greedyracer\source\greedyracer\Shaders\Source\postprocessing.hlsl
//
//
// Buffer Definitions: 
//
// cbuffer TexInfo
// {
//
//   float4 f4ColorEffect;              // Offset:    0 Size:    16 [unused]
//   float fBlurStrength;               // Offset:   16 Size:     4
//   uint uBlur;                        // Offset:   20 Size:     4
//   uint uEnhancedEdges;               // Offset:   24 Size:     4
//   uint uMeanFilter;                  // Offset:   28 Size:     4
//   float fBloomOriginalIntensity;     // Offset:   32 Size:     4 [unused]
//   float fBloomIntensity;             // Offset:   36 Size:     4 [unused]
//   float fBloomOriginalSaturation;    // Offset:   40 Size:     4 [unused]
//   float fBloomSaturation;            // Offset:   44 Size:     4 [unused]
//   float fRayExposure;                // Offset:   48 Size:     4 [unused]
//   float fRayDecay;                   // Offset:   52 Size:     4 [unused]
//   float fRayDensity;                 // Offset:   56 Size:     4 [unused]
//   float fRayWeight;                  // Offset:   60 Size:     4 [unused]
//   float fTimeDelta;                  // Offset:   64 Size:     4 [unused]
//   float fBloomBlurDistance;          // Offset:   68 Size:     4 [unused]
//   float fDoFFar;                     // Offset:   72 Size:     4 [unused]
//   float fDoFNear;                    // Offset:   76 Size:     4 [unused]
//   float2 f2RayLightPos;              // Offset:   80 Size:     8 [unused]
//   float2 f2rcpFrame;                 // Offset:   88 Size:     8
//   float4 f4rcpFrameOpt;              // Offset:   96 Size:    16 [unused]
//   float4 f4DoFParams;                // Offset:  112 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// linearSampler                     sampler      NA          NA    1        1
// tex2D[7]                          texture  float4          2d   22        1
// TexInfo                           cbuffer      NA          NA    7        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float       
// TEXCOORD                 0   xy          1     NONE  float   xy  
// TEXCOORD                 2   xyzw        2     NONE  float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_Target                0   xyzw        0   TARGET  float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb7[6], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t22
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 11

#line 198 "\\?\G:\greedyracer\source\greedyracer\Shaders\Source\postprocessing.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t22.xyzw, s1  // f4ColorOut<0:Inf,1:Inf,2:Inf,3:Inf>
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb7[5].z
if_nz r0.w

#line 205
  nop 
  mov r1.xy, v1.xyxx  // pos<0,1>
  mov r2.xy, cb7[5].zwzz  // rcpFrame<0,1>

#line 214 "fxaa.h"
  gather4_indexable(-1,-1,0)(texture2d)(float,float,float,float) r3.xyzw, r1.xyxx, t22.wxyz, s1.w  // luma4A<3:Inf,0:Inf,1:Inf,2:Inf>
  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r1.xyxx, t22.xyzw, s1, l(0.000000)  // rgbyM<0:Inf,1:Inf,2:Inf,3:Inf>
  gather4_indexable(texture2d)(float,float,float,float) r5.xyz, r1.xyxx, t22.zxyw, s1.w  // luma4B<2:Inf,0:Inf,1:Inf,3:Inf>
  sample_l_indexable(1,-1,0)(texture2d)(float,float,float,float) r0.w, r1.xyxx, t22.xyzw, s1, l(0.000000)  // lumaNE<0:Inf>
  sample_l_indexable(-1,1,0)(texture2d)(float,float,float,float) r1.z, r1.xyxx, t22.xywz, s1, l(0.000000)  // lumaSW<0:Inf>
  mov r3.x, r3.x  // lumaNW<0:Inf>
  mov r3.w, r3.w  // lumaN<0:Inf>
  mov r3.y, r3.y  // lumaW<0:Inf>
  mov r3.z, r3.z  // lumaM<0:Inf>

#line 225
  mov r5.x, r5.x  // lumaE<0:Inf>
  mov r5.y, r5.y  // lumaS<0:Inf>
  mov r5.z, r5.z  // lumaSE<0:Inf>

#line 237
  min r1.w, r3.y, r3.w
  min r2.w, r5.x, r5.y
  min r1.w, r1.w, r2.w
  min r1.w, r1.w, r3.z  // rangeMin<0:Inf>
  max r2.w, r3.y, r3.w
  max r4.w, r5.x, r5.y
  max r2.w, r2.w, r4.w
  max r2.w, r2.w, r3.z  // rangeMax<0:Inf>
  mov r1.w, -r1.w
  add r1.w, r1.w, r2.w  // range<0:NaN:Inf>
  mul r2.w, r2.w, l(0.166667)
  max r2.w, r2.w, l(0.041667)
  lt r2.w, r1.w, r2.w
  if_nz r2.w

#line 245
    mov r4.xyz, r4.xyzx  // FxaaPixelShader<0:Inf,1:Inf,2:Inf>

#line 241
  endif 

#line 257
  if_z r2.w
    add r2.w, r3.y, r3.w
    add r2.w, r5.x, r2.w
    add r2.w, r5.y, r2.w
    mul r2.w, r2.w, l(0.250000)  // lumaL<0:NaN:Inf>
    mov r4.w, -r3.z
    add r5.w, r2.w, r4.w
    mov r6.x, -r5.w
    max r5.w, r5.w, r6.x  // rangeL<0:NaN:Inf>
    div r1.w, r5.w, r1.w
    add r1.w, r1.w, l(-0.125000)
    max r1.w, r1.w, l(0.000000)
    min r1.w, r1.w, l(1.000000)
    mul r1.w, r1.w, l(1.142857)  // blendL<0:[0f,1.14286f]>
    min r1.w, r1.w, l(0.750000)  // blendL<0:[0f,0.75f]>

#line 265
    mul r5.w, r3.w, l(-2.000000)
    add r5.w, r3.x, r5.w
    add r5.w, r0.w, r5.w
    mov r6.x, -r5.w
    max r5.w, r5.w, r6.x
    mul r6.x, r3.z, l(-2.000000)
    add r6.y, r3.y, r6.x
    add r6.y, r5.x, r6.y
    mov r6.z, -r6.y
    max r6.y, r6.z, r6.y
    mul r6.y, r6.y, l(2.000000)
    add r5.w, r5.w, r6.y
    mul r6.y, r5.y, l(-2.000000)
    add r6.y, r1.z, r6.y
    add r6.y, r5.z, r6.y
    mov r6.z, -r6.y
    max r6.y, r6.z, r6.y
    add r5.w, r5.w, r6.y  // edgeVert<0:NaN:Inf>

#line 269
    mul r6.y, r3.y, l(-2.000000)
    add r3.x, r3.x, r6.y
    add r1.z, r1.z, r3.x
    mov r3.x, -r1.z
    max r1.z, r1.z, r3.x
    add r3.x, r3.w, r6.x
    add r3.x, r5.y, r3.x
    mov r6.x, -r3.x
    max r3.x, r3.x, r6.x
    mul r3.x, r3.x, l(2.000000)
    add r1.z, r1.z, r3.x
    mul r3.x, r5.x, l(-2.000000)
    add r0.w, r0.w, r3.x
    add r0.w, r5.z, r0.w
    mov r3.x, -r0.w
    max r0.w, r0.w, r3.x
    add r0.w, r0.w, r1.z  // edgeHorz<0:NaN:Inf>
    ge r0.w, r0.w, r5.w  // horzSpan<0>
    mov r1.z, -r2.y
    mov r3.x, -r2.x
    movc r1.z, r0.w, r1.z, r3.x  // lengthSign<0>
    if_z r0.w
      mov r3.w, r3.y  // lumaN<0:Inf>
    endif 
    if_z r0.w
      mov r5.y, r5.x  // lumaS<0:Inf>
    endif 
    add r3.x, r4.w, r3.w
    mov r3.y, -r3.x
    max r3.x, r3.y, r3.x  // gradientN<0:NaN:Inf>
    add r3.y, r4.w, r5.y
    mov r4.w, -r3.y
    max r3.y, r3.y, r4.w  // gradientS<0:NaN:Inf>
    add r3.w, r3.z, r3.w
    mul r3.w, r3.w, l(0.500000)  // lumaN<0:NaN:Inf>
    add r4.w, r3.z, r5.y
    mul r4.w, r4.w, l(0.500000)  // lumaS<0:NaN:Inf>

#line 280
    ge r5.x, r3.x, r3.y  // pairN<0>
    if_z r5.x
      mov r3.w, r4.w  // lumaN<0:NaN:Inf>
    endif 
    if_z r5.x
      mov r3.x, r3.y  // gradientN<0:NaN:Inf>
    endif 
    if_z r5.x
      mul r1.z, r1.z, l(-1.000000)  // lengthSign<0>
    endif 
    mul r3.y, r1.z, l(0.500000)
    movc r4.w, r0.w, l(0), r3.y
    add r5.x, r1.x, r4.w  // posN<0:NaN:Inf>
    movc r3.y, r0.w, r3.y, l(0)
    add r5.y, r1.y, r3.y  // posN<1:NaN:Inf>

#line 291
    mul r3.x, r3.x, l(0.250000)  // gradientN<0:NaN:Inf>
    mov r5.x, r5.x  // posP<0:NaN:Inf>
    mov r5.y, r5.y  // posP<1:NaN:Inf>
    mov r2.z, l(0)
    movc r2.xy, r0.wwww, r2.xzxx, r2.zyzz  // offNP<0,1>

#line 299
    mov r2.z, l(0)  // doneN<0: false>
    mul r5.zw, r2.xxxy, l(0.000000, 0.000000, -1.500000, -1.500000)
    add r5.zw, r5.zzzw, r5.xxxy  // posN<0:NaN:Inf,1:NaN:Inf>
    mul r6.xy, r2.xyxx, l(1.500000, 1.500000, 0.000000, 0.000000)
    add r5.xy, r5.xyxx, r6.xyxx  // posP<0:NaN:Inf,1:NaN:Inf>
    mov r6.xy, r5.zwzz  // posN<0:NaN:Inf,1:NaN:Inf>
    mov r6.zw, r5.xxxy  // posP<0:NaN:Inf,1:NaN:Inf>
    mov r7.xy, l(0,0,0,0)  // lumaEndN<0:NaN:Inf>, lumaEndP<0:NaN:Inf>
    mov r3.y, r2.z  // doneN<0>
    mov r4.w, r2.z  // doneP<0>
    mov r7.z, r2.z  // i<0>
    loop 
      ilt r7.w, r7.z, l(6)
      breakc_z r7.w
      sample_l_indexable(texture2d)(float,float,float,float) r8.x, r6.xyxx, t22.wxyz, s1, l(0.000000)
      mov r8.x, r8.x  // lumaEndN<0:Inf>
      sample_l_indexable(texture2d)(float,float,float,float) r8.y, r6.zwzz, t22.xwyz, s1, l(0.000000)
      mov r8.y, r8.y  // lumaEndP<0:Inf>
      mov r7.w, -r3.w
      add r8.z, r7.w, r8.x
      mov r8.w, -r8.z
      max r8.z, r8.w, r8.z
      ge r8.z, r8.z, r3.x  // doneN2<0>
      add r7.w, r7.w, r8.y
      mov r8.w, -r7.w
      max r7.w, r7.w, r8.w
      ge r7.w, r7.w, r3.x  // doneP2<0>
      not r8.w, r3.y
      and r8.w, r8.w, r8.z
      if_nz r8.w
        add r9.xy, r2.xyxx, r6.xyxx  // posN<0:NaN:Inf,1:NaN:Inf>
      else 
        mov r9.xy, r6.xyxx  // posN<0:NaN:Inf,1:NaN:Inf>
      endif 
      not r8.w, r4.w
      and r8.w, r7.w, r8.w
      if_nz r8.w
        mov r9.zw, -r2.xxxy
        add r9.zw, r6.zzzw, r9.zzzw  // posP<0:NaN:Inf,1:NaN:Inf>
      else 
        mov r9.zw, r6.zzzw  // posP<0:NaN:Inf,1:NaN:Inf>
      endif 

#line 310
      and r8.w, r7.w, r8.z
      if_nz r8.w
        mov r6.xy, r9.xyxx  // posN<0:NaN:Inf,1:NaN:Inf>
        mov r6.zw, r9.zzzw  // posP<0:NaN:Inf,1:NaN:Inf>
        mov r7.xy, r8.xyxx  // lumaEndN<0:Inf>, lumaEndP<0:Inf>
        break 
      endif 
      mov r3.y, r8.z  // doneN<0>
      mov r4.w, r7.w  // doneP<0>
      if_z r3.y
        mul r8.zw, r2.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000)
        mov r8.zw, -r8.zzzw
        add r6.xy, r8.zwzz, r9.xyxx  // posN<0:NaN:Inf,1:NaN:Inf>
      else 
        mov r6.xy, r9.xyxx  // posN<0:NaN:Inf,1:NaN:Inf>
      endif 
      if_z r4.w
        mul r8.zw, r2.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000)
        add r6.zw, r8.zzzw, r9.zzzw  // posP<0:NaN:Inf,1:NaN:Inf>
      else 
        mov r6.zw, r9.zzzw  // posP<0:NaN:Inf,1:NaN:Inf>
      endif 

#line 303
      iadd r7.z, r7.z, l(1)  // i<0>
      mov r7.xy, r8.xyxx  // lumaEndN<0:Inf>, lumaEndP<0:Inf>
    endloop 

#line 317
    mov r2.x, -r6.x
    add r2.x, r1.x, r2.x
    mov r2.y, -r6.y
    add r2.y, r1.y, r2.y
    movc r2.x, r0.w, r2.x, r2.y  // dstN<0:NaN:Inf>
    mov r2.y, -r1.x
    add r2.y, r2.y, r6.z
    mov r2.z, -r1.y
    add r2.z, r2.z, r6.w
    movc r2.y, r0.w, r2.y, r2.z  // dstP<0:NaN:Inf>
    lt r2.z, r2.x, r2.y  // directionN<0>
    movc r3.x, r2.z, r7.x, r7.y  // lumaEndN<0:NaN:Inf>
    mov r3.y, -r3.w
    add r3.z, r3.y, r3.z
    lt r3.z, r3.z, l(0.000000)
    add r3.x, r3.y, r3.x
    lt r3.x, r3.x, l(0.000000)
    ieq r3.x, r3.z, r3.x
    if_nz r3.x
      mov r1.z, l(0)  // lengthSign<0: 0f>
    endif 

#line 326
    add r3.x, r2.x, r2.y  // spanLength<0:NaN:Inf>
    movc r2.x, r2.z, r2.x, r2.y  // dstN<0:NaN:Inf>
    div r2.y, l(-1.000000), r3.x
    mul r2.x, r2.y, r2.x
    add r2.x, r2.x, l(0.500000)  // subPixelOffset<0:NaN:Inf>
    mul r2.y, r1.w, l(0.125000)
    add r2.x, r2.y, r2.x  // subPixelOffset<0:NaN:Inf>
    mul r1.z, r1.z, r2.x  // subPixelOffset<0:NaN:Inf>

#line 333
    movc r2.x, r0.w, l(0), r1.z
    add r2.x, r1.x, r2.x
    movc r0.w, r0.w, r1.z, l(0)
    add r2.y, r0.w, r1.y
    sample_l_indexable(texture2d)(float,float,float,float) r1.xyz, r2.xyxx, t22.xyzw, s1, l(0.000000)
    mov r1.xyz, r1.xyzx  // rgbF<0:Inf,1:Inf,2:Inf>

#line 336
    mul r0.w, r2.w, r2.w  // lumaL<0:NaN:Inf>
    dp3 r2.x, r1.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
    add r2.x, r2.x, l(0.000000)  // lumaF<0:NaN:Inf>
    mov r2.y, -r2.x
    add r0.w, r0.w, r2.y
    mul r0.w, r0.w, r1.w
    add r0.w, r0.w, r2.x  // lumaB<0:NaN:Inf>
    div r0.w, r0.w, r2.x
    min r0.w, r0.w, l(4.000000)  // scale<0:Inf:[-1.#INFf,4f]>
    mul r4.xyz, r0.wwww, r1.xyzx  // rgbF<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
    mov r4.xyz, r4.xyzx  // FxaaPixelShader<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 257
  endif 

#line 205 "\\?\G:\greedyracer\source\greedyracer\Shaders\Source\postprocessing.hlsl"
  mov r4.xyz, r4.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 200
else 
  mov r4.xyz, r0.xyzx  // f4ColorOut<0:Inf,1:Inf,2:Inf>
endif 

#line 212
ine r0.w, l(0, 0, 0, 0), cb7[1].y
if_nz r0.w
  nop 
  mov r1.xy, v1.xyxx  // f2TexCoord<0,1>
  mov r0.w, cb7[1].x  // fRadius<0>

#line 89
  resinfo_indexable(texture2d)(float,float,float,float) r1.zw, l(0), t22.zwxy  // fWidth<0:Inf>, fHeight<0:Inf>
  div r1.z, l(1.000000), r1.z  // fOffsetX<0:Inf>
  div r1.w, l(1.000000), r1.w  // fOffsetY<0:Inf>
  mul r1.z, r0.w, r1.z  // fOffsetX<0:NaN:Inf>
  mul r0.w, r0.w, r1.w  // fOffsetY<0:NaN:Inf>
  add r2.x, r1.z, r1.x  // fTex1<0:NaN:Inf>
  add r3.y, r0.w, r1.y  // fTex2<1:NaN:Inf>
  mov r1.w, -r1.z
  add r5.x, r1.w, r1.x  // fTex3<0:NaN:Inf>
  mov r2.z, -r0.w
  add r6.y, r1.y, r2.z  // fTex4<1:NaN:Inf>

#line 100
  add r7.x, r1.w, r1.x  // fTex6<0:NaN:Inf>
  add r7.y, r1.y, r2.z  // fTex6<1:NaN:Inf>
  add r8.x, r1.z, r1.x  // fTex7<0:NaN:Inf>
  add r8.y, r1.y, r2.z  // fTex7<1:NaN:Inf>
  add r9.x, r1.w, r1.x  // fTex8<0:NaN:Inf>
  add r9.y, r0.w, r1.y  // fTex8<1:NaN:Inf>
  add r10.x, r1.z, r1.x  // fTex9<0:NaN:Inf>
  add r10.y, r0.w, r1.y  // fTex9<1:NaN:Inf>
  mov r2.y, v1.y
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r2.xyxx, t22.xyzw, s1
  mul r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
  add r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r3.x, v1.x
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r3.xyxx, t22.xyzw, s1
  mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
  add r1.xyz, r1.xyzx, r2.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r5.y, v1.y
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r5.xyxx, t22.xyzw, s1
  mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
  add r1.xyz, r1.xyzx, r2.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r6.x, v1.x
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r6.xyxx, t22.xyzw, s1
  mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
  add r1.xyz, r1.xyzx, r2.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mul r2.xyz, r0.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
  add r1.xyz, r1.xyzx, r2.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r7.xyxx, t22.xyzw, s1
  add r1.xyz, r1.xyzx, r2.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 111
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r8.xyxx, t22.xyzw, s1
  add r1.xyz, r1.xyzx, r2.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r9.xyxx, t22.xyzw, s1
  add r1.xyz, r1.xyzx, r2.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r10.xyxx, t22.xyzw, s1
  add r1.xyz, r1.xyzx, r2.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mul r1.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r1.xyz, r1.xyzx  // BinomialFilter<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 214
  add r1.xyz, r1.xyzx, r4.xyzx
  max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r4.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // f4ColorOut<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
endif 

#line 216
ine r0.w, l(0, 0, 0, 0), cb7[1].z
if_nz r0.w
  nop 
  mov r1.xy, v1.xyxx  // f2TexCoord<0,1>

#line 188
  nop 
  mov r1.xy, r1.xyxx  // f2TexCoord<0,1>

#line 125
  resinfo_indexable(texture2d)(float,float,float,float) r1.zw, l(0), t22.zwxy  // fWidth<0:Inf>, fHeight<0:Inf>
  div r0.w, l(1.000000), r1.z  // fOffsetX<0:Inf>
  div r1.z, l(1.000000), r1.w  // fOffsetY<0:Inf>
  add r2.x, r0.w, r1.x  // fTex1<0:Inf>
  mov r1.w, -r0.w
  add r3.x, r1.w, r1.x  // fTex3<0:Inf>

#line 134
  add r5.x, r1.w, r1.x  // fTex6<0:Inf>
  mov r2.z, -r1.z
  add r5.y, r1.y, r2.z  // fTex6<1:Inf>
  add r6.x, r1.w, r1.x  // fTex8<0:Inf>
  add r6.y, r1.z, r1.y  // fTex8<1:Inf>
  add r7.x, r0.w, r1.x  // fTex9<0:Inf>
  add r7.y, r1.z, r1.y  // fTex9<1:Inf>
  mov r2.y, v1.y
  sample_indexable(texture2d)(float,float,float,float) r2.xyw, r2.xyxx, t22.xywz, s1
  mul r2.xyw, r2.xyxw, l(-2.000000, -2.000000, 0.000000, -2.000000)
  add r2.xyw, r2.xyxw, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r3.y, v1.y
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t22.xyzw, s1
  mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
  add r2.xyw, r2.xyxw, r3.xyxz  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 144
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r5.xyxx, t22.xyzw, s1
  mul r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r2.xyw, r2.xyxw, r3.xyxz  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  add r2.xyw, r2.xyxw, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r6.xyxx, t22.xyzw, s1
  mul r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r2.xyw, r2.xyxw, r3.xyxz  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r7.xyxx, t22.xyzw, s1
  mul r3.xyz, r3.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  add r2.xyw, r2.xyxw, r3.xyxz  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r2.xyw, r2.xyxw  // SobelOperatorLR<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 188
  mov r2.xyw, r2.xyxw  // f4ColorOutLR<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  nop 

#line 164
  add r3.y, r1.z, r1.y  // fTex2<1:Inf>
  add r5.y, r1.y, r2.z  // fTex4<1:Inf>
  add r6.x, r1.w, r1.x  // fTex6<0:Inf>
  add r6.y, r1.y, r2.z  // fTex6<1:Inf>
  add r7.x, r0.w, r1.x  // fTex7<0:Inf>
  add r7.y, r1.y, r2.z  // fTex7<1:Inf>
  add r8.x, r1.w, r1.x  // fTex8<0:Inf>
  add r8.y, r1.z, r1.y  // fTex8<1:Inf>
  add r9.x, r0.w, r1.x  // fTex9<0:Inf>
  add r9.y, r1.z, r1.y  // fTex9<1:Inf>
  mov r3.x, v1.x
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r3.xyxx, t22.xyzw, s1
  mul r1.xyz, r1.xyzx, l(-2.000000, -2.000000, -2.000000, 0.000000)
  add r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 175
  mov r5.x, v1.x
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r5.xyxx, t22.xyzw, s1
  mul r3.xyz, r3.xyzx, l(-2.000000, -2.000000, -2.000000, 0.000000)
  add r1.xyz, r1.xyzx, r3.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r6.xyxx, t22.xyzw, s1
  mul r3.xyz, r3.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  add r1.xyz, r1.xyzx, r3.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r7.xyxx, t22.xyzw, s1
  mul r3.xyz, r3.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  add r1.xyz, r1.xyzx, r3.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r8.xyxx, t22.xyzw, s1
  mul r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r1.xyz, r1.xyzx, r3.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r9.xyxx, t22.xyzw, s1
  mul r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r1.xyz, r1.xyzx, r3.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r1.xyz, r1.xyzx  // SobelOperatorUD<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 189
  mov r1.xyz, r1.xyzx  // f4ColorOutUD<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r3.xyz, -r2.xywx
  max r2.xyz, r2.xywx, r3.xyzx
  mov r3.xyz, -r1.xyzx
  max r1.xyz, r1.xyzx, r3.xyzx
  mul r1.xyz, r1.xyzx, r2.xyzx  // SobelOperatorLRAndUD<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 218
  add r1.xyz, r1.xyzx, r4.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mul r4.xyz, r1.xyzx, l(0.330000, 0.330000, 0.330000, 0.000000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 216
endif 

#line 221
ine r0.w, l(0, 0, 0, 0), cb7[1].w
if_nz r0.w
  nop 
  mov r1.xy, v1.xyxx  // f2TexCoord<0,1>

#line 56
  resinfo_indexable(texture2d)(float,float,float,float) r1.zw, l(0), t22.zwxy  // fWidth<0:Inf>, fHeight<0:Inf>
  div r0.w, l(1.000000), r1.z  // fOffsetX<0:Inf>
  div r1.z, l(1.000000), r1.w  // fOffsetY<0:Inf>
  add r2.x, r0.w, r1.x  // fTex1<0:Inf>
  add r3.y, r1.z, r1.y  // fTex2<1:Inf>
  mov r1.w, -r0.w
  add r5.x, r1.w, r1.x  // fTex3<0:Inf>
  mov r2.z, -r1.z
  add r6.y, r1.y, r2.z  // fTex4<1:Inf>
  add r7.x, r1.w, r1.x  // fTex6<0:Inf>
  add r7.y, r1.y, r2.z  // fTex6<1:Inf>
  add r8.x, r0.w, r1.x  // fTex7<0:Inf>
  add r8.y, r1.y, r2.z  // fTex7<1:Inf>

#line 67
  add r9.x, r1.w, r1.x  // fTex8<0:Inf>
  add r9.y, r1.z, r1.y  // fTex8<1:Inf>
  add r10.x, r0.w, r1.x  // fTex9<0:Inf>
  add r10.y, r1.z, r1.y  // fTex9<1:Inf>
  mov r2.y, v1.y
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r2.xyxx, t22.xyzw, s1
  add r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r3.x, v1.x
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r3.xyxx, t22.xyzw, s1
  add r1.xyz, r1.xyzx, r2.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r5.y, v1.y
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r5.xyxx, t22.xyzw, s1
  add r1.xyz, r1.xyzx, r2.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r6.x, v1.x
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r6.xyxx, t22.xyzw, s1
  add r1.xyz, r1.xyzx, r2.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  add r0.xyz, r0.xyzx, r1.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r7.xyxx, t22.xyzw, s1
  add r0.xyz, r0.xyzx, r1.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r8.xyxx, t22.xyzw, s1
  add r0.xyz, r0.xyzx, r1.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r9.xyxx, t22.xyzw, s1
  add r0.xyz, r0.xyzx, r1.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 78
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r10.xyxx, t22.xyzw, s1
  add r0.xyz, r0.xyzx, r1.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mul r0.xyz, r0.xyzx, l(0.111110, 0.111110, 0.111110, 0.000000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mov r0.xyz, r0.xyzx  // MeanFilter<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 223
  add r0.xyz, r0.xyzx, r4.xyzx  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
  mul r4.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // f4ColorOut<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>

#line 221
endif 

#line 228
mov o0.xyz, r4.xyzx  // PS_POST<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
mov o0.w, l(1.000000)  // PS_POST<3: 1f>
ret 
// Approximately 428 instruction slots used
