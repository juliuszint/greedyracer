//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer ObjectInfo
// {
//
//   float4x4 World;                    // Offset:    0 Size:    64
//   float4x4 View;                     // Offset:   64 Size:    64
//   float4x4 ViewInv;                  // Offset:  128 Size:    64
//   float4x4 Projection;               // Offset:  192 Size:    64
//   uint4 iLightsAffecting;            // Offset:  256 Size:    16
//   uint iLightCount;                  // Offset:  272 Size:     4
//
// }
//
// Resource bind info for Lights
// {
//
//   struct Light
//   {
//       
//       float3 f3Position;             // Offset:    0
//       uint iType;                    // Offset:   12
//       float4 f4Color;                // Offset:   16
//       float3 f3Direction;            // Offset:   32
//       float fInnerCosAngle;          // Offset:   44
//       float fOuterCosAngle;          // Offset:   48
//       float fAttenuationConstant;    // Offset:   52
//       float fAttenuationLinear;      // Offset:   56
//       float fAttenuationQuadratic;   // Offset:   60
//       bool bCauseShadow;             // Offset:   64
//       bool bSoftShadow;              // Offset:   68
//       bool bCascadedShadow;          // Offset:   72
//       float4x4 mLightViewProj;       // Offset:   76
//
//   } $Element;                        // Offset:    0 Size:   140
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Lights                            texture  struct         r/o   10        1
// ObjectInfo                        cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// POSITION                 0   xyzw        0     NONE  float   xyzw
// NORMAL                   0   xyz         1     NONE  float   xyz 
// TEXCOORD                 0   xy          2     NONE  float   xy  
// TANGENT                  0   xyz         3     NONE  float   xyz 
// BITANGENT                0   xyz         4     NONE  float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float   xyzw
// NORMAL                   0   xyz         1     NONE  float   xyz 
// LIGHTS                   5      w        1     NONE  float      w
// TANGENT                  0   xyz         2     NONE  float   xyz 
// LIGHTS                  16      w        2     NONE  float      w
// BITANGENT                0   xyz         3     NONE  float   xyz 
// LIGHTS                  17      w        3     NONE  float      w
// TEXCOORD                 0   xy          4     NONE  float   xy  
// LIGHTS                   4     zw        4     NONE  float     zw
// TEXCOORD                 1   xyz         5     NONE  float   xyz 
// LIGHTS                  29      w        5     NONE  float      w
// TEXCOORD                 2   xyzw        6     NONE  float   xyzw
// LIGHTS                   0   xyzw        7     NONE  float   xyzw
// LIGHTS                   2   xyzw        8     NONE  float   xyzw
// LIGHTS                   3   xyzw        9     NONE  float   xyzw
// LIGHTS                   6   xyzw       10     NONE   uint   xyzw
// LIGHTS                  10   xyzw       11     NONE   uint   xyzw
// LIGHTS                  11   xyzw       12     NONE  float   xyzw
// LIGHTS                  12   xyzw       13     NONE  float   xyzw
// LIGHTS                  14   xyzw       14     NONE  float   xyzw
// LIGHTS                  15   xyzw       15     NONE  float   xyzw
// LIGHTS                  21   xyzw       16     NONE   uint   xyzw
// LIGHTS                  23   xyzw       17     NONE  float   xyzw
// LIGHTS                  24   xyzw       18     NONE  float   xyzw
// LIGHTS                  26   xyzw       19     NONE  float   xyzw
// LIGHTS                  27   xyz        20     NONE  float   xyz 
// LIGHTS                  32   xyzw       21     NONE   uint   xyzw
// LIGHTS                  35   xyzw       22     NONE  float   xyzw
// LIGHTS                  36   xyzw       23     NONE  float   xyzw
// LIGHTS                  38   xyzw       24     NONE  float   xyzw
// LIGHTS                  39   xyz        25     NONE  float   xyz 
// LIGHTS                  43   xyzw       26     NONE   uint   xyzw
// LIGHTS                  47   xyzw       27     NONE  float   xyzw
// COUNT                    0   x          28     NONE   uint   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[18], immediateIndexed
dcl_resource_structured t10, 140 
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o1.w
dcl_output o2.xyz
dcl_output o2.w
dcl_output o3.xyz
dcl_output o3.w
dcl_output o4.xy
dcl_output o4.zw
dcl_output o5.xyz
dcl_output o5.w
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xyzw
dcl_output o10.xyzw
dcl_output o11.xyzw
dcl_output o12.xyzw
dcl_output o13.xyzw
dcl_output o14.xyzw
dcl_output o15.xyzw
dcl_output o16.xyzw
dcl_output o17.xyzw
dcl_output o18.xyzw
dcl_output o19.xyzw
dcl_output o20.xyz
dcl_output o21.xyzw
dcl_output o22.xyzw
dcl_output o23.xyzw
dcl_output o24.xyzw
dcl_output o25.xyz
dcl_output o26.xyzw
dcl_output o27.xyzw
dcl_output o28.x
dcl_temps 34

#line 179 "\\?\C:\Users\Peter\Documents\Hochschule_Kempten\Softwarepraktikum\greedyracer\source\greedyracer\shaders\Source\shaders.hlsl"
dp4 r0.x, v0.xyzw, cb0[0].xyzw  // output<0:NaN:Inf>
dp4 r0.y, v0.xyzw, cb0[1].xyzw  // output<1:NaN:Inf>
dp4 r0.z, v0.xyzw, cb0[2].xyzw  // output<2:NaN:Inf>
dp4 r0.w, v0.xyzw, cb0[3].xyzw  // output<3:NaN:Inf>
mov r1.y, r0.x  // output<0:NaN:Inf>
mov r1.z, r0.y  // output<1:NaN:Inf>
mov r1.w, r0.z  // output<2:NaN:Inf>
mov r2.w, r0.w  // output<21:NaN:Inf>
mov r2.xyz, r1.yzwy  // output<18:NaN:Inf,19:NaN:Inf,20:NaN:Inf>

#line 186
if_nz cb0[17].x

#line 189
  mov r3.w, cb0[16].x  // lightCurrentId<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r4.y, r3.w, l(0), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r4.z, r3.w, l(4), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r4.w, r3.w, l(8), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r3.x, r3.w, l(12), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r5.x, r3.w, l(16), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r5.y, r3.w, l(20), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r5.z, r3.w, l(24), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r5.w, r3.w, l(28), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r6.x, r3.w, l(32), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r6.y, r3.w, l(36), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r6.z, r3.w, l(40), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r6.w, r3.w, l(44), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r7.w, r3.w, l(48), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r1.x, r3.w, l(52), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r4.x, r3.w, l(56), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.x, r3.w, l(60), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.y, r3.w, l(64), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.z, r3.w, l(68), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.w, r3.w, l(72), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r9.x, r3.w, l(76), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r9.y, r3.w, l(92), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r9.z, r3.w, l(108), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r9.w, r3.w, l(124), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.x, r3.w, l(80), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.y, r3.w, l(96), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.z, r3.w, l(112), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.w, r3.w, l(128), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r11.x, r3.w, l(84), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r11.y, r3.w, l(100), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r11.z, r3.w, l(116), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r11.w, r3.w, l(132), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r12.x, r3.w, l(88), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r12.y, r3.w, l(104), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r12.z, r3.w, l(120), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r12.w, r3.w, l(136), t10.xxxx  // Lights<0>
  ine r7.x, l(0, 0, 0, 0), r8.y  // lightCurrent<16>
  ine r7.y, l(0, 0, 0, 0), r8.z  // lightCurrent<17>
  ine r7.z, l(0, 0, 0, 0), r8.w  // lightCurrent<18>
  mov r5.x, r5.x  // lightCurrent<4>
  mov r5.y, r5.y  // lightCurrent<5>
  mov r5.z, r5.z  // lightCurrent<6>
  mov r5.w, r5.w  // lightCurrent<7>
  mov r4.y, r4.y  // lightCurrent<0>
  mov r4.z, r4.z  // lightCurrent<1>
  mov r4.w, r4.w  // lightCurrent<2>
  mov r6.x, r6.x  // lightCurrent<8>
  mov r6.y, r6.y  // lightCurrent<9>
  mov r6.z, r6.z  // lightCurrent<10>
  mov r6.w, r6.w  // lightCurrent<11>
  mov r7.w, r7.w  // lightCurrent<12>
  mov r4.x, r4.x  // lightCurrent<14>
  mov r8.x, r8.x  // lightCurrent<15>
  mov r3.x, r3.x  // lightCurrent<3>
  mov r1.x, r1.x  // lightCurrent<13>
  mov r3.w, r3.w  // output<38>

#line 194
  mov r5.xyzw, r5.xyzw  // output<26,27,28,29>

#line 197
  mov r7.x, r7.x  // output<35>

#line 200
  ieq r8.y, r3.x, l(3)
  if_nz r8.y
    mov r8.yzw, -r1.yyzw
    add r8.yzw, r4.yyzw, r8.yyzw
    dp3 r13.x, r8.yzwy, r8.yzwy
    rsq r13.y, r13.x
    mul r14.yzw, r8.yyzw, r13.yyyy  // output<23:NaN:Inf,24:NaN:Inf,25:NaN:Inf>
    mov r6.xyz, r6.xyzx  // output<30,31,32>
    mov r6.w, r6.w  // output<33>
    mov r7.w, r7.w  // output<34>
    sqrt r8.y, r13.x
    mov r8.z, -r8.y
    max r8.y, r8.z, r8.y  // d<0:NaN:Inf>
    add r8.z, r1.x, l(1.000000)
    mul r8.w, r4.x, r8.y
    add r8.z, r8.w, r8.z
    max r8.y, r8.y, l(1.000000)
    mul r8.y, r8.y, r8.y
    mul r8.y, r8.y, l(1.000000)
    mul r8.y, r8.y, r8.x
    add r8.y, r8.y, r8.z
    div r14.x, l(1.000000), r8.y  // output<22:NaN:Inf>
    mul r13.xyzw, r9.xxxx, cb0[0].xyzw
    mul r15.xyzw, r10.xxxx, cb0[1].xyzw
    add r13.xyzw, r13.xyzw, r15.xyzw
    mul r15.xyzw, r11.xxxx, cb0[2].xyzw
    add r13.xyzw, r13.xyzw, r15.xyzw
    mul r15.xyzw, r12.xxxx, cb0[3].xyzw
    add r13.xyzw, r13.xyzw, r15.xyzw
    mul r15.xyzw, r9.yyyy, cb0[0].xyzw
    mul r16.xyzw, r10.yyyy, cb0[1].xyzw
    add r15.xyzw, r15.xyzw, r16.xyzw
    mul r16.xyzw, r11.yyyy, cb0[2].xyzw
    add r15.xyzw, r15.xyzw, r16.xyzw
    mul r16.xyzw, r12.yyyy, cb0[3].xyzw
    add r15.xyzw, r15.xyzw, r16.xyzw
    mul r16.xyzw, r9.zzzz, cb0[0].xyzw
    mul r17.xyzw, r10.zzzz, cb0[1].xyzw
    add r16.xyzw, r16.xyzw, r17.xyzw
    mul r17.xyzw, r11.zzzz, cb0[2].xyzw
    add r16.xyzw, r16.xyzw, r17.xyzw
    mul r17.xyzw, r12.zzzz, cb0[3].xyzw
    add r16.xyzw, r16.xyzw, r17.xyzw
    mul r9.xyzw, r9.wwww, cb0[0].xyzw
    mul r10.xyzw, r10.wwww, cb0[1].xyzw
    add r9.xyzw, r9.xyzw, r10.xyzw
    mul r10.xyzw, r11.wwww, cb0[2].xyzw
    add r9.xyzw, r9.xyzw, r10.xyzw
    mul r10.xyzw, r12.wwww, cb0[3].xyzw
    add r9.xyzw, r9.xyzw, r10.xyzw
    dp4 r10.y, v0.xyzw, r13.xyzw  // output<40:NaN:Inf>
    dp4 r10.w, v0.xyzw, r15.xyzw  // output<41:NaN:Inf>
    dp4 r10.z, v0.xyzw, r16.xyzw  // output<42:NaN:Inf>
    dp4 r10.x, v0.xyzw, r9.xyzw  // output<43:NaN:Inf>
    mov r7.y, r7.y  // output<36>
    mov r7.z, r7.z  // output<37>

#line 202
    mov r3.yz, r10.yywy  // output<40:NaN:Inf,41:NaN:Inf>
  else 

#line 212
    ieq r8.y, r3.x, l(2)
    if_nz r8.y
      mov r8.yzw, -r1.yyzw
      add r4.yzw, r4.yyzw, r8.yyzw
      dp3 r8.y, r4.yzwy, r4.yzwy
      rsq r8.z, r8.y
      mul r14.yzw, r4.yyzw, r8.zzzz  // output<23:NaN:Inf,24:NaN:Inf,25:NaN:Inf>
      sqrt r4.y, r8.y
      mov r4.z, -r4.y
      max r4.y, r4.z, r4.y  // d<0:NaN:Inf>
      add r1.x, r1.x, l(1.000000)
      mul r4.x, r4.y, r4.x
      add r1.x, r1.x, r4.x
      max r4.x, r4.y, l(1.000000)
      mul r4.x, r4.x, r4.x
      mul r4.x, r4.x, l(1.000000)
      mul r4.x, r4.x, r8.x
      add r1.x, r1.x, r4.x
      div r14.x, l(1.000000), r1.x  // output<22:NaN:Inf>

#line 212
    else 

#line 220
      mov r14.yzw, r6.xxyz  // output<23,24,25>
      mov r14.x, l(1.000000)  // output<22: 1f>

#line 212
    endif 
    mov r6.xyzw, l(0,0,0,0)  // output<30: 0f,31: 0f,32: 0f,33: 0f>
    mov r7.yzw, l(0,0,0,0)  // output<36: false,37: false,34: 0f>
    mov r3.yz, l(0,0,0,0)  // output<40: 0f,41: 0f>
    mov r10.xz, l(0,0,0,0)  // output<43: 0f,42: 0f>

#line 200
  endif 

#line 224
  mov r3.x, r3.x  // output<39>

#line 186
else 
  mov r14.xyzw, l(0,0,0,0)  // output<22: 0f,23: 0f,24: 0f,25: 0f>
  mov r5.xyzw, l(0,0,0,0)  // output<26: 0f,27: 0f,28: 0f,29: 0f>
  mov r6.xyzw, l(0,0,0,0)  // output<30: 0f,31: 0f,32: 0f,33: 0f>
  mov r7.xyzw, l(0,0,0,0)  // output<35: false,36: false,37: false,34: 0f>
  mov r3.xyzw, l(0,0,0,0)  // output<39: 0u,40: 0f,41: 0f,38: 0u>
  mov r10.xz, l(0,0,0,0)  // output<43: 0f,42: 0f>
endif 
ult r1.x, l(1), cb0[17].x
if_nz r1.x

#line 189
  mov r4.x, cb0[16].y  // lightCurrentId<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.y, r4.x, l(0), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.z, r4.x, l(4), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.w, r4.x, l(8), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r4.y, r4.x, l(12), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r9.x, r4.x, l(16), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r9.y, r4.x, l(20), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r9.z, r4.x, l(24), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r9.w, r4.x, l(28), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r11.x, r4.x, l(32), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r11.y, r4.x, l(36), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r11.z, r4.x, l(40), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r11.w, r4.x, l(44), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r12.w, r4.x, l(48), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r1.x, r4.x, l(52), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.x, r4.x, l(56), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.y, r4.x, l(60), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.w, r4.x, l(64), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.x, r4.x, l(68), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.y, r4.x, l(72), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.z, r4.x, l(76), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.w, r4.x, l(92), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.x, r4.x, l(108), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.y, r4.x, l(124), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.z, r4.x, l(80), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.w, r4.x, l(96), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r16.x, r4.x, l(112), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r16.y, r4.x, l(128), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r16.z, r4.x, l(84), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r16.w, r4.x, l(100), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r17.x, r4.x, l(116), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r17.y, r4.x, l(132), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r17.z, r4.x, l(88), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r17.w, r4.x, l(104), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r18.x, r4.x, l(120), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r18.y, r4.x, l(136), t10.xxxx  // Lights<0>
  ine r12.x, l(0, 0, 0, 0), r10.w  // lightCurrent<16>
  ine r12.y, l(0, 0, 0, 0), r13.x  // lightCurrent<17>
  ine r12.z, l(0, 0, 0, 0), r13.y  // lightCurrent<18>
  mov r9.x, r9.x  // lightCurrent<4>
  mov r9.y, r9.y  // lightCurrent<5>
  mov r9.z, r9.z  // lightCurrent<6>
  mov r9.w, r9.w  // lightCurrent<7>
  mov r8.y, r8.y  // lightCurrent<0>
  mov r8.z, r8.z  // lightCurrent<1>
  mov r8.w, r8.w  // lightCurrent<2>
  mov r11.x, r11.x  // lightCurrent<8>
  mov r11.y, r11.y  // lightCurrent<9>
  mov r11.z, r11.z  // lightCurrent<10>
  mov r11.w, r11.w  // lightCurrent<11>
  mov r12.w, r12.w  // lightCurrent<12>
  mov r8.x, r8.x  // lightCurrent<14>
  mov r10.y, r10.y  // lightCurrent<15>
  mov r4.y, r4.y  // lightCurrent<3>
  mov r1.x, r1.x  // lightCurrent<13>
  mov r4.x, r4.x  // output<60>

#line 194
  mov r9.xyzw, r9.xyzw  // output<48,49,50,51>

#line 197
  mov r12.x, r12.x  // output<57>

#line 200
  ieq r10.w, r4.y, l(3)
  if_nz r10.w
    mov r19.xyz, -r1.yzwy
    add r19.xyz, r8.yzwy, r19.xyzx
    dp3 r10.w, r19.xyzx, r19.xyzx
    rsq r13.x, r10.w
    mul r19.yzw, r13.xxxx, r19.xxyz  // output<45:NaN:Inf,46:NaN:Inf,47:NaN:Inf>
    mov r11.xyz, r11.xyzx  // output<52,53,54>
    mov r11.w, r11.w  // output<55>
    mov r12.w, r12.w  // output<56>
    sqrt r10.w, r10.w
    mov r13.x, -r10.w
    max r10.w, r10.w, r13.x  // d<0:NaN:Inf>
    add r13.x, r1.x, l(1.000000)
    mul r13.y, r8.x, r10.w
    add r13.x, r13.y, r13.x
    max r10.w, r10.w, l(1.000000)
    mul r10.w, r10.w, r10.w
    mul r10.w, r10.w, l(1.000000)
    mul r10.w, r10.w, r10.y
    add r10.w, r10.w, r13.x
    div r19.x, l(1.000000), r10.w  // output<44:NaN:Inf>
    mul r20.xyzw, r13.zzzz, cb0[0].xyzw
    mul r21.xyzw, r15.zzzz, cb0[1].xyzw
    add r20.xyzw, r20.xyzw, r21.xyzw
    mul r21.xyzw, r16.zzzz, cb0[2].xyzw
    add r20.xyzw, r20.xyzw, r21.xyzw
    mul r21.xyzw, r17.zzzz, cb0[3].xyzw
    add r20.xyzw, r20.xyzw, r21.xyzw
    mul r13.xyzw, r13.wwww, cb0[0].xyzw
    mul r21.xyzw, r15.wwww, cb0[1].xyzw
    add r13.xyzw, r13.xyzw, r21.xyzw
    mul r21.xyzw, r16.wwww, cb0[2].xyzw
    add r13.xyzw, r13.xyzw, r21.xyzw
    mul r21.xyzw, r17.wwww, cb0[3].xyzw
    add r13.xyzw, r13.xyzw, r21.xyzw
    mul r21.xyzw, r15.xxxx, cb0[0].xyzw
    mul r22.xyzw, r16.xxxx, cb0[1].xyzw
    add r21.xyzw, r21.xyzw, r22.xyzw
    mul r22.xyzw, r17.xxxx, cb0[2].xyzw
    add r21.xyzw, r21.xyzw, r22.xyzw
    mul r22.xyzw, r18.xxxx, cb0[3].xyzw
    add r21.xyzw, r21.xyzw, r22.xyzw
    mul r15.xyzw, r15.yyyy, cb0[0].xyzw
    mul r16.xyzw, r16.yyyy, cb0[1].xyzw
    add r15.xyzw, r15.xyzw, r16.xyzw
    mul r16.xyzw, r17.yyyy, cb0[2].xyzw
    add r15.xyzw, r15.xyzw, r16.xyzw
    mul r16.xyzw, r18.yyyy, cb0[3].xyzw
    add r15.xyzw, r15.xyzw, r16.xyzw
    dp4 r16.y, v0.xyzw, r20.xyzw  // output<62:NaN:Inf>
    dp4 r16.w, v0.xyzw, r13.xyzw  // output<63:NaN:Inf>
    dp4 r16.z, v0.xyzw, r21.xyzw  // output<64:NaN:Inf>
    dp4 r16.x, v0.xyzw, r15.xyzw  // output<65:NaN:Inf>
    mov r12.y, r12.y  // output<58>
    mov r12.z, r12.z  // output<59>

#line 202
    mov r4.zw, r16.yyyw  // output<62:NaN:Inf,63:NaN:Inf>
  else 

#line 212
    ieq r10.w, r4.y, l(2)
    if_nz r10.w
      mov r13.xyz, -r1.yzwy
      add r8.yzw, r8.yyzw, r13.xxyz
      dp3 r10.w, r8.yzwy, r8.yzwy
      rsq r13.x, r10.w
      mul r19.yzw, r8.yyzw, r13.xxxx  // output<45:NaN:Inf,46:NaN:Inf,47:NaN:Inf>
      sqrt r8.y, r10.w
      mov r8.z, -r8.y
      max r8.y, r8.z, r8.y  // d<0:NaN:Inf>
      add r1.x, r1.x, l(1.000000)
      mul r8.x, r8.y, r8.x
      add r1.x, r1.x, r8.x
      max r8.x, r8.y, l(1.000000)
      mul r8.x, r8.x, r8.x
      mul r8.x, r8.x, l(1.000000)
      mul r8.x, r8.x, r10.y
      add r1.x, r1.x, r8.x
      div r19.x, l(1.000000), r1.x  // output<44:NaN:Inf>

#line 212
    else 

#line 220
      mov r19.yzw, r11.xxyz  // output<45,46,47>
      mov r19.x, l(1.000000)  // output<44: 1f>

#line 212
    endif 
    mov r11.xyzw, l(0,0,0,0)  // output<52: 0f,53: 0f,54: 0f,55: 0f>
    mov r12.yzw, l(0,0,0,0)  // output<58: false,59: false,56: 0f>
    mov r4.zw, l(0,0,0,0)  // output<62: 0f,63: 0f>
    mov r16.xz, l(0,0,0,0)  // output<65: 0f,64: 0f>

#line 200
  endif 

#line 224
  mov r4.y, r4.y  // output<61>

#line 186
else 
  mov r19.xyzw, l(0,0,0,0)  // output<44: 0f,45: 0f,46: 0f,47: 0f>
  mov r9.xyzw, l(0,0,0,0)  // output<48: 0f,49: 0f,50: 0f,51: 0f>
  mov r11.xyzw, l(0,0,0,0)  // output<52: 0f,53: 0f,54: 0f,55: 0f>
  mov r12.xyzw, l(0,0,0,0)  // output<57: false,58: false,59: false,56: 0f>
  mov r4.xyzw, l(0,0,0,0)  // output<60: 0u,61: 0u,62: 0f,63: 0f>
  mov r16.xz, l(0,0,0,0)  // output<65: 0f,64: 0f>
endif 
ult r1.x, l(2), cb0[17].x
if_nz r1.x

#line 189
  mov r8.y, cb0[16].z  // lightCurrentId<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.y, r8.y, l(0), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.z, r8.y, l(4), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.w, r8.y, l(8), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r8.x, r8.y, l(12), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.x, r8.y, l(16), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.y, r8.y, l(20), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.z, r8.y, l(24), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r15.w, r8.y, l(28), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r17.x, r8.y, l(32), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r17.y, r8.y, l(36), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r17.z, r8.y, l(40), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r17.w, r8.y, l(44), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r18.w, r8.y, l(48), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r1.x, r8.y, l(52), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.y, r8.y, l(56), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.w, r8.y, l(60), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.x, r8.y, l(64), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r16.y, r8.y, l(68), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r16.w, r8.y, l(72), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.x, r8.y, l(76), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.y, r8.y, l(92), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.z, r8.y, l(108), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.w, r8.y, l(124), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.x, r8.y, l(80), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.y, r8.y, l(96), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.z, r8.y, l(112), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.w, r8.y, l(128), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r22.x, r8.y, l(84), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r22.y, r8.y, l(100), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r22.z, r8.y, l(116), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r22.w, r8.y, l(132), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r23.x, r8.y, l(88), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r23.y, r8.y, l(104), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r23.z, r8.y, l(120), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r23.w, r8.y, l(136), t10.xxxx  // Lights<0>
  ine r18.x, l(0, 0, 0, 0), r13.x  // lightCurrent<16>
  ine r18.y, l(0, 0, 0, 0), r16.y  // lightCurrent<17>
  ine r18.z, l(0, 0, 0, 0), r16.w  // lightCurrent<18>
  mov r15.x, r15.x  // lightCurrent<4>
  mov r15.y, r15.y  // lightCurrent<5>
  mov r15.z, r15.z  // lightCurrent<6>
  mov r15.w, r15.w  // lightCurrent<7>
  mov r13.y, r13.y  // lightCurrent<0>
  mov r13.z, r13.z  // lightCurrent<1>
  mov r13.w, r13.w  // lightCurrent<2>
  mov r17.x, r17.x  // lightCurrent<8>
  mov r17.y, r17.y  // lightCurrent<9>
  mov r17.z, r17.z  // lightCurrent<10>
  mov r17.w, r17.w  // lightCurrent<11>
  mov r18.w, r18.w  // lightCurrent<12>
  mov r10.y, r10.y  // lightCurrent<14>
  mov r10.w, r10.w  // lightCurrent<15>
  mov r8.x, r8.x  // lightCurrent<3>
  mov r1.x, r1.x  // lightCurrent<13>
  mov r8.y, r8.y  // output<82>

#line 194
  mov r15.xyzw, r15.xyzw  // output<70,71,72,73>

#line 197
  mov r18.x, r18.x  // output<79>

#line 200
  ieq r13.x, r8.x, l(3)
  if_nz r13.x
    mov r24.xyz, -r1.yzwy
    add r24.xyz, r13.yzwy, r24.xyzx
    dp3 r13.x, r24.xyzx, r24.xyzx
    rsq r16.y, r13.x
    mul r24.yzw, r16.yyyy, r24.xxyz  // output<67:NaN:Inf,68:NaN:Inf,69:NaN:Inf>
    mov r17.xyz, r17.xyzx  // output<74,75,76>
    mov r17.w, r17.w  // output<77>
    mov r18.w, r18.w  // output<78>
    sqrt r13.x, r13.x
    mov r16.y, -r13.x
    max r13.x, r13.x, r16.y  // d<0:NaN:Inf>
    add r16.y, r1.x, l(1.000000)
    mul r16.w, r10.y, r13.x
    add r16.y, r16.w, r16.y
    max r13.x, r13.x, l(1.000000)
    mul r13.x, r13.x, r13.x
    mul r13.x, r13.x, l(1.000000)
    mul r13.x, r10.w, r13.x
    add r13.x, r13.x, r16.y
    div r24.x, l(1.000000), r13.x  // output<66:NaN:Inf>
    mul r25.xyzw, r20.xxxx, cb0[0].xyzw
    mul r26.xyzw, r21.xxxx, cb0[1].xyzw
    add r25.xyzw, r25.xyzw, r26.xyzw
    mul r26.xyzw, r22.xxxx, cb0[2].xyzw
    add r25.xyzw, r25.xyzw, r26.xyzw
    mul r26.xyzw, r23.xxxx, cb0[3].xyzw
    add r25.xyzw, r25.xyzw, r26.xyzw
    mul r26.xyzw, r20.yyyy, cb0[0].xyzw
    mul r27.xyzw, r21.yyyy, cb0[1].xyzw
    add r26.xyzw, r26.xyzw, r27.xyzw
    mul r27.xyzw, r22.yyyy, cb0[2].xyzw
    add r26.xyzw, r26.xyzw, r27.xyzw
    mul r27.xyzw, r23.yyyy, cb0[3].xyzw
    add r26.xyzw, r26.xyzw, r27.xyzw
    mul r27.xyzw, r20.zzzz, cb0[0].xyzw
    mul r28.xyzw, r21.zzzz, cb0[1].xyzw
    add r27.xyzw, r27.xyzw, r28.xyzw
    mul r28.xyzw, r22.zzzz, cb0[2].xyzw
    add r27.xyzw, r27.xyzw, r28.xyzw
    mul r28.xyzw, r23.zzzz, cb0[3].xyzw
    add r27.xyzw, r27.xyzw, r28.xyzw
    mul r20.xyzw, r20.wwww, cb0[0].xyzw
    mul r21.xyzw, r21.wwww, cb0[1].xyzw
    add r20.xyzw, r20.xyzw, r21.xyzw
    mul r21.xyzw, r22.wwww, cb0[2].xyzw
    add r20.xyzw, r20.xyzw, r21.xyzw
    mul r21.xyzw, r23.wwww, cb0[3].xyzw
    add r20.xyzw, r20.xyzw, r21.xyzw
    dp4 r21.y, v0.xyzw, r25.xyzw  // output<84:NaN:Inf>
    dp4 r21.w, v0.xyzw, r26.xyzw  // output<85:NaN:Inf>
    dp4 r21.z, v0.xyzw, r27.xyzw  // output<86:NaN:Inf>
    dp4 r21.x, v0.xyzw, r20.xyzw  // output<87:NaN:Inf>
    mov r18.y, r18.y  // output<80>
    mov r18.z, r18.z  // output<81>

#line 202
    mov r8.zw, r21.yyyw  // output<84:NaN:Inf,85:NaN:Inf>
  else 

#line 212
    ieq r13.x, r8.x, l(2)
    if_nz r13.x
      mov r20.xyz, -r1.yzwy
      add r13.xyz, r13.yzwy, r20.xyzx
      dp3 r13.w, r13.xyzx, r13.xyzx
      rsq r16.y, r13.w
      mul r24.yzw, r13.xxyz, r16.yyyy  // output<67:NaN:Inf,68:NaN:Inf,69:NaN:Inf>
      sqrt r13.x, r13.w
      mov r13.y, -r13.x
      max r13.x, r13.y, r13.x  // d<0:NaN:Inf>
      add r1.x, r1.x, l(1.000000)
      mul r10.y, r10.y, r13.x
      add r1.x, r1.x, r10.y
      max r10.y, r13.x, l(1.000000)
      mul r10.y, r10.y, r10.y
      mul r10.y, r10.y, l(1.000000)
      mul r10.y, r10.y, r10.w
      add r1.x, r1.x, r10.y
      div r24.x, l(1.000000), r1.x  // output<66:NaN:Inf>

#line 212
    else 

#line 220
      mov r24.yzw, r17.xxyz  // output<67,68,69>
      mov r24.x, l(1.000000)  // output<66: 1f>

#line 212
    endif 
    mov r17.xyzw, l(0,0,0,0)  // output<74: 0f,75: 0f,76: 0f,77: 0f>
    mov r18.yzw, l(0,0,0,0)  // output<80: false,81: false,78: 0f>
    mov r8.zw, l(0,0,0,0)  // output<84: 0f,85: 0f>
    mov r21.xz, l(0,0,0,0)  // output<87: 0f,86: 0f>

#line 200
  endif 

#line 224
  mov r8.x, r8.x  // output<83>

#line 186
else 
  mov r24.xyzw, l(0,0,0,0)  // output<66: 0f,67: 0f,68: 0f,69: 0f>
  mov r15.xyzw, l(0,0,0,0)  // output<70: 0f,71: 0f,72: 0f,73: 0f>
  mov r17.xyzw, l(0,0,0,0)  // output<74: 0f,75: 0f,76: 0f,77: 0f>
  mov r18.xyzw, l(0,0,0,0)  // output<79: false,80: false,81: false,78: 0f>
  mov r8.xyzw, l(0,0,0,0)  // output<83: 0u,82: 0u,84: 0f,85: 0f>
  mov r21.xz, l(0,0,0,0)  // output<87: 0f,86: 0f>
endif 
ult r1.x, l(3), cb0[17].x
if_nz r1.x

#line 189
  mov r13.z, cb0[16].w  // lightCurrentId<0>
  mov r1.x, r13.z
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.y, r1.x, l(0), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.z, r1.x, l(4), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.w, r1.x, l(8), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r13.w, r1.x, l(12), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r22.x, r1.x, l(16), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r22.y, r1.x, l(20), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r22.z, r1.x, l(24), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r22.w, r1.x, l(28), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r23.x, r1.x, l(32), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r23.y, r1.x, l(36), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r23.z, r1.x, l(40), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.y, r1.x, l(44), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r10.w, r1.x, l(48), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r16.y, r1.x, l(52), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r16.w, r1.x, l(56), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r20.x, r1.x, l(60), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.y, r1.x, l(64), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r21.w, r1.x, l(68), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r23.w, r1.x, l(72), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r25.x, r1.x, l(76), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r25.y, r1.x, l(92), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r25.z, r1.x, l(108), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r25.w, r1.x, l(124), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r26.x, r1.x, l(80), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r26.y, r1.x, l(96), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r26.z, r1.x, l(112), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r26.w, r1.x, l(128), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r27.x, r1.x, l(84), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r27.y, r1.x, l(100), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r27.z, r1.x, l(116), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r27.w, r1.x, l(132), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r28.x, r1.x, l(88), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r28.y, r1.x, l(104), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r28.z, r1.x, l(120), t10.xxxx  // Lights<0>
  ld_structured_indexable(structured_buffer, stride=140)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(136), t10.xxxx  // Lights<0>
  ine r21.y, l(0, 0, 0, 0), r21.y  // lightCurrent<16>
  ine r13.x, l(0, 0, 0, 0), r21.w  // lightCurrent<17>
  ine r13.y, l(0, 0, 0, 0), r23.w  // lightCurrent<18>
  mov r22.x, r22.x  // lightCurrent<4>
  mov r22.y, r22.y  // lightCurrent<5>
  mov r22.z, r22.z  // lightCurrent<6>
  mov r22.w, r22.w  // lightCurrent<7>
  mov r20.y, r20.y  // lightCurrent<0>
  mov r20.z, r20.z  // lightCurrent<1>
  mov r20.w, r20.w  // lightCurrent<2>
  mov r23.x, r23.x  // lightCurrent<8>
  mov r23.y, r23.y  // lightCurrent<9>
  mov r23.z, r23.z  // lightCurrent<10>
  mov r10.y, r10.y  // lightCurrent<11>
  mov r10.w, r10.w  // lightCurrent<12>
  mov r16.w, r16.w  // lightCurrent<14>
  mov r20.x, r20.x  // lightCurrent<15>
  mov r13.w, r13.w  // lightCurrent<3>
  mov r16.y, r16.y  // lightCurrent<13>
  mov r13.z, r13.z  // output<104>

#line 194
  mov r22.xyzw, r22.xyzw  // output<92,93,94,95>

#line 197
  mov r21.y, r21.y  // output<101>

#line 200
  ieq r21.w, r13.w, l(3)
  if_nz r21.w
    mov r29.xyz, -r1.yzwy
    add r29.xyz, r20.yzwy, r29.xyzx
    dp3 r21.w, r29.xyzx, r29.xyzx
    rsq r23.w, r21.w
    mul r29.yzw, r23.wwww, r29.xxyz  // output<89:NaN:Inf,90:NaN:Inf,91:NaN:Inf>
    mov r23.xyz, r23.xyzx  // output<96,97,98>
    mov r10.y, r10.y  // output<99>
    mov r10.w, r10.w  // output<100>
    sqrt r21.w, r21.w
    mov r23.w, -r21.w
    max r21.w, r21.w, r23.w  // d<0:NaN:Inf>
    add r23.w, r16.y, l(1.000000)
    mul r28.w, r16.w, r21.w
    add r23.w, r23.w, r28.w
    max r21.w, r21.w, l(1.000000)
    mul r21.w, r21.w, r21.w
    mul r21.w, r21.w, l(1.000000)
    mul r21.w, r20.x, r21.w
    add r21.w, r21.w, r23.w
    div r29.x, l(1.000000), r21.w  // output<88:NaN:Inf>
    mul r30.xyzw, r25.xxxx, cb0[0].xyzw
    mul r31.xyzw, r26.xxxx, cb0[1].xyzw
    add r30.xyzw, r30.xyzw, r31.xyzw
    mul r31.xyzw, r27.xxxx, cb0[2].xyzw
    add r30.xyzw, r30.xyzw, r31.xyzw
    mul r31.xyzw, r28.xxxx, cb0[3].xyzw
    add r30.xyzw, r30.xyzw, r31.xyzw
    mul r31.xyzw, r25.yyyy, cb0[0].xyzw
    mul r32.xyzw, r26.yyyy, cb0[1].xyzw
    add r31.xyzw, r31.xyzw, r32.xyzw
    mul r32.xyzw, r27.yyyy, cb0[2].xyzw
    add r31.xyzw, r31.xyzw, r32.xyzw
    mul r32.xyzw, r28.yyyy, cb0[3].xyzw
    add r31.xyzw, r31.xyzw, r32.xyzw
    mul r32.xyzw, r25.zzzz, cb0[0].xyzw
    mul r33.xyzw, r26.zzzz, cb0[1].xyzw
    add r32.xyzw, r32.xyzw, r33.xyzw
    mul r33.xyzw, r27.zzzz, cb0[2].xyzw
    add r32.xyzw, r32.xyzw, r33.xyzw
    mul r28.xyzw, r28.zzzz, cb0[3].xyzw
    add r28.xyzw, r28.xyzw, r32.xyzw
    mul r25.xyzw, r25.wwww, cb0[0].xyzw
    mul r26.xyzw, r26.wwww, cb0[1].xyzw
    add r25.xyzw, r25.xyzw, r26.xyzw
    mul r26.xyzw, r27.wwww, cb0[2].xyzw
    add r25.xyzw, r25.xyzw, r26.xyzw
    mul r26.xyzw, r1.xxxx, cb0[3].xyzw
    add r25.xyzw, r25.xyzw, r26.xyzw
    dp4 r26.x, v0.xyzw, r30.xyzw  // output<106:NaN:Inf>
    dp4 r26.y, v0.xyzw, r31.xyzw  // output<107:NaN:Inf>
    dp4 r26.z, v0.xyzw, r28.xyzw  // output<108:NaN:Inf>
    dp4 r26.w, v0.xyzw, r25.xyzw  // output<109:NaN:Inf>
    mov r13.x, r13.x  // output<102>
    mov r13.y, r13.y  // output<103>

#line 200
  else 

#line 212
    ieq r1.x, r13.w, l(2)
    if_nz r1.x
      mov r1.xyz, -r1.yzwy
      add r1.xyz, r1.xyzx, r20.yzwy
      dp3 r1.w, r1.xyzx, r1.xyzx
      rsq r20.y, r1.w
      mul r29.yzw, r1.xxyz, r20.yyyy  // output<89:NaN:Inf,90:NaN:Inf,91:NaN:Inf>
      sqrt r1.x, r1.w
      mov r1.y, -r1.x
      max r1.x, r1.y, r1.x  // d<0:NaN:Inf>
      add r1.y, r16.y, l(1.000000)
      mul r1.z, r1.x, r16.w
      add r1.y, r1.z, r1.y
      max r1.x, r1.x, l(1.000000)
      mul r1.x, r1.x, r1.x
      mul r1.x, r1.x, l(1.000000)
      mul r1.x, r1.x, r20.x
      add r1.x, r1.x, r1.y
      div r29.x, l(1.000000), r1.x  // output<88:NaN:Inf>

#line 212
    else 

#line 220
      mov r29.yzw, r23.xxyz  // output<89,90,91>
      mov r29.x, l(1.000000)  // output<88: 1f>

#line 212
    endif 
    mov r26.xyzw, l(0,0,0,0)  // output<106: 0f,107: 0f,108: 0f,109: 0f>
    mov r23.xyz, l(0,0,0,0)  // output<96: 0f,97: 0f,98: 0f>
    mov r13.xy, l(0,0,0,0)  // output<102: false,103: false>
    mov r10.y, l(0)  // output<99: 0f>
    mov r10.w, l(0)  // output<100: 0f>

#line 200
  endif 

#line 224
  mov r13.w, r13.w  // output<105>

#line 186
else 
  mov r29.xy, l(0,0,0,0)  // output<88: 0f,89: 0f>
  mov r29.zw, l(0,0,0,0)  // output<90: 0f,91: 0f>
  mov r22.xyzw, l(0,0,0,0)  // output<92: 0f,93: 0f,94: 0f,95: 0f>
  mov r13.x, l(0)  // output<102: false>
  mov r13.yzw, l(0,0,0,0)  // output<103: false,104: 0u,105: 0u>
  mov r26.xyzw, l(0,0,0,0)  // output<106: 0f,107: 0f,108: 0f,109: 0f>
  mov r23.xyz, l(0,0,0,0)  // output<96: 0f,97: 0f,98: 0f>
  mov r10.y, l(0)  // output<99: 0f>
  mov r10.w, l(0)  // output<100: 0f>
  mov r21.y, l(0)  // output<101: false>
endif 

#line 227
mul r1.xyzw, cb0[4].xyzw, cb0[12].xxxx
mul r20.xyzw, cb0[5].xyzw, cb0[12].yyyy
add r1.xyzw, r1.xyzw, r20.xyzw
mul r20.xyzw, cb0[6].xyzw, cb0[12].zzzz
add r1.xyzw, r1.xyzw, r20.xyzw
mul r20.xyzw, cb0[7].xyzw, cb0[12].wwww
add r1.xyzw, r1.xyzw, r20.xyzw  // viewproj<0:NaN:Inf,4:NaN:Inf,8:NaN:Inf,12:NaN:Inf>
mul r20.xyzw, cb0[4].xyzw, cb0[13].xxxx
mul r25.xyzw, cb0[5].xyzw, cb0[13].yyyy
add r20.xyzw, r20.xyzw, r25.xyzw
mul r25.xyzw, cb0[6].xyzw, cb0[13].zzzz
add r20.xyzw, r20.xyzw, r25.xyzw
mul r25.xyzw, cb0[7].xyzw, cb0[13].wwww
add r20.xyzw, r20.xyzw, r25.xyzw  // viewproj<1:NaN:Inf,5:NaN:Inf,9:NaN:Inf,13:NaN:Inf>
mul r25.xyzw, cb0[4].xyzw, cb0[14].xxxx
mul r27.xyzw, cb0[5].xyzw, cb0[14].yyyy
add r25.xyzw, r25.xyzw, r27.xyzw
mul r27.xyzw, cb0[6].xyzw, cb0[14].zzzz
add r25.xyzw, r25.xyzw, r27.xyzw
mul r27.xyzw, cb0[7].xyzw, cb0[14].wwww
add r25.xyzw, r25.xyzw, r27.xyzw  // viewproj<2:NaN:Inf,6:NaN:Inf,10:NaN:Inf,14:NaN:Inf>
mul r27.xyzw, cb0[4].xyzw, cb0[15].xxxx
mul r28.xyzw, cb0[5].xyzw, cb0[15].yyyy
add r27.xyzw, r27.xyzw, r28.xyzw
mul r28.xyzw, cb0[6].xyzw, cb0[15].zzzz
add r27.xyzw, r27.xyzw, r28.xyzw
mul r28.xyzw, cb0[7].xyzw, cb0[15].wwww
add r27.xyzw, r27.xyzw, r28.xyzw  // viewproj<3:NaN:Inf,7:NaN:Inf,11:NaN:Inf,15:NaN:Inf>
dp4 r1.x, r0.xyzw, r1.xyzw  // output<0:NaN:Inf>
dp4 r1.y, r0.xyzw, r20.xyzw  // output<1:NaN:Inf>
dp4 r1.z, r0.xyzw, r25.xyzw  // output<2:NaN:Inf>
dp4 r1.w, r0.xyzw, r27.xyzw  // output<3:NaN:Inf>

#line 231
dp3 r0.x, v1.xyzx, cb0[0].xyzx
dp3 r0.y, v1.xyzx, cb0[1].xyzx
dp3 r0.z, v1.xyzx, cb0[2].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // output<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
dp3 r20.x, v3.xyzx, cb0[0].xyzx
dp3 r20.y, v3.xyzx, cb0[1].xyzx
dp3 r20.z, v3.xyzx, cb0[2].xyzx
dp3 r0.w, r20.xyzx, r20.xyzx
rsq r0.w, r0.w
mul r20.xyz, r0.wwww, r20.xyzx  // output<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
dp3 r25.x, v4.xyzx, cb0[0].xyzx
dp3 r25.y, v4.xyzx, cb0[1].xyzx
dp3 r25.z, v4.xyzx, cb0[2].xyzx
dp3 r0.w, r25.xyzx, r25.xyzx
rsq r0.w, r0.w
mul r25.xyz, r0.wwww, r25.xyzx  // output<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
mov r16.yw, v2.xxxy  // output<13,14>

#line 237
dp4 r27.x, l(0.000000, 0.000000, 0.000000, 1.000000), cb0[8].xyzw  // output<15>
dp4 r27.y, l(0.000000, 0.000000, 0.000000, 1.000000), cb0[9].xyzw  // output<16>
dp4 r27.z, l(0.000000, 0.000000, 0.000000, 1.000000), cb0[10].xyzw  // output<17>
mov r0.w, cb0[17].x  // output<110>
mov o0.xyzw, r1.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
mov o1.xyz, r0.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
mov o1.w, r7.w  // VS<34>
mov o2.xyz, r20.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
mov o2.w, r11.w  // VS<55>
mov o3.xyz, r25.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
mov o3.w, r12.w  // VS<56>
mov o4.xy, r16.ywyy  // VS<13,14>
mov o4.z, r6.w  // VS<33>
mov o4.w, r17.w  // VS<77>
mov o5.xyz, r27.xyzx  // VS<15,16,17>
mov o5.w, r18.w  // VS<78>
mov o6.xyzw, r2.xyzw  // VS<18:NaN:Inf,19:NaN:Inf,20:NaN:Inf,21:NaN:Inf>
mov o7.x, r14.x  // VS<22:NaN:Inf>
mov o7.y, r14.y  // VS<23:NaN:Inf>
mov o7.z, r14.z  // VS<24:NaN:Inf>
mov o7.w, r14.w  // VS<25:NaN:Inf>
mov o8.x, r5.x  // VS<26>
mov o8.y, r5.y  // VS<27>
mov o8.z, r5.z  // VS<28>
mov o8.w, r5.w  // VS<29>
mov o9.x, r6.x  // VS<30>
mov o9.y, r6.y  // VS<31>
mov o9.z, r6.z  // VS<32>
mov o9.w, r10.y  // VS<99>
mov o10.x, r7.x  // VS<35>
mov o10.y, r7.y  // VS<36>
mov o10.z, r7.z  // VS<37>
mov o10.w, r3.w  // VS<38>
mov o11.x, r3.x  // VS<39>
mov o11.y, r12.x  // VS<57>
mov o11.z, r12.y  // VS<58>
mov o11.w, r12.z  // VS<59>
mov o12.x, r3.y  // VS<40:NaN:Inf>
mov o12.y, r3.z  // VS<41:NaN:Inf>
mov o12.z, r10.z  // VS<42:NaN:Inf>
mov o12.w, r10.x  // VS<43:NaN:Inf>
mov o13.x, r19.x  // VS<44:NaN:Inf>
mov o13.y, r19.y  // VS<45:NaN:Inf>
mov o13.z, r19.z  // VS<46:NaN:Inf>
mov o13.w, r19.w  // VS<47:NaN:Inf>
mov o14.x, r9.x  // VS<48>
mov o14.y, r9.y  // VS<49>
mov o14.z, r9.z  // VS<50>
mov o14.w, r9.w  // VS<51>
mov o15.x, r11.x  // VS<52>
mov o15.y, r11.y  // VS<53>
mov o15.z, r11.z  // VS<54>
mov o15.w, r10.w  // VS<100>
mov o16.x, r4.x  // VS<60>
mov o16.y, r4.y  // VS<61>
mov o16.z, r18.x  // VS<79>
mov o16.w, r18.y  // VS<80>
mov o17.x, r4.z  // VS<62:NaN:Inf>
mov o17.y, r4.w  // VS<63:NaN:Inf>
mov o17.z, r16.z  // VS<64:NaN:Inf>
mov o17.w, r16.x  // VS<65:NaN:Inf>
mov o18.x, r24.x  // VS<66:NaN:Inf>
mov o18.y, r24.y  // VS<67:NaN:Inf>
mov o18.z, r24.z  // VS<68:NaN:Inf>
mov o18.w, r24.w  // VS<69:NaN:Inf>
mov o19.x, r15.x  // VS<70>
mov o19.y, r15.y  // VS<71>
mov o19.z, r15.z  // VS<72>
mov o19.w, r15.w  // VS<73>
mov o21.x, r18.z  // VS<81>
mov o21.y, r8.y  // VS<82>
mov o21.z, r8.x  // VS<83>
mov o21.w, r21.y  // VS<101>
mov o22.x, r8.z  // VS<84:NaN:Inf>
mov o22.y, r8.w  // VS<85:NaN:Inf>
mov o22.z, r21.z  // VS<86:NaN:Inf>
mov o22.w, r21.x  // VS<87:NaN:Inf>
mov o23.xyzw, r29.xyzw  // VS<88:NaN:Inf,89:NaN:Inf,90:NaN:Inf,91:NaN:Inf>
mov o24.xyzw, r22.xyzw  // VS<92,93,94,95>
mov o26.xyzw, r13.xyzw  // VS<102,103,104,105>
mov o27.xyzw, r26.xyzw  // VS<106:NaN:Inf,107:NaN:Inf,108:NaN:Inf,109:NaN:Inf>
mov o20.x, r17.x  // VS<74>
mov o20.y, r17.y  // VS<75>
mov o20.z, r17.z  // VS<76>
mov o25.xyz, r23.xyzx  // VS<96,97,98>
mov o28.x, r0.w  // VS<110>
ret 
// Approximately 771 instruction slots used
